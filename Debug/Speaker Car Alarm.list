
Speaker Car Alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cec  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003e80  08003e80  00004e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ea0  08003ea0  00013284  2**0
                  CONTENTS
  4 .ARM          00000008  08003ea0  08003ea0  00004ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ea8  08003ea8  00013284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ea8  08003ea8  00004ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003eac  08003eac  00004eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000e284  20000000  08003eb0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000e284  08012134  00013284  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000e3e4  08012134  000133e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013284  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f200  00000000  00000000  000132b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002332  00000000  00000000  000224b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  000247e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b0c  00000000  00000000  00025600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015fcb  00000000  00000000  0002610c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000110f7  00000000  00000000  0003c0d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008baf2  00000000  00000000  0004d1ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d8cc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b5c  00000000  00000000  000d8d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000dc860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000e284 	.word	0x2000e284
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003e68 	.word	0x08003e68

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000e288 	.word	0x2000e288
 80001d0:	08003e68 	.word	0x08003e68

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f000 fbd5 	bl	8000c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f815 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d2:	f000 f943 	bl	800075c <MX_GPIO_Init>
  MX_DMA_Init();
 80004d6:	f000 f921 	bl	800071c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004da:	f000 f8f5 	bl	80006c8 <MX_USART2_UART_Init>
  MX_I2S2_Init();
 80004de:	f000 f877 	bl	80005d0 <MX_I2S2_Init>
  MX_TIM4_Init();
 80004e2:	f000 f8a3 	bl	800062c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 80004e6:	4804      	ldr	r0, [pc, #16]	@ (80004f8 <main+0x34>)
 80004e8:	f002 fdda 	bl	80030a0 <HAL_TIM_Base_Start_IT>
  //int data[] = {0,0,0,0,-256,0,-256,0,0,0,-256,0,-256,0,0,-256,0,0,0,0,0,-256,0,-256,0,-256,0,-256,0,-256,0,-256,-256,0,-256,0,-256,0,0,0,-256,0,-256,0,-256,0,0,-256,0,-256,0,-256,0,0,-256,0,-256,0,-256,0,-256,0,-256,0,0,-256,0,-256,0,0,0,-256,0,-256,0,-256,0,-256,0,0,-256,0,-256,0,0,-256,0,-256,0,-256,0,0,-256,0,-256,0,-256,0,-256,0,0,-256,0,-256,0,-256,0,-256,0,0,-256,0,-256,0,0,-256,0,-256,0,-256,0,-256,0,-256,0,0,-256,0,-256,0,-256,0,-256,0,0,-256,0,0,0,-256,0,-256,0,0,0,-256,0,-256,0,-256,0,-256,0,0,0,-256,0,0,-256,0,-256,0,-256,0,-256,0,0,0,0,0,0,-256,0,-256,0,-256,-256,0,-256,0,-256,0,-256,0,0,-256,0,-256,-256,0,-256,0,0,-256,0,-256,0,-256,0,0,-256,0,-256,0,-256,0,-256,0,-256,0,-256,0,-256,0,-256,0,-256,-256,0,-256,0,0,-256,0,-256,0,-256,0,0,0,0,0,0,0,0,0,-256,0,-256,0,-256,0,-256,0,-256,0,0,-256,0,-256,0,-256,0,-256,0,-256,0,-256,0,-256,0,-256,0,0,-256,0,-256,0,-256,0,-256,0,0,-256,0,-256,0,-256,0,0,-256,0,-256,0,0,0,-256,0,0,-256,0,-256,0,-256,-256,0,-256,0,-256,0,-256,0,-256,0,-256,0,-256,0,0,0,0,0,0,0,0,-256,0,-256,-256,-256,-256,-256,0,-256,0,-256,0,-256,0,-256,0,-256,0,-256,0,-256,-256,0,512,512,768,768,768,2048,1792,2560,2816,2560,1792,0,1536,256,-256,4352,0,-2816,-3840,-5120,-1536,-256,-3328,-4352,-6656,-768,2048,2048,4096,-6656,-4864,-3328,1024,8960,11520,12800,8192,8448,9472,9216,12544,20992,23552,22784,14336,-7424,-4608,-2304,2048,-7168,-22528,-14336,-21760,-20736,-20224,-20992,-22784,-16384,-19456,-25088,-19968,-17152,-16384,-11264,-7168,-18944,-14336,-5376,3840,11264,11776,14848,12032,22016,30720,20480,21504,18432,22528,22272,17152,10240,-5120,-4352,-7936,-12032,768,4096,-8960,-3072,1024,-6912,-8192,-10240,-256,1792,-8448,-8448,-16896,-15104,-10496,-20480,-11264,-2048,1024,7936,9984,9984,3072,9472,19456,17664,18944,4096,-22016,-7680,3584,-18944,-29440,-23040,-12288,-27136,-23808,-6400,768,7936,-6656,-12800,-3328,3584,-1024,1280,6400,7168,-8704,-13056,4096,6656,8704,-4096,9472,27136,21248,24320,20224,24320,27392,14336,5120,19968,17408,2816,-6144,3328,9728,-10240,-9472,-6144,11008,13312,-512,-2816,-4352,6656,2816,-7424,5120,3328,-3328,1280,3840,6656,-5632,-13568,-5632,1792,4096,-4352,-6656,14336,7936,-10240,-19456,-2304,1280,-27648,-30720,-21760,-7168,-13312,-28416,-28928,-14592,-11264,-14592,-11264,-4352,5888,-2304,-8960,0,1024,-6144,-10496,11520,13056,-3840,2304,512,7936,8448,6400,18944,26112,28928,13312,-2560,29696,17664,-18176,-9216,2048,18432,14592,1280,-512,5888,4608,-3072,-7936,10752,24832,13824,7168,5888,11008,3584,-2304,11008,2048,-1280,6144,1792,5376,-9728,-10752,-768,-1280,3840,-18432,-22528,14848,3840,-24320,-32768,-24064,2304,-12288,-28416,-23040,-3584,7936,-16384,-32768,-24320,-11008,-512,5120,-4864,-11264,-14592,-2560,1280,-18688,-14336,-2048,7424,11264,9472,16640,9216,3840,9728,-9216,-14592,20480,25600,1280,-23040,-15360,14848,12544,-3840,-19712,-512,27904,25856,12800,10240,15872,20480,16384,9472,11776,14848,24320,16128,256,5120,14336,18688,9984,5632,16640,18432,26112,26112,512,-27136,-4352,21760,2304,-20480,-22784,1792,3328,-6400,-17920,-19712,-4608,5888,3072,-7168,-3328,5120,6656,-9216,-22528,-21760,-12544,-4352,-11264,-15104,-11776,-9728,-3584,-768,-6400,-14848,-5888,13056,14336,-13568,-22272,-11008,-20224,-27648,-30720,-14848,-1024,-5632,-14080,-19712,-3840,13056,13056,512,-8960,0,12032,4608,-7168,-17920,-23296,-21760,-16896,-4608,-512,-1536,3584,7936,9728,11264,14080,19712,15872,11264,11776,4096,-4352,-9216,-9728,-4864,5376,17408,21760,15616,16128,25600,32512,32512,23296,13312,12032,5376,4096,7936,2304,-11008,-23040,-16128,-512,11776,20736,17408,9728,12288,19200,27136,27904,18944,12800,768,-2816,4096,4096,-2048,-4608,2816,13568,13824,18432,28160,28160,27648,17920,13824,13056,-768,-10496,-8192,-5120,-8448,-19200,-23552,-22016,-18176,-512,7936,8960,9216,2304,1792,3584,7168,9984,-5888,-22784,-25856,-22784,-13056,-7168,-7424,-12544,-20480,-8192,7936,14336,16896,1280,-10752,-12800,-14592,-19712,-26624,-30208,-32768,-32512,-28672,-27904,-30976,-24320,-16384,-7168,-768,-512,-1536,-5120,-5376,-2816,-5376,-17408,-25088,-29952,-24064,-8448,4608,1536,-10496,-10240,768,14592,24320,27904,15360,-256,-11264,-13056,-6400,-8448,-14080,-17152,-14848,-10752,-7936,-1536,6144,7936,14080,19712,21760,25344,16128,12544,12544,5888,3584,-6144,-7424,4864,15360,23040,21248,19200,18432,17920,29184,32512,32256,25344,6400,256,512,1792,3584,1536,-1792,-4864,-1792,9216,20736,20480,15360,12800,15616,21760,22016,18944,11776,1024,-5120,-8192,-8704,-256,7424,13824,16896,15872,14592,9728,12032,20736,20736,14592,2304,-12800,-18176,-21248,-17408,-11776,-13312,-18432,-24064,-16384,-512,5376,3328,-2048,-7680,-1792,3072,6144,3328,-13568,-23296,-26112,-21760,-11520,-6656,-5376,-4096,512,4864,256,768,6400,3328,1280,-3328,-11008,-24064,-32256,-30208,-23296,-14592,-18688,-28160,-27392,-13056,-2816,0,-2304,-7168,-11008,-9472,-6144,256,-4352,-22016,-29184,-28672,-16128,-7424,-5120,-1792,768,4864,8192,8960,12800,3840,-2560,4096,1024,-2816,-19200,-27136,-21504,-12544,-4864,-8704,-12544,-4864,2048,9984,16896,12800,9728,2304,4352,13568,14592,4352,-9216,-14336,-5376,6656,15104,16896,17408,19200,19968,26368,31488,24320,11520,10240,9472,10752,6912,-5632,-10496,-7680,-256,4608,5120,7168,7168,10752,18944,19968,19968,15104,11008,14848,15104,12288,1536,-4352,-768,5376,13568,18944,19968,15872,16128,23040,29440,26880,18176,11776,5632,512,-1024,-7680,-11520,-7936,-4096,0,-3584,-6912,-8448,-2048,6400,8960,7936,7936,7680,4352,256,-3072,-9216,-14080,-7680,-5120,2560,6656,2560,-1792,-1024,7168,14080,17408,13568,6656,512,-7168,-13056,-18688,-27392,-21248,-16128,-11776,-9472,-14592,-20736,-18944,-10496,-4608,-1280,2048,4864,-256,-1536,-5888,-12032,-20480,-19200,-12032,-7936,-1280,-768,-1536,-3072,1024,6912,14080,15360,6144,512,-6912,-9984,-14080,-23808,-21248,-15872,-16640,-12800,-9728,-9216,-10496,-10496,-2560,2048,9216,7168,3584,3328,1024,-3840,-14592,-17920,-9728,-4864,2816,9728,7680,4096,768,13312,18944,28416,20736,9728,10496,5376,-2816,-21504,-20224,-18944,-17920,-12032,-5376,2304,0,-3584,2304,3072,6912,11520,8192,6656,-768,-5376,-12800,-18432,-14080,-1536,1280,12800,17152,11008,5120,-256,3328,9216,7680,-1792,-1536,-14848,-8704,-8448,-6400,-4864,-14592,-7168,-5120,2560,-4096,-12544,-10496,-5632,2048,4864,7936,2816,3584,11776,4608,-2048,-12800,-9216,-2560,4608,13568,8448,9472,7936,9216,18688,26368,19200,17664,12032,6912,2304,-7168,-11520,-16896,-12288,-9728,-5120,512,3072,3072,8448,14336,20224,24576,17920,15872,16640,6144,-4608,-12288,-8192,-2304,-4096,9472,17920,23808,17664,14080,18432,26368,24064,15616,15872,2560,-6400,-15360,-14848,-18944,-13824,-10752,-12032,-3328,2304,2560,-4096,-512,-2048,-256,-768,2048,1536,-5632,-14080,-10496,-7680,-10240,-7424,-3584,10240,13824,15616,2304,1792,5632,12032,12288,5120,2304,-6912,-1024,-8448,-15360,-22016,-23040,-22272,-15360,-6144,-3584,-7424,-8960,-10496,-5120,6912,4608,7168,-4096,-6144,-10496,-13056,-13824,-14592,-6144,-2048,7936,15616,15104,8960,8704,11008,12544,9728,5888,-5120,-10752,-13056,-13824,-19712,-23296,-26624,-27136,-10496,4096,8192,2816,-4096,-12544,-2816,3328,2304,-2304,-13056,-18176,-18176,-9728,-9728,-8192,-9728,-3072,7424,13312,12288,3328,2048,-4608,-3840,-3072,-6144,-12544,-15872,-13312,-13568,-16384,-17408,-21248,-16640,-4608,5888,6656,-768,-2816,-6912,5632,9216,12800,6400,256,512,2304,7936,256,2816,-1792,4608,14080,19456,14080,3072,256,256,7936,9216,3840,-5376,-4608,-7680,-7936,-7168,-9216,-6144,-2816,7168,15104,15616,8192,3840,4608,12288,18176,20992,17664,18688,17152,20480,22272,15616,8448,512,17664,25088,20992,5376,-8960,-9728,-4352,1536,-1280,-6912,-14592,-13312,-19200,-18688,-18176,-19200,-18176,-14080,-2304,-1792,-6656,-13824,-10240,-2304,4608,9216,10240,12800,11520,12288,11520,6656,1024,-1536,9216,17408,14336,4864,-5888,-7936,-11264,-13312,-15104,-14336,-11008,-12544,-23296,-29696,-26112,-20480,-18688,-19200,-5888,0,3328,-1792,-3840,1536,3840,13056,16128,20224,14080,11776,16128,13312,10496,8192,13568,22272,17152,13824,4864,0,-3584,-8192,-6912,-6912,-2304,-4608,-7680,-17664,-15360,-14080,-14080,-14592,-6656,2048,7168,5376,-1024,1024,-1536,4352,8192,18176,13824,8960,10496,6912,2560,-3584,1792,5376,3072,-2816,-8192,-11264,-13312,-14592,-16896,-13824,-9472,-6912,-12032,-20224,-21760,-18432,-16384,-20992,-14080,-6144,3840,3328,0,-256,-3328,1280,5120,16640,18944,11776,13568,9984,4608,-1024,768,8192,3840,2304,4352,6400,-2560,-7680,-5120,-2048,-4096,-3328,-2560,-7936,-9984,-12032,-10752,-14848,-7168,512,4864,7680,7936,8448,8192,8192,13824,21760,25856,22016,19968,22016,13056,9728,9728,15104,9472,2816,7424,7424,0,-7680,-6912,-6400,-10752,-6144,-8448,-14080,-16640,-20992,-19200,-25344,-19200,-15360,-13056,-9472,-9472,-3840,-7168,-5888,4352,10496,16128,12544,15616,18432,9728,6144,5376,12544,3840,-2560,512,2048,-6144,-14592,-12800,-9728,-10752,-13312,-8704,-13312,-16384,-16640,-14336,-19712,-12544,-6912,-6400,-2048,-4608,-2048,-2304,-1792,4608,14080,18688,15104,20736,25344,16640,15616,17152,22528,19456,16128,19200,14592,3584,-1792,-1024,-8960,-13312,-8960,-5888,-12288,-13568,-6400,-8960,-6400,-2560,-4096,-256,1280,2816,1024,2560,256,4864,7680,3328,13056,14080,17664,11008,1536,6656,3584,6656,-256,-1280,3840,-9728,-12032,-12800,-10752,-17408,-14848,-11520,-18176,-13568,-13824,-11008,-14336,-8960,-7168,-5888,-512,-512,3840,3328,5120,6912,6144,8704,9216,14592,14336,13312,8960,6400,5888,2048,4096,768,4864,-4608,-3584,-8448,-12544,-11520,-16640,-11776,-16896,-13312,-13824,-8448,-10752,-8192,-1280,-3840,1792,512,6656,5120,9472,10752,6144,16128,6400,14336,9728,9216,10752,5120,13568,3072,8960,-1024,3584,-1536,-4352,2048,-12544,-7680,-16128,-10752,-11264,-11008,-11520,-13056,-9216,-12288,-4608,-9216,-1536,-2048,0,4352,3072,11008,6656,12800,9216,13824,17664,11008,16384,7936,12800,7424,5376,3840,256,256,-11264,-3328,-12800,-12288,-13824,-15616,-13312,-15104,-11008,-13824,-6144,-10240,-5376,-7680,-2560,3840,2304,8704,6144,12544,7168,11264,10496,9216,15360,7424,13824,8192,10496,9728,3584,5632,-2048,3584,-7424,-2048,-3328,-12032,-7936,-14848,-10752,-14592,-11008,-14848,-10240,-8704,-8704,-4352,-6656,1536,-2304,4096,4864,9984,11264,8704,12544,5888,17408,13312,13824,14848,9216,13568,3584,7168,-256,768,-3072,-9728,-4608,-12288,-11008,-15872,-13312,-15104,-12032,-11008,-12800,-5888,-7424,-3072,-2048,2560,3584,2816,6912,7168,11008,11008,9472,9216,8960,9472,7680,11776,8960,7936,6400,512,2816,0,768,-4352,-4096,-4096,-8448,-9728,-12288,-11776,-12800,-11520,-13056,-9728,-8704,-8960,-6400,-1792,1536,-512,5888,6656,8704,12288,11776,12544,11776,13312,9728,12288,12800,7680,9472,2304,2560,256,-2304,-3840,-8704,-3840,-9472,-10752,-13312,-14336,-13824,-13312,-11264,-11008,-6400,-7680,-5376,-4608,1024,768,1536,8448,6912,10240,11776,11264,11776,11776,12032,9728,12544,9472,5632,8448,768,1536,-1536,-3072,-5888,-8448,-4608,-12032,-8192,-12800,-13056,-12032,-13056,-8448,-10496,-6656,-5376,-5376,-4096,256,256,3072,8960,6912,8960,11520,10752,8192,11008,12544,8448,14080,8192,6656,8192,512,1280,-2816,-256,-7936,-8192,-6144,-13056,-9728,-12800,-12800,-15104,-12544,-10752,-11264,-6400,-6144,-4608,-1280,3840,3328,4864,8960,8192,11776,14336,13312,11008,12544,14848,11008,15616,6144,4608,4864,-2560,-1536,-7168,-1024,-12032,-12288,-6400,-13056,-9728,-12032,-12544,-15360,-17408,-14336,-11264,-11264,-15360,-9472,-1792,-1536,-1024,1792,10752,7168,5120,10752,14080,17152,12800,6912,8704,12800,7936,8448,5888,10752,20224,9728,3584,2048,6144,4864,-3328,-5120,-10240,-9216,-17920,-17408,-16128,-24320,-24320,-17664,-3072,-3072,-3840,-6656,-1280,-3072,-6656,-3328,-3584,-1536,-10496,-11008,-512,7424,-1024,-12544,-12544,3072,13824,11776,4352,3840,4864,7424,7168,6656,6400,768,2304,1024,13056,8192,1280,2304,5888,9216,6912,13312,17152,13824,4352,9216,9216,11008,12800,4096,3328,12288,15360,12544,3072,-5632,1024,-2304,-6656,-3328,-512,-2304,-8960,-13056,-10240,-11264,-6656,-15872,-18432,-11520,-16384,-9472,-12032,-9984,-17920,-22784,-15872,-5120,-3840,-8704,-5888,-1280,8704,5888,768,3328,7680,7168,8960,3072,14080,17152,1792,-4096,-768,7680,9472,12800,14336,13568,6144,7168,7424,5888,-6400,-13824,256,6400,5888,256,-1536,-1792,-6400,-9216,-6400,-1536,2048,768,-13056,-15872,-4864,-5888,-11520,-22784,-16896,-256,-3328,-5120,-8192,-9984,-14592,-12288,-4096,1024,-2560,-8704,-1280,-1536,-7168,-15360,-8704,3584,2816,512,6144,20480,22528,7680,-4864,1280,4864,3840,11520,13824,13056,11776,8960,18176,14848,10496,17408,11776,17408,18176,12032,11264,12288,6656,-5632,-13312,-6144,8192,6656,-256,-6656,4352,15616,9472,-512,-1536,8448,4096,-3584,2816,2560,-11520,-17664,-13056,-7680,-7168,-7424,-1536,-3072,-16896,-16128,-9984,-6656,-11776,-28928,-25344,-10752,-512,-8704,-21504,-23040,-16896,-14336,-14848,-7168,-5376,1280,6656,5376,3328,5120,10240,3840,-3072,8448,9984,8960,13312,8704,1024,-5888,4864,16640,14336,10496,16384,16128,17408,14848,4352,8448,13056,13312,5632,4096,12544,9472,-512,-5632,-3840,1024,10240,16896,11264,6912,5376,3072,256,-1792,-4096,-14080,-9216,768,-1280,-14080,-16128,-1792,-9472,-20736,-19712,-5376,4096,-2048,-10496,-17152,-9472,-4864,-12032,-19200,-21504,-15872,-14592,-11264,-4352,-9728,-18432,-13056,-1024,512,512,-2560,-2304,-2048,-7680,-7680,-9216,-9728,-11008,-11264,-3328,8448,12032,4096,5120,12032,17152,16896,7424,5376,4608,7424,10496,6912,1024,-6656,-9216,-4352,7936,15104,16128,15360,16128,17920,18944,26368,27648,19712,11264,3584,9984,8448,5376,4608,-1024,4608,8448,18176,26880,32512,29184,26368,16128,9472,13312,11520,9984,-2816,-4864,-4864,-5632,-9728,-9472,-6912,-2048,9984,12800,14592,6912,3072,8448,9984,5120,-6912,-19456,-22528,-18944,-13056,-10496,-7424,-8960,-17408,-17408,-1024,15872,19968,3072,-18432,-20224,-16128,-9984,-14592,-25856,-32000,-30976,-27392,-20480,-14336,-18688,-18688,-14336,-1792,6912,5888,-1280,-5120,-9216,-11264,-13568,-22016,-23808,-25600,-19200,-8960,-1536,-5632,-15360,-11776,3840,22528,25344,9216,-5632,-11264,-10240,-6912,-8704,-14592,-15616,-18176,-14336,-256,4096,3584,1536,3584,12800,21248,23552,25600,17152,5632,-2048,-6912,256,-512,-768,1024,12032,22016,16640,11008,16128,28672,32512,31744,19456,12544,6400,1280,2304,2816,3328,-2304,-6912,256,12544,16640,15872,12544,15104,15872,18176,25856,29952,23552,3072,-14336,-14336,-2560,4352,7936,12544,14080,7424,2304,12032,23808,29440,16640,4096,3072,-768,-6400,-13824,-14336,-14592,-13568,-16128,-12288,-6400,-6912,-3584,1280,2816,1024,-1792,-1536,7936,6656,-2560,-17664,-28160,-28928,-27136,-15360,-3840,512,-9472,-20480,-10496,5376,12544,8448,-11008,-19200,-18944,-18432,-13056,-20480,-31232,-32768,-30976,-25344,-14080,-13312,-14848,-7936,-2816,-2048,-4608,-3840,256,2816,0,-6656,-14848,-26368,-28928,-22272,-3328,10752,5120,-6400,-4864,11264,23296,24832,12288,-1024,-7936,-8448,-1792,4096,-1536,-12288,-19712,-18688,-3072,6144,10496,15360,18944,19200,18688,16896,16128,17920,13568,11520,7168,-2304,-6144,-3840,6400,25600,29952,19200,12288,23296,32512,31232,31744,15104,-3840,-9728,512,12032,11776,2560,-9984,-16384,-11264,3584,12032,19200,21248,19200,20736,19456,16640,13568,7424,5632,1792,-4864,-10496,-13312,-6912,4352,17152,13312,5120,5632,13056,26624,30208,15616,-6144,-22016,-24064,-13824,-9984,-12032,-17664,-27392,-30208,-19456,-3584,4352,5632,-512,-4352,1280,2560,2560,-512,-9472,-19968,-27392,-29952,-23296,-16896,-10496,-1024,4352,2816,0,4608,13312,23296,13312,-3328,-14336,-20480,-16640,-9472,-12032,-17664,-24064,-27904,-17920,-3072,13824,16384,11520,2816,1792,6400,11776,18176,10496,-5632,-17152,-24064,-21504,-6144,512,8192,13824,20992,24832,23808,27904,30976,32512,18432,6144,1024,-256,6912,4352,-6912,-9472,-15104,-11776,3840,21760,32512,28416,17152,6656,12288,17408,20480,21760,7680,-7680,-18432,-21760,-5376,8448,8448,8448,12032,17920,22528,29696,30720,28672,15104,-2048,-4096,-3072,1792,5376,-6912,-14592,-17408,-18944,-7168,8192,23040,25088,15616,1536,-3584,1024,6912,11776,2816,-15104,-24832,-30208,-22528,-5376,0,-3328,-5632,-1280,8192,19456,20736,18688,3328,-15104,-19200,-15360,-7424,-2816,-12800,-25344,-29952,-31232,-23296,-10752,4864,13312,13568,-2048,-10496,-9984,-5376,4096,-1792,-15360,-27904,-32768,-29696,-16384,-4352,-5888,-12544,-10240,-4352,15872,27136,25856,10496,-18944,-26112,-19968,-6656,0,-3840,-18944,-28672,-31488,-28416,-13312,5632,14848,15872,8960,-4864,-5376,-5376,768,2560,-5376,-22528,-30208,-24064,-11264,2816,2048,-5120,-7680,-5376,11520,31232,31744,26112,-2816,-23808,-19968,-3840,10240,7936,-8704,-21504,-22272,-20480,-3072,13568,22784,20480,16128,8704,5376,10752,15360,14848,5888,-3072,-7936,-8448,-2048,13056,16896,6912,-1792,-3328,9472,27648,30720,30208,15872,-14336,-24320,-9216,7168,18432,8960,-15104,-14080,-4864,7680,27136,28672,19712,12544,10752,5632,6656,4864,768,-4608,-23808,-20224,-12288,-5632,5888,11520,768,-12544,-13568,-7168,9216,25856,30464,6144,-23552,-32768,-19712,5120,20480,7680,-13056,-25344,-26624,-16896,-256,7680,1536,4608,7680,7424,20480,26624,7168,-2560,-13312,-25600,-22528,-2816,7936,1536,-10496,-20480,-13312,-6656,6912,23040,31232,25088,7424,-14592,-12800,3584,16896,17664,-7680,-27904,-25600,-7936,11008,27392,15872,4096,6144,9216,22016,23808,15360,1024,-16896,-28928,-22528,-11776,-3840,5376,10496,3840,768,6656,14848,22016,23808,24832,1792,-21248,-28672,-12800,6400,12032,0,-25856,-31232,-16640,9984,14080,-1280,-16128,-12288,-3840,4864,3840,-5120,-10240,-11008,-13568,-12544,-4352,-4864,-3840,-3328,5632,7680,9728,3840,0,6144,12032,16640,6656,-8192,-10752,3584,10496,1792,-17920,-32256,-22272,1024,13824,8192,-1792,-1280,3072,9472,8448,-1792,-11008,-10240,-2560,7168,-512,-15872,-19456,-16384,-768,8960,1536,-4352,-7424,-4864,6400,6400,256,-7168,-6912,-5120,2560,-6144,-11520,-17664,-22272,-8960,-5888,10496,9984,6656,-1536,-1792,768,1024,-6400,-8960,-2560,512,4352,-2816,-5376,-9984,4096,6400,7936,4352,3584,6400,8960,12288,6912,6656,-256,4864,8192,4864,-512,-2560,-8448,-8192,768,12032,22016,19456,10496,5120,7680,9984,11264,-512,-1024,5120,11776,11264,-2048,-5120,-4096,8704,10496,20224,15360,16384,17152,13056,18944,7680,10752,1792,1792,5632,6912,-1792,-14080,-17920,-17920,-5120,256,3072,-1792,-13312,-9984,-5888,-4096,-5888,-13056,-11520,-5120,2816,-2560,-5376,-13824,-8704,2560,9216,17152,4608,7168,3072,2048,3584,1536,-2816,-5632,-1024,-1024,-2048,-13824,-15616,-19456,-14080,-4096,256,256,-5888,-9472,-6912,-5120,-3328,-7424,-8960,-6656,-2816,4864,-1792,-2304,-7168,768,8960,18688,20224,14336,12544,6144,10240,2816,5120,-1280,256,1792,1536,-4096,-7936,-8704,-11264,-256,4096,13568,3840,3072,-1024,-256,-3584,-4608,-512,-3584,-2304,2048,2816,-2816,-3072,-8192,-2816,256,4608,-512,-768,-4608,-4864,-7936,-12032,-8960,-10752,-8704,-4608,-1536,-6656,-3072,-10752,-7936,-4096,0,6400,1024,3840,-7424,-8960,-12544,-5632,-4352,-9216,-3328,-3072,2048,-2560,-256,-7680,-2304,1280,4864,8960,2816,4096,1280,512,0,768,-1280,-1792,-768,6656,7424,2304,-2304,-256,-512,9728,9216,7680,6912,-768,1024,-4352,4096,-1536,768,512,3840,8960,6656,5376,-512,5376,9728,14848,13568,12800,4352,2816,5888,4608,4608,-512,-2048,1536,4864,3584,0,-5632,-3584,-4096,-3840,-4096,-6144,-6656,-8960,-8192,-10752,-9984,-10752,-10240,-7936,-2304,-2560,-3840,-4608,-5376,-2304,1280,3840,3840,1024,-3072,-1536,-4608,1280,-2560,-5120,-4096,-4096,768,-256,1536,0,1280,1536,1536,2304,1536,1024,768,-768,-1280,-768,0,-768,-256,1024,768,4096,4096,4352,4608,5888,7936,5888,4352,2560,2048,1024,1792,2048,1536,1280,1792,2304,3328,4608,3072,4096,4352,4096,3328,1280,768,0,512,-768,-2816,-3840,-3072,-3328,-1536,-1792,-3328,-1280,-1792,1536,2048,3072,1024,0,-512,-1280,768,-1024,-2048,-3072,-3328,-3328,-2048,-1280,-3328,-2304,-1024,1536,2304,-256,256,0,1024,-512,-1792,-3328,-2816,-3072,-2816,-1280,-2816,-2560,-1792,-512,1536,2560,2048,256,-256,768,-256,768,-1024,256,-1536,-768,0,-2560,-768,-2048,-512,768,1792,2816,1792,1792,-256,-256,-256,-768,256,-1024,512,512,512,0,-1280,0,512,2048,512,256,1792,1792,2304,-512,-768,-2304,-1024,0,-768,-1536,-1280,-768,-1280,0,-1024,256,-256,768,1792,-768,256,256,1024,1792,0,768,-1536,512,-1280,-768,-256,-1024,-256,-2816,512,-1280,1024,-1280,-1280,768,256,1280,-256,512,-256,512,1792,256,512,-256,-256,256,0,-1280,-3072,-2048,-1024,1280,256,512,-256,0,-768,256,2048,1536,2304,-512,768,768,768,-512,-3072,-3072,-1536,0,256,1024,-256,768,256,1792,2048,1792,1792,1536,2560,256,0,-1536,-1280,-768,-512,-1792,-1792,0,-512,0,-1536,512,256,1280,1024,1792,1792,-256,0,-1024,512,0,512,-1024,256,0,-768,-768,-2048,-768,-1280,-256,256,0,-256,-1536,768,0,256,0,-1024,1280,0,1792,-1280,512,256,-1280,768,-768,1280,-1280,256,0,256,1792,-256,1024,0,1280,-1024,-1792,-256,-1024,768,-768,-768,-1792,-1024,-1024,0,512,768,1024,512,1536,512,768,-768,-256,512,256,-1024,-1024,-2048,-1792,-512,-2304,-1536,-1536,512,512,512,0,256,256,-768,768,-256,0,-1792,3840,3840,768,-2560,-4608,-3072,-4608,-768,-768,-768,-2560,2816,3328,5376,6656,-512,-256,4096,7424,6912,256,-4608,-6144,-7168,-7168,-2304,1280,3328,5120,-3584,2816,3072,-5888,-4608,-2816,1536,4352,-5632,-17664,-18432,-256,12032,4864,0,-768,4352,4096,1792,-4864,1792,7424,9472,16128,8192,1792,1024,2816,1792,-5376,-6656,-512,256,-15360,-20480,-6656,-4864,-11008,-4096,2816,5376,12032,4096,3584,3840,11264,6656,-768,-1280,-6912,2560,1536,-9728,-15616,-15616,5376,20224,1536,1792,7168,8960,-256,-5888,-9472,-5376,7168,512,-9728,-15872,-3840,7936,-256,-11776,-9216,768,11008,5888,-2560,-1536,11520,15104,5120,512,3840,9984,10496,3072,2304,256,-768,1792,-4864,-6656,-6144,-8960,-8960,-2560,2816,256,-256,-1280,-5632,2048,-4864,-15104,-17152,-3328,5888,3584,-6912,-12544,5888,11264,10240,2816,768,2304,512,-768,-3840,-1024,3328,7168,3840,1280,2304,-256,5376,-768,-8192,-11520,-4096,6144,-2560,-512,-7424,-4352,11776,18432,9472,-6912,-5376,-4352,1280,7936,-10496,-8448,1792,-7680,-18688,-19712,3328,19968,14592,-4608,-7680,-4352,9472,16128,14848,12288,4352,9472,9216,11264,512,-3584,-2048,-1792,5888,1792,2048,5376,7680,5120,-512,0,-7168,2304,-10752,-22016,-23808,-16384,-9472,-20736,-13568,-16128,-5632,-7168,512,-1792,-3584,-3840,2304,16384,14080,9216,-512,6400,5888,15104,2304,7424,10240,11520,12800,-2560,3584,9984,13568,0,-4352,-13312,-2816,-1536,-18688,-18688,-13568,4608,-1792,-11520,-23040,-15872,1536,256,3072,-9728,-23808,-14080,-1792,5376,8192,-11008,-5120,-11520,1024,3328,-9216,-3072,-8448,16384,16128,15104,13568,21760,26368,10752,-1792,-11776,-1792,19968,11264,-12544,-17152,7680,26624,19968,10240,-7680,-5632,-1536,16640,21760,12032,-768,-3328,2816,4864,7424,0,512,-6912,-7936,-11520,-20480,-8960,-9472,9216,6912,6912,3328,-14848,14592,-1280,2816,-12800,-12288,-14336,-27136,-3840,-25600,-11008,-9472,1792,3328,-7680,512,-8960,1280,3840,3072,2304,-512,3840,256,0,2304,2816,6400,5888,2816,512,-4864,-8960,-512,9472,14592,13312,9472,6656,3072,6912,-1536,-9472,-18944,-23552,-11264,-11008,-7680,-17408,-15360,-5120,-768,-1792,-15616,-18944,-17920,-3584,-3072,-8704,-11008,-14080,-9728,-6912,-6656,-7168,-6912,-6400,-8960,-14080,-10240,-5888,-4096,2304,9728,15616,15104,10752,8704,4096,1792,1536,2304,-11776,-13056,-4352,-6144,-512,6144,14848,18688,9728,1536,-256,6656,21504,22016,13824,3328,8960,16128,23552,22016,7680,5632,8192,12032,9216,8960,8704,6400,12800,17920,26368,30976,21760,13312,2816,7424,3840,15360,3072,-17152,-10752,-12288,4352,5888,14848,10240,2816,-3072,-9216,-3328,512,6912,-5888,-10752,-9472,-1536,11008,9472,1792,-15360,-13056,-8192,-12544,-9984,-16896,-11776,-7936,-1280,3072,1792,-512,-13824,-16896,-15872,-10752,-2048,-8704,-28160,-32768,-30976,-20992,-8704,-5120,-6912,-4352,-9472,-16640,-19456,-20480,-7936,-10240,-11520,-13056,-1792,9216,6656,4096,-15104,-13056,-2816,3328,-512,-10496,-5376,-3584,9984,14080,13824,13824,4096,6656,1024,9472,5376,7936,-2816,-23808,-14336,-10496,9216,9216,13568,14592,13056,13824,5632,7680,4096,9984,7424,7680,17664,22528,26624,20224,12032,6144,11776,22016,15872,8704,4352,12032,21248,26112,25600,21248,13312,11520,11520,14080,11008,6144,5376,-15872,-13568,-8192,4352,8448,8704,11008,3840,5888,-4864,-8704,-14592,-11264,-6656,-1280,7424,8192,7424,1792,-6912,-13824,-12288,-10240,-10496,-17152,-19456,-17664,-9728,256,-1792,-768,-8448,-12032,-14592,-9472,-5376,-14336,-12288,-28160,-32512,-32000,-26368,-15872,-15360,-5376,-11264,-13312,-18176,-27392,-24576,-25344,-15872,-11008,-1792,5120,2304,2304,-11776,-14592,-16384,-13312,-5888,-11008,-10752,-12288,-6656,6144,9984,16896,12288,6144,1792,3328,12032,4352,7168,-2560,-13824,-12800,-10240,0,1792,11264,15616,15616,16384,5632,1792,-3584,512,5376,9472,25600,28160,30976,20736,8960,4096,4096,13056,10496,8960,8448,13056,24576,28928,27392,21504,15872,14080,12032,21504,19456,10496,5120,-8192,-9728,-4352,4864,7424,9984,14848,17152,16896,6656,-1024,-7680,-7680,-1280,5376,13056,15616,17152,14592,6400,-2304,-5376,-3584,2048,1280,-1024,-512,3328,8448,8448,10496,4096,-1792,-2816,-4608,0,256,-6400,-19200,-29184,-27648,-23040,-7168,-5120,-4352,-5376,-6656,-8448,-15872,-10240,-14592,-9472,-10240,-9472,-6912,3584,11520,3072,-8960,-21504,-14848,-5632,1280,-2048,-5120,-4096,1792,3584,7680,6656,-4608,-11520,-11776,-13568,-7168,-3072,-19200,-23552,-28160,-24320,-17920,-8704,-8448,-6400,-4864,-9984,-16128,-16128,-7680,-11776,-9216,-14592,-11008,-4096,9472,12288,2048,-7680,-18944,-12288,-8192,-2560,-256,-1536,3584,3328,6144,9984,3840,-768,-2560,-1280,-5376,2048,-512,-14336,-13824,-21504,-17408,-6912,1536,6656,5888,3328,-8960,-9216,2304,11008,10496,8192,7424,11008,16640,18176,16128,8960,7424,768,6144,7168,9984,13568,12544,20736,17408,26368,27904,24832,21504,15360,4352,1024,6400,1280,256,-1024,-9728,-5632,2304,11264,17408,9728,2560,-7424,4096,10240,14336,13056,10496,11776,10752,12800,9472,17920,11776,6656,0,0,1536,5376,12032,7424,6144,5888,11008,12032,11264,8192,768,-8960,-6656,-7680,-9728,-11264,-17920,-20224,-15872,-6912,-4864,-3328,-8192,-11008,-12800,-9472,-6912,-2304,2816,5120,4352,-2304,-3584,-3072,5632,-1792,-8704,-12800,-13824,-5120,256,2048,-6400,-6912,-2048,3328,6912,7680,5632,-6912,-13312,-17664,-26368,-20224,-17664,-17152,-11520,-8960,-10240,-11776,-10496,-12032,-12288,-11264,-9216,-7936,-1280,5376,2816,2304,-2816,-3328,4608,9216,3840,-2816,-3072,-6656,-768,768,1024,1536,3584,7168,3840,6144,6144,8704,1280,-3328,-11776,-23040,-12544,-7680,-5888,-1280,1536,2048,-1024,-1792,-4608,-10752,-10752,-7680,-3584,2048,11776,15104,18176,12032,9472,14080,8960,5632,2048,5376,-6144,-9984,-7168,-2304,7936,11008,14848,8960,8448,14592,10752,4352,-9728,-25344,-30720,-24064,-23808,-18944,-5120,-8704,-512,3072,3840,1280,1792,4352,1536,2048,2560,7424,5376,4608,-2048,-256,3072,1280,11520,12544,9216,3840,-2048,768,3584,11008,5376,256,-2560,4096,9984,8192,5632,-2048,-2560,-7424,-7424,-5632,-256,3328,-3840,-3840,-512,1024,5888,8960,11776,7168,10240,21760,27392,22272,16384,13312,11520,12288,9984,17920,14592,11520,5120,5120,9728,10752,16896,11008,5888,-1280,5120,11776,11520,7424,0,0,1792,1024,4864,1280,-12800,-17408,-20736,-14592,-9984,-4096,-5376,-10240,-10240,-10752,-3072,2304,8960,6912,3328,-512,4864,14080,11520,12288,-1536,-12288,-7936,-768,6912,1536,-2816,-13312,-18688,-8448,-3328,1024,-4096,-11008,-13312,-8960,-7168,-8192,-17152,-27136,-32256,-28160,-15616,-12800,-5376,-5120,-4864,-9984,-2304,8704,13056,10240,3840,-768,-2816,7680,12288,17152,10240,-768,-5888,-1792,-1024,9216,9472,256,-10240,-13824,-5376,-3072,768,-5632,-7680,-5376,512,3072,3072,-4864,-16384,-25088,-20480,-9728,-512,0,-3328,-3840,-10752,-5376,2048,7680,8704,6912,2304,2816,-1280,256,-2560,-4864,-2816,-3584,-512,2304,11264,4352,-1536,-12544,-11008,-2304,7680,7680,3840,4864,-4096,-2816,-1792,0,-6912,-13568,-17152,-11264,0,7424,4096,-2560,-6656,-6144,3328,9216,16128,16384,14592,8960,11008,16384,15360,10752,7936,4864,4864,11008,10496,17664,12288,6400,1024,1792,7424,12544,13056,8960,9728,4352,5376,4352,1792,-6144,-11264,-14080,-4864,5888,12544,10752,7168,8704,3584,9728,11520,14848,13824,12288,8448,4096,5376,2816,768,-4864,-6144,-5888,-2304,4096,1024,-5120,-14336,-23296,-16896,-4096,1792,3328,-256,-8192,-8960,-3328,-3072,-7168,-15104,-15872,-12288,-4352,6144,5376,-4608,-13568,-12032,-6656,2560,8704,11264,6144,-1024,-3072,-3584,-512,256,-1536,-5120,-1024,4096,5376,6144,-512,-6144,-10752,-10752,-6656,-512,8448,6400,6400,3584,2816,4096,768,-1536,-7936,-6144,-4352,4864,11776,11008,3328,-5632,-7936,-4864,5888,12800,17920,9728,7936,7168,7936,8448,4864,768,-5888,-512,3072,7168,1792,-5376,-15360,-22272,-17408,-13312,-5888,-3072,-5376,-8704,-13312,-12800,-10496,-15872,-17408,-19712,-17152,-8448,1792,3072,-512,-5888,-8960,-4352,512,10496,12032,10240,8192,4608,3072,-256,-3072,-1536,-2816,-2816,0,-768,512,-2816,-8704,-11264,-13568,-8192,-1280,4352,6400,2048,-768,-4352,-2304,256,256,-512,-512,2048,4096,6912,3840,1024,-2560,-3072,-768,3072,8448,8960,7936,7424,6656,7168,8704,8704,8704,8448,7936,6912,7936,6656,5632,2304,-1280,-1536,-2048,2560,4864,3328,3328,1280,-768,256,1024,4096,4608,4608,4096,1024,-768,-2560,-3584,-5888,-9216,-8448,-7680,-6656,-4352,-5888,-6656,-6656,-5120,-3072,-2816,768,1280,256,-1024,-4864,-5632,-6144,-6144,-6144,-8192,-6400,-3840,-3328,-3072,-3840,-2816,-3584,-3840,-2048,1024,2560,1536,-256,-2560,-3584,-3072,-2816,-2304,-2560,-3328,-3072,-1536,512,-256,-256,-512,256,1792,4096,8960,9216,9984,9216,8448,7936,6400,6656,5376,3584,3072,2560,3328,2560,2560,3584,3840,6144,4608,6656,8448,7424,7168,3584,2560,512,256,-1024,-1792,-2816,-4352,-3840,-5376,-5120,-5120,-6144,-6400,-5632,-4096,-2304,-1536,-1280,-3328,-4352,-4864,-3328,-3328,-4096,-4096,-5376,-5888,-6912,-7168,-7680,-6912,-6144,-5120,-4864,-3072,256,256,256,768,-1024,-1792,-256,-1024,-256,-512,-2304,-2816,-4096,-6144,-4864,-2816,-1024,256,1536,2560,3328,4352,3840,4096,2816,4352,4096,4352,5376,4352,3072,512,-1024,-1536,1024,1280,1792,2048,3072,5120,6144,5888,4352,4096,4096,5120,5376,3840,2816,1536,0,-768,-2816,-3072,-2816,-2560,-2048,-1024,-768,256,1792,2560,3072,1280,256,256,256,768,1280,-1024,-3328,-4864,-4096,-2560,-2560,-3328,-2816,-2560,-2560,256,1536,1792,2304,768,-768,-1280,-512,0,-512,-1792,-2816,-2816,-2816,-1536,-1536,-2560,-2048,-2048,-768,0,768,1792,2816,2560,2048,1280,768,256,-1024,-1792,-2560,-1536,-2816,-3840,-3072,-1792,-512,0,-512,-256,1792,3328,4096,3840,3584,2048,1024,-512,-1792,-2304,-2560,-1536,-2048,-2304,-1536,-1024,0,256,1024,1024,1792,2560,3328,3072,1792,256,-768,-1024,-768,-512,-1792,-3328,-3840,-3328,-2304,-2304,-3072,-3584,-2816,-2048,-2048,-2048,-1792,-1536,-1792,-2048,-1792,-1792,-1280,0,1280,256,256,1792,3072,4096,4352,4096,3840,4352,6400,7680,7424,6144,4352,2816,2304,2560,2048,0,-2304,-4608,-8448,-13056,-15616,-11776,-8960,-9216,-8448,-9472,-6912,-4608,-1792,-512,0,512,8192,9472,4352,-512,-1024,6144,7424,10240,7424,4096,10752,19200,13824,8960,5632,9728,3840,-4864,0,-4608,-2816,512,2560,-2816,-3840,-12544,-13312,-6912,-11008,-4864,-10496,-20992,-19968,-8960,-9472,-16384,-15360,-7168,-1024,5376,10496,10240,19968,23552,19456,7680,768,-1024,1280,-768,-7168,-7936,-2304,8704,17920,19200,12032,8192,10240,16896,11264,4864,-768,-8960,-10752,-13568,-20224,-19968,-23808,-18944,-12800,-13824,-14592,-9728,-6912,-7680,256,256,-768,8704,13568,6400,8960,6656,5888,5120,11776,22528,25856,17408,5888,10240,7936,-7936,-17152,-13824,-11776,-13824,-15872,-14336,-11520,-16128,4352,7680,-10752,-4352,2816,10496,6144,6656,7936,5120,-3072,2304,-1792,-4864,-2560,-256,5888,5120,13824,9728,7936,2560,2304,2048,1536,-5120,-13824,-8960,1024,-2048,-13312,-12544,-2048,-2304,-15104,-5888,4864,-4608,-512,8192,10752,15360,13568,11776,9984,18944,31488,24576,12800,9984,21760,24320,5632,-12800,-14592,-2304,-14336,-23040,-17408,-23296,-26880,-17408,-13824,-19712,-27904,-15104,-5376,-13056,-9472,-3584,-3840,-9216,11008,30208,27904,15616,15872,27392,32512,25856,2048,-8448,12288,18432,-11264,-17920,768,1280,-1536,-4864,-8960,-12288,-18176,-256,-15360,-16128,-13568,-7168,-10240,-25344,-512,2816,-2048,-16384,-7680,9472,7168,-5888,-17152,-3072,21504,13568,-3584,7936,14592,23296,18688,6144,3072,-5120,-4608,-1280,2560,3584,7424,10496,9216,19968,32256,28672,15104,3840,4608,25856,9984,-15360,-30976,-18432,6144,-17664,-16896,-18944,-19200,-11264,-12800,-13824,-31232,-27392,-18176,-5120,-6656,-16128,-3584,-768,8960,24064,20736,1792,-7936,7936,12800,1792,-2048,-8960,5632,21248,22528,19200,14336,13312,14336,30976,16640,2304,-22272,-20224,7936,256,-5120,-12032,-5120,-11520,-14848,-14080,-10496,-20992,-32256,-20224,-15872,-15360,-22528,-12800,-9216,-9984,-3072,-3072,-2816,-4096,768,14592,11008,-1536,-17920,-14592,13568,16640,5888,-256,8448,-4352,-11520,18176,23296,3840,-7936,6656,19968,8704,8192,21504,18432,-3584,-1536,29696,21504,-2304,-1280,22016,22784,-3072,-2304,13056,30976,14848,7936,22528,13312,2304,5632,13312,3840,-6656,11264,21760,14592,4608,-1536,-6400,-14080,6656,12288,9472,-1280,-1024,11008,2304,768,-8448,-10752,-8960,-15872,-8960,-768,3072,-2816,-19200,-11776,-16384,-16640,-14080,-3328,-768,-15616,-4352,-4352,-3584,-21760,-25344,-8960,-8192,3584,-11008,-27904,-29440,-6656,23040,-10240,-28416,-18688,-2560,-7424,-25600,-4352,-768,-16640,-26368,-7680,5376,-15360,-14336,1280,4864,-13568,-23808,1536,14848,14592,1792,4096,10240,1280,6400,5376,12800,8192,6656,5376,-10752,8448,27648,27648,6656,-9472,11520,23552,17920,4608,9216,18688,14080,16128,8960,6144,4864,11264,22016,13312,9984,15360,29696,26624,5632,16896,22784,17152,4096,-2560,13056,14080,18176,10240,9472,5888,4864,7424,-5376,-2304,-2048,6400,9984,5376,7168,-6656,-7680,-256,-1792,-7424,-18688,-6400,-2560,8704,2560,-21504,-19456,-17920,-3328,-10752,-22016,-16128,-8704,7936,-6400,-18432,-23552,-19712,-8192,-14336,-11008,-12288,-4096,-14336,-29952,-15360,6400,-1280,-30720,-28928,-1024,7424,-8448,-29952,-19456,-3072,-3840,1536,-11776,-17920,-16384,4864,256,-27136,-18944,2560,20480,-3072,-17664,512,7168,5632,-8448,1280,17664,16384,15616,1024,-7680,-5120,18432,25344,-3328,-14080,6400,28416,12032,-13056,-4096,18176,23296,5888,2560,9216,10752,18688,20224,12032,4096,17408,31744,20736,4608,14848,30720,21248,3840,4864,14848,24576,25856,20224,11520,7424,25344,23296,4352,-7680,7168,25088,17920,12800,8192,6912,-2304,-6912,8192,3584,-3840,-3840,1792,12288,3840,-7424,-19712,-17408,-5376,-1536,-4608,-16640,-11008,-1024,-5632,-15104,-21760,-15616,-10240,-10240,-9728,-16384,-8960,2304,-12032,-28928,-28416,-1280,-3072,-26112,-32768,-17152,8704,-11520,-27904,-25600,-9216,0,-5120,-16896,-31744,-23552,-8448,-4096,-14848,-22784,-9728,4096,-6656,-18944,-16896,-2048,-1024,-9984,-7424,2816,10240,2048,-2048,-13312,-16640,256,14848,9216,-14592,-12288,12800,18176,4864,-10752,-3840,8448,11264,12544,256,-4864,4864,21760,23552,10496,8192,10496,11008,5376,3328,12288,10752,10496,9984,14080,16128,8704,16128,17664,17920,15872,10496,8704,6144,11520,17664,19712,18176,11520,8704,7936,6400,8448,8704,20992,23808,23296,15616,5888,9472,13568,20224,8448,-256,4608,18176,12800,-5376,-6144,12288,14592,-4864,-14592,-1792,7680,-4352,-4352,512,768,-10496,-5888,2048,-2304,1024,2560,3328,-8704,-14336,4352,14336,3840,-15360,-9216,9984,-1792,-17152,-22016,-7936,3072,-7168,-12288,-11776,-768,-1536,-15104,-16384,-6912,-2048,-11520,-18944,-10752,512,-5120,-16640,-19200,-14080,-12800,-18432,-23040,-17920,-6656,-2304,-7680,-19712,-15360,0,2560,-8960,-19200,-20736,-13568,-4352,-512,-4864,-11776,-8192,-8704,-18944,-24064,-14848,-2560,-4096,-4864,-5120,-4352,-4608,-12544,-10496,-3584,1280,-7168,-12544,-13568,-16896,-8960,-1536,2048,-2048,-4096,256,-3328,-6144,512,6656,11008,4864,5888,5888,3072,7168,12544,15616,7168,4096,4864,18688,12288,-2048,10240,19712,9216,-10752,-4352,13056,3840,-3584,6400,8192,1024,-2048,13312,17920,9472,9216,14080,19456,13568,9984,12544,19968,20992,13056,12800,16384,9472,-9472,-2560,20736,19712,-1792,2560,25856,31744,8448,-9216,7936,13824,9728,5632,8704,9472,0,-5888,2816,5632,256,-8192,-12800,-256,5120,7424,3328,-256,768,6400,12288,12800,768,-8448,-4096,4608,5120,-1024,4352,6144,-6144,-17152,-6400,-2048,-16128,-20736,-3584,8192,768,-11264,-16640,-8448,2560,6144,-9984,-19456,-10496,1280,-2816,-15360,-9728,-6656,-11264,-11776,-6912,-9984,-15104,-15104,-11008,-7936,1536,-768,-12800,-7424,12288,15616,-15872,-22016,-4864,12544,256,-22784,-16640,-4096,3584,-13568,-32768,-25088,-4096,3328,-15360,-28416,-13824,768,1536,-13568,-19200,-3072,3584,-4096,-11008,-9728,-7168,-8960,-4864,1024,-4096,-8192,-8448,-7680,-6144,-2304,5376,-512,-11008,-6400,8704,13312,1536,-7168,-10240,5120,12032,5120,0,1024,8192,7168,4096,-2816,-8192,-2560,9728,9728,512,-3840,9472,15360,9472,6656,11776,18944,13056,3584,-256,5632,11264,17408,11008,5120,8960,14080,12032,4352,1536,6656,12032,5376,3584,5888,8960,6656,7680,14080,2304,-256,3584,9984,13312,8704,7168,5632,16128,9216,9984,3840,-2816,768,2304,9728,1024,2048,9472,21248,11776,-9984,-18688,-9984,-5120,2560,9728,4096,8192,10496,5888,3328,10240,1536,2304,12544,10496,2048,2560,8704,13312,15360,7168,-512,256,6656,3328,7168,8192,3584,-4864,-1792,-2304,-4352,1024,-2304,3840,-2816,-8960,-6144,-1536,-5120,-4096,768,-8448,-14080,-12544,-10240,-14592,-7168,-11008,-17920,-4352,-10496,-12544,-6912,-4352,-3584,-11008,-21504,-28928,-16640,-8960,-5632,-4608,-9472,-13056,-11520,-2304,-11776,-11520,-8192,-9472,4096,-2816,-12800,-10496,-2304,2816,-2304,-10752,-20480,-19968,-9472,-7936,-3584,-4608,-19712,-26112,-8960,-7680,-13824,-256,-512,-4096,-2048,-4352,-6656,1536,-4096,2304,8448,12032,5376,-2560,512,3328,13824,3840,-512,768,12544,17664,15360,14080,4352,6400,0,256,11776,11776,8192,11520,12544,5632,7424,6912,6656,6656,11008,9984,9216,1024,-5120,-768,11008,12032,4096,3072,-1024,5120,3328,17152,15104,6144,-13568,-11008,-4096,-1792,7168,-3584,-4352,-768,8960,5120,3584,256,12800,16128,9728,8192,4608,6656,16128,22016,11520,2560,-5888,-3584,1280,4352,1536,-9728,-11008,-6656,-1536,-2304,-2816,512,-2816,4352,6400,3072,0,7168,5888,5120,10240,4096,512,-2048,-2304,-4608,1280,4096,1536,-512,3072,7680,7424,-2048,3328,3072,-4096,4864,5888,3584,-512,4352,2560,-1280,-3584,-7936,-6656,-8448,-512,2816,-8192,-13824,-14336,-11776,-2816,4352,-3328,-15872,-16384,-1792,-1536,-9216,-14080,-13056,-16896,-20224,-13824,-21504,-27648,-27904,-12544,-9472,-11008,-11776,-12288,-6656,-2816,2048,256,-1280,-2560,-768,12032,8704,-8960,-11520,-9472,-6144,-14592,-10240,-9216,-10496,-3584,-7424,-10240,-13568,-6400,2048,6144,6912,5632,6144,5888,9984,14336,4096,-3840,-5120,6144,7168,6912,4352,-5120,5888,3328,-512,-2304,4608,10752,11264,15360,12544,9216,6400,4608,8448,10496,6400,5120,5888,8704,8960,5120,-256,512,-2048,-4608,-1280,512,3584,4352,4352,2304,-8704,-7680,1024,1792,1280,3584,3584,-2560,-2560,-4352,-10496,-7424,-2304,-1536,-6144,-10496,-7424,-3584,-1024,-512,-4864,-8704,-11520,-9216,-3072,-1024,3840,1024,-4096,-256,-1280,-2816,1280,7680,6144,1024,-2560,-3584,-6144,-4608,3584,1792,-5888,-7424,-5376,-5632,0,1792,1536,-1536,-1280,2816,512,5376,11008,11776,11264,11776,11776,10240,7936,12800,13824,12032,9728,4608,2560,0,512,4864,5632,768,-5888,-11264,-6400,-1536,-256,6144,4608,-1792,-7424,-4096,1536,1024,3584,1280,-3840,-5632,0,6656,5888,6400,2048,-7680,-13312,-14336,-15616,-10240,-6144,-8448,-13056,-15104,-11520,-9728,-5120,-1536,-768,-768,2304,4352,6144,9728,9728,7424,1792,2048,4096,5376,4864,3072,-1024,-6912,-8960,-9728,-16640,-19200,-11776,-6912,-3328,-3328,-3584,256,768,2304,5376,6400,8192,9728,13056,13824,13056,12800,7680,6400,2560,-1024,-3072,-1792,256,-2048,0,-256,-768,-2560,-2816,2560,4864,4608,3328,3328,7936,10240,7424,8704,9728,6144,2304,2304,2304,0,512,-1280,-5120,-8448,-6912,-3072,-2560,-1536,-3328,-6912,-6656,-7680,-12800,-10752,-768,-1024,-5120,-3584,-5376,-6144,-1536,2816,-512,-6144,-8192,-9984,-10240,-5888,-256,512,-2304,-4864,-6656,-5888,-5888,-4864,-3584,-5632,-5120,-2048,-2048,-6656,-2560,5376,3840,-1280,-1024,512,3328,10240,13312,9472,5376,4608,2304,1536,4608,7424,6400,5888,4096,3328,5888,6400,4608,2048,2304,512,2560,2816,-1536,512,2048,2304,1792,3072,4864,2816,1280,2560,3328,2560,1280,1280,-2560,-6144,-4352,-512,-1280,-5120,-4864,-5376,-4608,-4608,-2048,1280,-512,512,-7936,-14080,-8448,-3072,256,-768,1280,0,-1792,768,3840,3072,-512,-512,-4608,-5120,-768,2048,3840,2560,2048,3840,2048,4096,2304,768,2304,1024,1280,-4864,-5120,-512,512,1280,512,0,-1536,-3584,-5888,-4864,-1792,768,3328,3584,3072,1024,-256,256,768,2304,3584,2816,256,-768,256,1536,2560,256,-7424,-9472,-6656,-3584,-768,256,2304,1280,256,-1536,-2048,-256,1792,3072,2048,1536,-768,-768,256,1792,2560,1792,256,-1280,-1536,-256,512,2304,256,-3328,-2560,-1536,-256,-256,1280,2304,1792,256,-768,-1024,-512,-512,0,-256,-1280,-1536,-1536,-512,256,512,0,768,256,256,0,256,1024,0,-768,-1280,-768,-512,0,256,0,-768,-512,-256,256,768,1024,256,256,512,512,256,0,1024,1280,0,-512,-768,-1280,-768,-1024,-768,-1024,-1024,-768,-256,-512,0,768,1024,1024,512,768,2560,1792,768,1536,-512,-512,0,-1536,-2560,-3584,-4608,-1024,-1280,-3840,-5376,0,2560,-2048,-5888,-2304,-256,768,4352,6144,-2048,-10752,7424,22016,15360,-1280,-5120,-2304,-1024,-7936,-7424,1280,256,256,6912,3840,1792,1280,-4864,3072,3328,7680,3328,-10496,-17664,-15872,-4352,-3584,3072,1792,3072,2048,-1280,5888,-9216,-14592,-4608,4096,9472,5888,-3072,-10496,-8704,13824,21760,11776,4864,2560,0,-5120,-9216,-17664,-11008,-12288,-9472,3328,8960,4352,-2816,-6656,-1024,5632,15104,16128,7168,-5120,-2048,11776,1280,2048,7424,6400,4096,-1792,-10240,-11520,-4608,3328,-5120,-5120,-8960,-8704,4608,-256,3072,-9472,-18944,10240,14592,-1024,4352,1536,-6656,-10240,-8192,-6144,0,7680,7936,2048,3072,7168,4608,-1280,-5120,-5120,8704,9216,4864,512,-1280,11776,10240,7424,-1024,1792,7424,4608,-7680,-7424,-6656,-3072,1280,-5120,-7168,-6656,-1792,-6144,-7936,-9728,-5120,-3584,-256,-512,-4352,-4096,-2304,768,1536,2816,-512,-4096,-1792,-768,2560,9472,12544,11264,6400,5632,7936,7936,9984,9216,3584,3840,-1792,-4096,-5376,-7168,-12544,-15616,-11776,-7424,-11008,-19712,-14592,-11264,-2560,1792,-2304,-5376,-5888,-2816,-3328,3840,8960,1280,14336,20992,7936,-1280,-2048,13568,20992,14848,5376,-1536,2304,8448,7936,5376,6400,6144,2304,3072,256,-2304,-3328,-4352,-4352,-1536,-4096,-10496,-11008,-12800,-12032,-13312,-11520,-8960,-8960,-10752,-12544,-13824,-9728,-4864,-6656,-8192,-6400,-6912,-8704,-6656,-4096,-3328,-5632,-6144,-6144,-5632,-7680,-7424,-4864,-2048,-1024,-2560,1792,-256,-2560,-4096,-4608,-1280,5888,7168,7168,8704,6400,8448,11776,15360,12544,9984,10240,13312,15872,19456,17408,17664,17664,15616,16384,15360,16384,15872,15360,12032,14336,13568,10240,7424,7168,7680,4608,2048,1792,3328,5632,6400,3328,256,-2560,-1024,-1024,-512,-3584,-3072,-1792,-2304,-4096,-8704,-8960,-7680,-1792,-3328,-8448,-10496,-11520,-9216,-7424,-11520,-13568,-13312,-11264,-9472,-14592,-17920,-15872,-10496,-9472,-8448,-11520,-14592,-14336,-13824,-11264,-10752,-9216,-7680,-8704,-7680,-6656,-4864,-4096,-4352,-2560,-4864,-5888,-5632,-2816,1536,4352,5120,-256,0,3840,7424,9984,8704,6656,3328,7424,11008,12032,11008,8960,8960,10240,13312,11008,10496,14080,16384,16896,14592,12800,12800,12032,12544,12288,14848,14336,12544,14592,14336,11008,9216,8192,7936,6912,6400,5632,3840,4096,2048,2304,-512,0,-768,-2816,-2048,-4352,-5120,-6400,-6656,-5632,-5632,-7936,-12032,-13056,-13312,-9728,-8192,-9728,-9984,-11776,-10496,-9984,-11264,-12032,-15104,-15616,-13568,-12032,-11776,-14336,-14080,-15616,-15104,-13824,-14336,-12544,-13056,-11520,-13568,-14336,-13824,-13824,-10240,-8960,-9728,-11008,-11520,-9216,-7424,-6656,-6656,-6656,-5632,-3840,0,-2048,-3584,-2560,768,3840,3840,4864,4352,6912,7680,7424,7680,7424,8704,11520,13312,14848,14592,14336,13312,15104,16640,16896,18688,16640,15104,12032,11520,12800,15360,18176,17920,17152,15104,13056,13312,11776,11264,11776,12800,13824,11520,11520,9216,8192,8192,7680,8960,8448,8704,5632,3584,2048,256,2560,2304,2048,-512,-2816,-1792,-2304,-2560,-5376,-7424,-5888,-5888,-5632,-9216,-11520,-13056,-12544,-11520,-12288,-11264,-14592,-16640,-15616,-13824,-13568,-15360,-16384,-17664,-18176,-16640,-16384,-15360,-16640,-16896,-17152,-17408,-15616,-14592,-12288,-12288,-12800,-13056,-12544,-9984,-8704,-7168,-7424,-8448,-7680,-6912,-5120,-4608,-4096,-3840,-3840,-2816,-2304,-1792,-1536,-512,512,1280,1024,1024,2304,4096,4864,5376,5376,5632,6656,7424,8448,8960,9216,9984,10240,11008,10752,10752,12544,13056,13824,14080,13312,13824,14848,15616,16384,15872,15104,14848,15360,15616,15360,14848,15104,15360,14848,14080,13824,14080,15616,15616,15872,14592,12800,13824,13312,12800,11264,10496,10496,10240,10240,9472,9216,8704,8192,7424,6144,5888,5888,5376,5376,4352,3584,2560,1536,2048,768,-256,-1024,-1536,-1280,-1536,-2048,-3328,-4864,-5120,-5120,-5120,-6144,-7424,-7680,-7424,-6400,-6656,-7936,-9984,-9984,-8960,-9472,-9472,-9728,-9472,-9216,-9728,-9984,-10496,-11008,-9728,-9728,-10240,-11776,-12800,-12800,-12288,-11008,-10496,-11264,-12800,-11776,-10752,-10240,-9984,-11008,-11776,-11008,-10752,-9728,-10752,-11264,-11776,-12032,-11008,-11520,-11520,-12032,-10752,-8960,-8448,-8960,-9728,-9216,-8192,-7936,-7424,-7680,-7168,-5888,-4096,-3328,-3840,-3584,-3328,-2816,-2048,-2816,-2048,-1280,256,1792,1024,1280,1024,2048,3072,3328,4608,4864,5632,5888,5632,6144,5888,6400,7168,7936,7680,6912,7680,8704,9216,9728,8192,7936,8448,10240,11008,9984,9728,8448,10752,11264,11264,10752,10496,11520,12032,11520,10752,9216,9728,10240,11008,10752,9728,10240,10240,11520,11008,10240,9216,8448,8960,8960,8704,7680,6656,6912,6912,6912,5376,3072,2816,3072,5120,4864,3328,2560,1280,2304,2304,1280,0,-1280,-768,512,768,0,-1536,-2048,-2816,-2816,-3328,-3584,-2816,-3584,-2816,-3584,-4096,-4352,-5888,-4864,-4608,-4352,-5120,-6656,-6656,-6400,-6144,-6912,-7424,-7680,-7936,-7680,-7936,-8704,-8704,-8960,-8192,-8960,-8192,-7424,-7936,-7680,-8192,-8704,-8192,-7936,-7936,-8704,-8960,-8704,-7936,-7680,-8960,-9472,-9984,-9728,-8704,-8960,-9216,-9472,-8448,-7168,-7168,-6656,-7424,-8192,-8448,-8448,-7936,-8192,-7936,-7936,-6400,-5632,-6144,-7680,-8448,-7168,-4864,-3840,-3584,-4096,-3072,-1792,-2048,-1792,-2816,-2560,-2304,-256,1280,1280,512,1792,3072,3584,4096,3840,2816,1536,3328,4864,7936,8448,6400,7168,8704,11776,13824,11776,12032,10240,6400,7936,6912,5632,7168,8448,6912,6400,5120,10752,14592,13056,17920,11264,5376,-256,2048,3328,6656,11008,5376,512,-3840,4608,2304,5120,6656,6400,2304,-3072,-3584,-6400,-7168,-5376,-2304,-11776,-4864,0,2560,1024,-3840,-2560,-2560,-6400,-14592,-12032,-15872,-13312,-11008,-15104,-12288,-11520,-9984,-1280,-512,3328,2048,-5376,-11264,-16128,-9984,-3584,1792,0,-5632,-12544,-5632,-1792,1024,1536,-1024,-2048,-10240,-11264,-4352,0,-4352,-512,1280,-2560,512,1280,5120,6656,7936,13824,9216,-2048,-13568,-11008,-5888,6144,7168,-4864,-5120,-6656,6656,9984,9472,7936,-3328,-5120,-512,-3328,-5376,-3072,-8704,-5888,-4864,-4864,-11264,-19456,-15360,-6912,-5888,-8448,-17408,-22528,-17664,-12032,-8192,-9216,-15616,-16896,-4608,-1280,8192,1280,-8192,-8192,-6400,0,-8448,-9728,-8704,-4352,256,1536,-1792,-6912,-1536,3584,8960,9984,3584,-1280,-1536,-1536,3584,7168,1280,5376,8704,12800,18176,12800,6400,5120,5888,15616,18944,14080,9472,10496,18688,22528,21504,23040,20480,15360,24576,16896,10752,8448,9984,10752,5120,3584,-256,-1536,-768,2560,5376,6400,-4352,-2304,3072,14336,13568,6912,-256,-16128,-6144,4352,14336,14848,3072,-2048,-3328,-2304,-768,-512,-512,2560,512,-4864,-7424,-6400,-3328,4352,10240,13312,3072,-2304,-256,-3840,512,5632,6144,3840,5632,-2048,-1536,-3584,-1280,1792,9472,12288,-256,2816,-3072,-256,-2560,-7680,-8704,-13568,-8448,-6912,-6912,-9216,-13568,-17664,-17664,-13824,-14592,-16896,-19712,-20224,-21504,-17408,-11008,-4352,-1024,-3584,-6400,-8704,-6400,-5632,-4608,-768,-2560,-5376,-10496,-14592,-11776,-11776,-6400,-4096,-2816,256,3840,-1536,1024,-512,-4864,4608,6144,3072,-5376,-6144,-768,8704,11264,9984,-1024,-13568,-10752,-2560,4608,768,-8192,-7680,-11776,-7680,-3328,-5632,-6912,-10752,-1024,4096,4608,-7936,-15872,-15360,-3328,2816,-2560,-7168,-16640,-11264,-7424,5376,11008,8704,4352,-4608,-1280,-2304,-1024,3584,5376,4864,-1024,-5632,-5376,-768,3328,8448,12544,11264,9728,3072,5888,13056,11008,16128,17920,20992,19200,14848,14848,13824,19456,25856,25856,18432,12032,8960,12032,12288,10240,4352,-768,-3072,-3328,3584,4864,5632,6400,4096,2304,-512,-7680,-8192,-9216,-9216,-7168,-7680,-7168,-9984,-4864,-4608,-3328,-3840,-6656,-9216,-11520,-11264,-17920,-20480,-22016,-19456,-19968,-17664,-13824,-9984,-3328,3328,7424,9984,9984,6656,6912,7168,10496,12544,10496,6656,5376,2816,4864,4096,7424,7168,4096,3584,-2048,0,-6912,-11776,-8448,-2048,-1024,-512,7680,9216,10240,8448,6656,4096,4608,6144,2048,2560,5120,512,1792,-512,-4352,-2560,-4352,-6400,-7424,-6912,-5632,-1536,-3328,-2304,-3072,-11264,-11520,-7424,-6144,-2048,3328,1280,-2816,4096,5632,3584,1536,4864,8960,7424,3328,1280,4608,4096,6144,4608,5376,0,-1280,2816,256,2560,0,-5632,-8192,-8960,-9216,-7936,-7680,-3584,-2560,-4352,-4096,-1536,4864,6144,7168,10240,11264,6912,4096,3840,4352,3328,256,2048,-1024,-3072,-1280,-2048,-2304,-4608,-5120,-7168,-15104,-12544,-10752,-8448,-5120,-5120,-5888,-768,5120,4864,8448,7680,6656,9472,7424,6912,8704,5632,3840,-256,5888,0,-1536,6400,1024,3072,5120,7680,3328,1792,1280,1280,-512,768,1280,-3328,6400,9472,9216,9472,8960,9728,10496,1280,0,2048,-4352,-2048,-2048,-1536,-1024,-1792,0,1024,-2048,-512,-3328,-6144,-4864,-9984,-6656,-9472,-13312,-11264,-17920,-19712,-11008,-7936,-4864,1280,3072,4352,2816,4608,4608,-1792,-3328,256,-2560,-4608,-2048,256,-2816,-4096,-4096,-3840,-6656,-10496,-6912,-4608,-4864,-2816,-2048,-4352,1536,6656,10240,13312,16640,18432,18688,15360,18688,18176,13312,13824,6912,4096,1536,1792,2560,4608,3328,6656,4096,4608,3840,1280,5632,0,1024,0,-5632,-5632,-512,768,256,512,3072,-1280,-4864,-2816,-768,-2048,-4352,-5120,-7424,-6912,-7424,-7680,-7424,-2048,-1536,-3584,-2816,-2560,-6656,-7168,-5376,-7936,-11264,-13824,-11008,-9728,-7168,1024,256,256,3840,1280,4352,4352,4352,2048,768,2304,-512,768,-2560,-3072,-768,-1280,1792,-3328,-1792,768,-1792,-512,-768,-6144,-1792,-1536,-1280,768,512,4352,-512,2560,2560,3328,1280,4864,0,3328,1280,1280,1280,-1792,5632,-1536,3584,-768,3328,-1280,3072,3328,-1024,1536,-1536,-1024,-1280,1792,-1280,256,-2048,-3072,-1536,-2304,-1280,-256,-2560,-512,-768,768,1280,512,3584,4864,-768,4864,-768,-256,3072,-2048,5632,-3072,256,-1792,-1536,-2816,-256,0,-1792,768,-3840,-1280,-3840,-1024,-1024,-512,-1024,3840,-3328,2048,3072,-1792,7680,-768,3328,1024,-2048,2816,-2048,-1792,1536,-4608,-512,768,-2560,-1280,512,-1280,1536,1280,-512,768,-3072,1536,-1792,-512,-256,-2560,512,-768,-1280,3072,-1280,2560,2304,1792,1536,-2048,2816,-2048,512,-1280,1280,-2304,1280,768,-2560,3840,-1280,256,-1792,-3328,256,-4096,-2304,0,-2816,1536,-1280,1024,1280,4352,3840,5376,5632,1792,2560,256,256,-2304,-1536,-2816,0,-4352,512,-2048,-1792,-1024,-2304,512,-2304,0,-2048,512,-1792,-1024,-2560,-256,-1792,-1280,4352,2304,4352,4608,3840,2560,1280,-256,-2816,-2816,-1280,0,-2304,768,2816,2304,5888,1280,4864,-512,512,1536,-1280,-3072,-2304,-1792,-6656,-768,-6656,-2304,-7936,-3840,1024,-2304,-2560,1280,-768,-4608,1280,-3584,1280,-1536,-768,-3328,0,2816,0,3840,2560,-1024,-4864,-2560,-4096,-6400,-4864,-1536,-1024,-768,4352,7936,6400,8192,10240,8448,4864,4864,4608,2560,768,-512,-768,-3584,-2816,-5632,-6144,-2304,0,768,-1280,1536,4096,2560,-1792,-4096,-4864,0,768,-2048,-512,2048,11520,-512,-2816,1280,-2816,-5120,-6144,1792,-6144,-3328,4864,11520,10752,16128,16640,17152,6912,-5632,-5376,-16896,-22528,-25600,-19200,-23296,-17920,-4352,5120,512,-7680,-3584,3584,5376,5376,4608,5376,8192,-2816,-1792,512,-9472,-10496,-3584,8192,6912,-512,6144,12032,12032,5376,3328,768,2048,3328,-1024,-3840,3072,4096,-3072,-1536,2560,8960,3840,-256,-768,2048,6144,1024,-1024,4352,7168,1792,1536,4864,5888,4864,3840,6144,5888,7936,4352,6912,7424,7168,12288,8192,3072,-2304,512,5120,5120,-768,0,-1536,0,1536,-512,-1536,-7680,-8704,-11008,-8448,-15360,-20480,-18432,-15104,-14848,-17152,-16896,-16128,-13056,-9984,-9472,-12544,-13824,-20224,-17408,-15616,-14592,-9728,-10752,-8448,-13824,-12544,-8704,-8960,-5376,-3328,-1792,-1536,-1536,-4352,-7936,-5120,1024,256,6656,7424,7424,8192,6144,12800,11264,8448,2304,-1024,4352,8448,17152,20736,19968,19456,12800,17408,19968,16640,16384,15360,20736,18944,8960,4096,1792,6400,8448,7680,6144,512,7168,11008,12032,10496,5632,4864,-256,-1536,-512,-1792,4096,7168,7936,4352,-4608,0,768,-2560,-6656,-8704,-7680,-15360,-15616,-12544,-15360,-14080,-12544,-12032,-12800,-17920,-18688,-19456,-14592,-10752,-15872,-18688,-23296,-18688,-15104,-13312,-10752,-16128,-14336,-9472,-8448,-3584,-8448,-7680,-2048,-3840,-6144,-12800,-9216,-6912,-3584,3328,512,1024,3072,5120,7168,1792,3328,5120,4608,5632,1536,7168,12032,17664,17152,13056,14080,11008,12800,15104,16128,20224,18688,11008,14080,14336,12288,9472,10240,15104,14592,15104,12800,12032,13056,14080,13056,11008,8960,4864,3840,5632,6656,10240,8448,6400,6400,2816,2048,-2560,-3584,-2816,-3840,-3328,-6912,-8960,-6912,-5376,-7680,-8192,-7424,-6144,-9984,-12288,-7168,-7936,-8960,-11264,-13056,-13824,-15872,-18944,-15872,-15360,-14080,-11520,-12800,-8448,-7680,-9216,-14080,-10496,-7168,-12032,-15360,-13824,-9472,-9728,-13312,-11520,-9472,-11264,-12032,-14848,-10240,-8704,-9984,-10240,-8192,-3328,-5632,-5632,-4608,-768,2048,512,256,6400,12544,10752,10240,13568,12544,9728,8704,6656,8448,7680,12032,13312,12800,17152,15104,16640,16384,17408,17920,10752,9472,14336,17152,17664,15104,17408,20992,19200,17152,15616,16896,16128,16384,14336,13568,16640,12544,8448,7680,9472,8448,256,-1536,4864,8192,4608,-256,2048,1792,-4352,-7936,-11264,-7680,-6912,-10240,-7424,-4352,-1792,-5120,-6400,-5888,-6400,-8960,-15872,-15360,-11008,-13568,-17408,-17152,-14336,-14336,-20224,-19712,-16896,-16384,-17408,-19456,-18176,-17408,-17408,-18688,-17664,-15360,-14592,-15104,-15104,-13312,-11520,-10240,-9472,-7936,-5632,-6400,-7424,-6144,-4864,-4352,-4864,-3584,-1536,-256,768,1536,3328,3840,3584,3840,4096,4352,4352,5888,6912,7168,7936,9472,11264,11776,12544,13824,14336,15616,17408,18432,18432,17920,18688,18944,18688,18432,18176,18432,18176,16640,16384,17152,16640,15616,16128,15616,15104,13824,13056,13824,13568,13312,12800,13312,12288,11520,12032,12032,10496,9728,8704,8192,7680,7424,7936,7168,6656,5888,5376,3840,4352,3328,2816,1536,0,-512,-1536,-2560,-2560,-4352,-3584,-5632,-5632,-5632,-6144,-5120,-5632,-4608,-6400,-5888,-7936,-7936,-8960,-6912,-8704,-7680,-11776,-8704,-11264,-12800,-9216,-15872,-8960,-14592,-13056,-13056,-16640,-11264,-16640,-14848,-14080,-16384,-14848,-19712,-13056,-15104,-13312,-15872,-13824,-13056,-17664,-12544,-17664,-14336,-17920,-13056,-14592,-16640,-12288,-14336,-13056,-12800,-13824,-11008,-11520,-11008,-11264,-9472,-7680,-6912,-8448,-6144,-2560,-6144,-1280,-5120,-1792,-1280,-1536,-512,-2304,-1280,2816,0,2560,1792,512,9216,-512,8192,5888,5888,10752,9216,8704,9216,12032,7168,12800,11008,11264,9472,13824,8192,14080,13824,10496,15104,11008,15616,13824,18432,13056,17408,14592,15872,18688,14848,18176,15616,15360,14080,15360,13824,15104,14592,12544,12800,13568,12032,11520,14080,12032,12288,14080,11008,11520,12544,6656,9472,8960,3072,7936,4352,4096,5120,1280,2048,1280,1024,0,-1536,-1024,-1792,-2816,-3584,-2816,-1536,-3840,-3584,-6656,-3840,-4352,-5120,-5632,-8192,-4352,-7936,-5888,-8704,-7424,-8448,-13056,-7424,-10240,-8448,-8448,-10752,-10496,-8960,-11520,-10752,-11264,-12288,-9216,-14336,-8960,-9472,-13312,-8448,-8960,-13568,-9984,-11264,-15104,-8960,-12544,-12032,-9984,-15616,-12288,-9984,-12288,-10752,-11520,-11776,-10496,-12288,-9728,-7680,-9472,-7680,-8960,-10496,-7936,-10240,-9728,-7680,-8704,-10240,-3072,-9984,-4608,-3328,-6400,-512,-7936,-1280,-2304,-1536,-2048,256,-1024,1280,-256,-3072,1792,0,256,256,2304,4864,2048,7424,6400,5632,9984,4352,11520,6912,4864,5632,6912,768,1024,2048,2560,7680,4096,2560,7680,10752,9472,11520,7680,6912,1024,7680,6656,-2048,-1280,2048,9984,4352,5632,11264,8192,12032,17664,22528,17152,5632,5376,18944,23552,12544,-11264,-8704,8704,8704,768,-12288,-6400,-5632,-5120,-16128,-9472,-1792,-2048,-5376,5120,18688,7680,-768,512,12544,1792,1536,-2048,-7936,-9216,2560,3840,768,2816,3584,14336,15616,21760,7936,1792,768,3072,-256,-10496,-9216,-5120,-256,-3840,-11264,-20480,-5376,2048,-5888,-2560,3072,7680,4864,-5376,-4352,11264,10496,1280,-14592,-24832,-8960,3072,1280,-17920,-25856,-11264,-9984,-16128,-19456,-14848,-9472,-11520,-7936,3072,-5888,-10496,-9216,-4608,2048,-7424,-12288,-19200,-11008,-5888,-1280,-6400,-13056,-3584,1792,2816,-2304,2560,-5120,-6912,-6656,-8960,-12800,-20992,-17920,-9216,-12544,-17152,-11008,-13312,-4864,-3840,-3840,-1280,3584,11776,9728,3584,15360,25600,11264,1024,-8448,8704,10240,4352,-2048,-14848,-3072,1024,4352,-6912,-9472,-5376,-768,1792,5632,6144,0,4352,0,5376,0,3328,10496,12544,16640,18432,18432,17152,15872,12800,23296,16640,8704,14336,13824,8448,5120,512,-768,-2560,4864,6656,256,-1280,1536,6656,7424,11776,4352,12032,20992,24064,22016,24320,24320,22272,8704,-2816,6656,2560,2816,-6912,-4608,-7168,-4864,-5632,-11520,-8448,-8960,-6656,-8192,-1536,-4352,5632,7424,6656,2304,1792,12032,6656,8192,12032,7424,6400,9216,11008,12288,1536,-1280,-1536,-2816,-7936,-6912,-9984,-18944,-22272,-16384,-7936,-17408,-15360,-13568,-5888,-5376,-3584,-2048,-2048,-1280,4864,14080,9472,15616,16384,14080,7168,-6400,-11776,-8192,-7680,-10240,-15616,-12032,-16384,-16896,-9728,-9728,-15104,-22016,-17920,-16384,-7936,-6144,-5376,-5888,-6400,1024,2048,1280,-1536,-768,-768,0,2816,8448,6400,-5120,-8704,-5632,-6144,-8448,-9216,-14592,-15616,-11776,-14592,-13824,-8448,-12544,-7424,-1536,-2048,-6144,-1024,2048,768,9216,11264,15616,14336,15872,13568,10496,-256,-8704,-11264,-16640,-13568,-18176,-15616,-13056,-8960,-5888,-7424,-10752,-12800,-8960,-5120,-1024,-6144,-3072,2560,3584,6144,11008,12288,11520,8448,5888,4352,4608,8704,7936,8704,4096,512,-3072,-4096,-3072,-2816,-4864,-6144,-5888,-7424,-7680,-5888,1792,6400,6400,4096,3584,4096,3584,7424,12032,16384,14336,10240,9984,6912,8960,8448,8960,1536,-4864,-3072,-1024,2560,1024,5376,4096,1280,1792,4096,4352,4096,6656,7936,5120,3584,3840,3584,4864,2048,512,512,1024,1792,2048,2048,4096,5120,1536,-5120,-4864,-768,-768,512,512,-1024,512,-256,-1280,-2560,-2048,-2304,768,5376,4608,4864,768,3328,3328,5888,6400,4352,4864,1024,-1536,-3072,-256,-3328,-11008,-11520,-11264,-13312,-11776,-12032,-11264,-10496,-11520,-13824,-12032,-8704,-5376,-5632,-6656,-3072,-3072,-1536,-3072,-3072,-2560,0,2560,512,512,-512,-1280,-1280,-3840,-5888,-6656,-6400,-4352,-4352,-3072,-5376,-2560,-2816,-2304,-2304,-4864,-3328,768,7424,4864,6656,4608,7680,9472,9728,16896,18176,18176,11776,8960,7936,10752,8192,0,4608,2816,3584,4352,6400,8960,3840,4096,2560,4608,3584,1792,768,-1280,4352,768,-1280,-1536,-5120,-5120,-5632,1024,-256,768,-768,-1536,5632,-512,-1280,-2048,1792,2048,2816,0,-2560,3328,-1536,-2560,-4352,-5120,-5120,-3584,1536,4864,3840,5632,7424,5376,5632,8448,8448,6912,1536,-3328,-1024,256,-4608,-11776,-9472,-13312,-11264,-9728,-9216,-10240,-13824,-11264,-12800,-8448,-11520,-13568,-16640,-14848,-7936,-11008,-12544,-13056,-12032,-9216,-5376,-1536,-512,768,-768,512,3072,0,-4096,-2048,1792,1024,0,-3328,-2560,-4352,-5376,-5888,-7680,-8448,-7168,1792,4608,5120,7936,14080,19456,14336,15104,19456,22016,17920,12288,16384,15872,16128,4096,3072,4864,3584,4352,3072,4352,1280,5888,0,256,-512,512,-5632,-3840,0,-3840,-2560,-4096,512,-1280,768,2816,3328,4096,2048,2304,3584,2560,-2560,-4864,-1536,-3328,-6144,-1536,-1024,-2048,-1280,-1536,512,-1024,-1536,2304,5120,6400,4352,6144,8960,7168,3840,6912,9984,7680,4352,3072,3840,768,-2816,-6912,-7424,-8192,-9216,-10752,-13056,-11520,-10752,-12288,-13312,-12288,-16128,-14592,-15616,-13568,-12032,-14080,-9728,-13568,-9984,-11008,-8192,-3840,-4608,-2048,-4864,1024,-1792,-256,-2304,-1792,1536,-5632,1536,-1536,3072,512,6144,4352,3840,11264,4608,11264,7936,10496,2304,8704,8448,-2816,1024,256,-5632,-3072,-3072,-10496,-4864,-9472,-5120,-9984,-15360,-7936,-7424,-8704,-11264,-3840,-2816,-2560,1536,-256,5376,7424,10496,9216,10240,12288,11008,13824,9984,6912,11520,13312,5888,11776,12288,13824,14848,13056,14848,13824,16896,10240,7680,17152,11520,1024,7168,5376,-1024,-512,-3328,-4352,-6144,-10496,-8192,-9216,-12288,-11520,-12800,-7680,-10240,-13568,-7936,-5376,-3328,-7424,-5120,-1792,-3584,-2816,-4352,-3840,-1536,-8192,-5888,-4864,-8960,-5376,-8448,3840,2304,-256,6144,5888,7168,10240,8704,-2816,4352,9216,1280,-6400,-3840,-3584,-1792,-5376,-11008,-7168,-7680,-6912,-7168,-8448,-10240,-10496,-4352,-4096,-8960,-3328,-6400,768,4352,-1536,1280,-2048,768,1792,-1024,-4352,-2816,-1792,-2048,1536,3584,2816,4608,7424,3840,7168,10496,9472,3584,512,14080,13824,3072,1536,7936,10752,6144,-1792,3584,6400,3328,1536,-2560,6912,4096,1280,3328,4096,3072,3840,6912,6400,6656,5632,7424,6912,7936,4096,4096,8192,3584,-4352,-5376,-2560,2560,-2304,-5632,-1280,5120,10240,5120,-3328,-1024,11264,2560,-5888,-4608,-2048,-6400,-7936,-768,-1792,-7936,-7424,-2304,-5120,-10240,-10496,-4096,-5888,-11520,-11264,-1792,2816,512,-3072,-4096,-3072,1536,-1536,-7936,-5376,-6656,-5888,-3840,-3072,-3584,-6144,-7936,256,4864,-1024,-6144,-2304,-2560,-768,1536,-1792,-3840,-6656,-5888,-4096,-4864,-5120,-5632,-7168,-512,-1280,-3840,-1280,512,2048,2304,4096,12288,16128,6912,7936,10496,5888,4608,3072,-256,-2048,-1792,-1792,-3328,-4608,2560,8704,14336,14080,3072,6400,9472,5888,5376,-3840,-11776,-7424,-4096,-9728,-5376,0,-512,-3840,-5120,-4096,5632,10496,1280,4608,9984,7936,5632,256,0,-3584,-17152,-11264,2304,1024,-256,10240,6656,3072,512,10496,27904,28160,21248,10240,-1536,-6144,1536,2560,7680,-768,-2816,-8704,-14848,-3584,2304,6400,2048,768,2560,10496,16384,12544,7424,4864,-5120,-21760,-20480,-12800,-13056,-19200,-25600,-26112,-15104,10752,8192,-6656,-7168,0,14336,20224,17152,2304,-9984,-14080,-26368,-28672,-4352,13056,-2304,-20992,-29952,-30208,-8448,19712,21248,6400,7168,5888,13568,22272,15360,15616,23552,12800,-17152,-23808,-11520,-4608,-5120,-256,-2048,0,10752,11776,14592,14336,15872,22016,19200,18176,9984,-13056,-28672,-26368,-13824,4096,3840,-24832,-32768,-32768,-23552,9728,25088,4352,-22272,-25344,-12032,7936,18176,19712,-512,-13056,-22784,-25600,-17920,-10240,-9216,-12032,-15104,-11264,5632,13312,16384,15104,11264,11520,22784,28416,27136,17920,-256,-14080,-8192,3840,19200,17152,-2560,-23808,-25088,9472,26368,32512,28160,11008,4864,14080,28416,29184,18176,8960,-4096,-15360,-16896,-9984,-9728,-3584,5888,-3584,512,-3328,-5376,6144,17152,15616,-3840,-3584,-512,256,5888,-12544,-30976,-29440,-17408,-4864,-10240,-26624,-32768,-29696,-10496,12800,6144,-9216,-16640,-12544,6656,15872,-1536,-15104,-4864,-8448,-19200,-11520,-8704,-7680,1280,3840,-3072,-9472,2816,12800,22528,25344,10752,3584,14848,32000,29440,16384,-6400,-11776,4608,17920,15360,-256,-9472,-6144,9216,23552,23296,9472,4608,13568,23296,20224,13056,-256,-4864,768,-256,-3072,-11264,-14592,-13824,-8960,-9984,-13568,-9984,-5632,1792,-1792,-8960,-1536,2048,3840,7168,5888,-3840,-25856,-27648,-16384,-8192,-10496,-27648,-32768,-30976,-16640,-7168,-2560,-3840,-13312,-4096,4864,7936,-1536,-9984,-7936,-8704,-6656,-2816,-4864,-4352,-5120,-10752,-11776,-256,5632,2048,5632,6144,7168,18688,30464,28416,20224,18688,21248,13312,15104,14592,6144,12544,11264,-1536,-5888,4352,13568,15872,14336,11520,12800,16128,14848,8704,5632,6912,-4096,-9984,-1536,3584,512,-2816,-6656,-8704,-3072,5120,6144,256,3328,5888,8192,12288,5888,-4608,-512,1792,-7168,-12544,-12800,-13312,-15616,-14080,-14848,-18688,-17152,-11776,-15104,-16896,-14848,-16640,-15104,-10496,-10752,-14336,-14336,-15616,-13568,-12288,-8704,-5632,-8704,-11008,-14336,-11776,-6144,-5632,-7168,-5376,-1792,-3072,-2048,256,256,2304,-512,1536,256,-512,-512,-1792,512,512,0,512,2304,3584,5120,7936,10240,12032,13312,12544,14592,15872,13568,11776,11520,10752,10496,9216,7680,8960,9728,10240,12800,13824,15616,15872,17920,21760,22016,20736,19968,20992,17664,16640,15872,14080,13056,10496,10496,11264,10496,10496,12032,13056,13312,16128,13824,14336,15360,14336,14080,9472,7680,5120,5632,3072,3328,0,-1536,-1536,-3328,-512,-1792,-512,-1792,-768,0,256,-256,-3072,-3328,-5376,-5888,-7168,-10240,-12288,-14080,-14848,-16128,-17664,-18176,-17408,-16384,-17664,-15360,-14592,-13312,-13056,-13824,-13824,-15616,-16128,-17920,-18176,-19200,-20992,-22272,-24320,-24576,-23552,-22272,-19456,-19968,-17920,-14592,-12800,-9984,-8960,-8960,-10496,-10752,-10240,-8960,-9728,-13312,-13568,-12288,-10752,-9984,-9984,-10496,-6912,-5120,-2816,256,768,3072,4608,7424,6656,8192,6656,7424,6656,5120,5632,3840,6656,6400,8448,8960,9728,12288,13824,15872,17408,18432,18688,19200,19456,20480,20224,18176,16896,14592,14592,15360,16896,15872,14336,13824,15104,17664,18688,19456,18688,18176,17408,18432,18688,16896,15360,11776,11264,10752,8448,8704,5632,4608,4608,4864,5632,5632,4096,4608,4608,6656,6656,4352,3584,2560,4096,768,1024,-2560,-3072,-3328,-5888,-5632,-8448,-6656,-6144,-3840,-3328,-4352,-5120,-4608,-1280,-1792,-3840,-5888,-7936,-7424,-6656,-8704,-10496,-12800,-12800,-13056,-13056,-13056,-13824,-13568,-12544,-9728,-10240,-11008,-10752,-12032,-11776,-12800,-13824,-14592,-16640,-18176,-18176,-19200,-19456,-19456,-20224,-17920,-16384,-16384,-16128,-13568,-12544,-10752,-9728,-11008,-10752,-12032,-10752,-10752,-11264,-14080,-14848,-12032,-10752,-7936,-8704,-8960,-6144,-4352,-1792,-256,-256,1792,1792,3072,3840,3840,3584,2816,4352,4096,3840,2304,2560,4096,5376,6912,7424,8448,8704,9984,10240,12800,13312,12288,13312,13568,14336,12544,11776,8960,9472,9472,11520,11776,10496,10496,11264,13824,15104,17664,17408,18688,18176,17920,15616,14592,13312,14336,13312,10752,7936,6656,8192,6656,5632,3072,5632,8192,9472,8704,5120,512,1280,1536,7424,12032,10240,5888,-5120,-6144,512,5376,8704,4864,3584,8192,9472,7936,-512,-4096,-6912,-512,4096,7680,11776,8960,-1280,-23808,-27136,-15104,0,6656,-4608,-9984,-11008,-8192,-7168,-13312,-12800,-15360,-8704,-7424,-2816,1792,-2048,-9472,-22528,-18688,-6144,3584,2816,-768,-1280,2560,256,-2816,-1792,512,-3072,-6656,-8960,256,12288,9984,-12288,-32256,-28672,-9984,4864,-2560,-7936,-11776,-6144,-3072,-5888,-6656,-9216,-8448,-8448,-7168,-1536,-2560,-2816,-8448,-14848,-8960,7424,18176,8704,-256,1024,3584,6144,1024,9984,11520,512,1280,-3328,18432,17408,15872,-4864,-17664,-3328,256,8448,-6400,-13056,-16384,-8704,256,-5120,-11520,-9728,-13568,-4608,-5888,-512,6912,5120,10240,-8448,0,11264,14848,19200,8960,11008,3584,256,4864,1536,-768,-11008,-17664,-15616,2304,11776,256,-16640,-13312,-5888,8448,14848,9728,-2816,-12032,1280,-3328,-3584,-14336,-7680,-6144,-9984,-1792,3072,8960,-1280,1024,11008,19712,21760,16128,16640,19456,16896,14848,-768,-11520,-5888,768,-9216,-19200,-17664,-768,12288,6144,6144,-7424,2304,22272,21248,16896,-6912,2816,5888,-512,1792,-9472,2816,-3328,4352,-3328,4864,14592,19712,21248,-9984,6144,17408,31232,26624,7168,-13824,-16384,8192,-6400,-21248,-20480,-3328,9984,256,-1024,5376,7168,4096,-1280,1280,11776,10752,15104,16128,-256,-3840,1280,3840,-5632,-17664,-15360,-9216,5376,10496,9216,5120,3584,7680,13312,24064,12544,1280,-11008,-9728,-9984,-15872,-10496,-18688,-15104,-15104,-4096,-2560,-12288,2304,-4864,-4096,-4864,-6656,-512,-768,6656,-512,-5632,-11264,-5120,-6400,-13312,-17920,-20992,-19968,-13056,2048,8192,768,-8448,256,7424,19200,11264,-6144,-20224,-17152,-6912,-19712,-21760,-18944,-7680,-8192,-11776,-4608,-10240,-4864,-7168,-2816,-2816,-11776,-1536,5376,13312,3584,-7168,-11008,-7680,-4096,-11264,-12800,-14848,-9472,5632,6400,8704,5120,-1024,5120,1792,1792,-1792,-768,-7936,-5632,-5632,-8192,-5632,-4352,7424,7424,6400,-1792,-5376,1024,10496,10240,8960,5632,11520,19456,18944,18176,12032,9472,6656,9216,8960,3328,2048,5632,7424,5376,12032,27392,17408,7168,6144,4096,5632,10240,10240,-256,-2560,-4608,-3328,1536,7168,2816,2560,-2048,-11008,-12544,-6656,3584,-4096,-8192,-6144,4096,9472,4608,-1792,-256,-2304,-11264,-8448,-5888,-7424,-7680,-2816,-4352,-5632,4352,8960,5888,2560,-7168,-12032,2048,6912,-11520,-15616,-9984,-7936,-8960,-5120,-5632,-5376,-4608,-9728,-7424,-3328,-2816,-6912,-6656,-2816,-3328,2304,11776,6656,7680,4864,9472,1024,-4608,-5376,-7936,4352,-1536,-5120,-2304,16896,9984,-5376,-4096,-2816,3840,8192,3584,-9216,-9984,-5888,-15360,-1792,1792,-6144,4096,3840,4096,-9472,3328,12032,7936,-1280,1536,17152,19712,14336,9728,14336,19200,8960,-5376,2816,-6912,2560,-1536,4096,9216,10496,19456,8192,2304,-5632,-1536,4608,14080,0,-14848,-4352,-3840,-13824,-7936,-12800,-5888,-6912,-9472,-11008,-12800,-2304,-12800,-8192,-6144,-1280,-1792,5632,6656,0,1280,768,-5376,-9216,-15616,-15360,-3840,-5632,-4864,-4608,17664,14336,-4608,-10240,-8704,-1792,-5376,-6400,-13568,-10752,-5888,-14080,-5376,-4096,-14592,-9472,-5120,-3840,-10752,-5632,-1280,-1792,-4096,-4864,6400,15360,12800,9728,17920,19200,4352,-6144,-1024,-3840,-8448,-9472,-2304,4096,8192,5120,4608,4864,-512,-256,6400,8960,-3840,-8448,1792,5888,-6144,-3072,-5120,-3840,-768,-8192,-5120,8192,11776,6144,9728,10496,6400,7424,16128,18432,22272,21760,16640,8704,6144,-6400,-12288,-768,1792,-1280,9728,24576,15616,2048,1024,3840,1792,4096,-5632,-5376,3584,2560,-9728,-4608,768,-11264,-14336,-12288,-12800,-16640,-3328,0,0,-2816,-4096,0,6912,3584,-3584,4608,14080,7680,-5376,-4608,-2560,-7936,-16128,-12800,-5888,3072,1792,-3840,-3584,-3584,-8960,-9472,-6144,-13568,-15104,-4608,2816,-4352,-10496,-9728,-3840,-7168,-12288,-9984,256,9472,5120,768,3072,7168,5120,5120,5888,10240,10752,7168,5376,1280,-1280,-4352,-5376,-7936,-10240,-5120,1280,3328,-2048,-5888,-768,768,-2304,-6912,-6656,256,2304,-1792,-4352,-1280,0,-1792,-4608,-5888,-512,6400,8704,5888,4608,8192,11264,11264,8704,7680,10752,12544,10496,6656,7424,9728,8192,2560,-2560,1024,5888,5120,1024,-768,2048,4096,256,-3072,-3328,-768,0,-2304,-3072,-1280,2560,3328,1024,256,3328,8192,8960,8960,9984,11008,13056,13056,12544,11776,12032,11008,8448,6144,4864,4352,2560,256,-2304,-2048,-256,-3328,-6656,-8448,-9472,-11008,-14080,-15872,-15872,-16384,-16384,-15872,-16896,-16128,-15104,-12544,-10752,-9728,-6656,-4096,-512,1280,2048,3840,6912,7680,6912,8704,9984,8704,5120,3328,2816,1536,512,-1792,-3840,-5376,-5632,-5888,-8704,-10752,-10752,-10496,-10496,-9728,-8960,-8960,-8960,-7424,-7168,-8192,-6656,-4608,-3072,-3840,-1792,1792,2304,2304,4608,7168,8960,10240,10752,11264,13056,14336,14080,13312,13568,13568,10752,9472,8704,7680,5120,2304,1024,-512,-2304,-3328,-3584,-4352,-4352,-3328,-1792,-3072,-4096,-2304,256,1024,1536,2816,4096,5888,6912,7680,8448,9984,11008,12032,12032,12032,12544,12032,11520,8960,7168,7680,6912,4608,768,-1280,-2304,-4608,-7936,-11776,-12544,-12288,-13312,-16128,-16128,-15104,-15616,-16128,-15360,-14080,-14080,-12032,-10496,-11264,-11776,-7936,-3584,-1792,-3072,-1280,3840,9728,10496,6144,8448,14080,16128,7680,-1536,-512,2560,-5120,-12544,-11776,-12288,-16128,-18176,-12544,-10752,-14848,-10496,-3584,-1792,-2816,-6144,-8704,-4864,8448,13824,3072,-4608,4608,22784,19200,4096,-3072,3840,12800,1024,-2048,-1280,-6656,-4096,2304,2816,-9984,-14592,-3584,-2560,-10240,-4864,-3072,-6656,-2048,18688,32256,20992,14080,18432,31488,31744,17152,-4352,-7680,11264,5120,-11520,-9216,256,2816,1280,12544,18176,6656,-512,5632,19712,15872,1280,-11776,-11520,9216,9472,-2304,-1280,512,1792,4096,1536,-8448,-23296,-24320,-12800,-6400,-7424,-12800,-11008,-8192,-5888,7936,13312,1024,-11008,-5632,14848,13568,-1792,-17664,-23552,1792,16128,256,-14336,-7936,-512,-1792,-1024,-8960,-17408,-13568,-11776,-14336,-9728,-2560,-3328,-11008,-8704,-3072,-1792,3328,15104,15872,1280,-10752,-2048,13056,15616,2048,-19968,-6400,12288,11264,1792,-4864,-5632,-5632,9216,11264,-1280,-8960,1536,12800,5632,-11264,-12800,2304,11264,8448,1792,-8704,-18432,-14848,-7936,-2816,-20992,-30976,-7424,9472,-2048,-17920,-25088,-17152,-5376,-6656,-17152,-18944,2304,5888,-4608,5120,17664,6400,-4352,-4608,8192,21248,19968,11264,8192,18944,28672,18432,5376,7168,11264,18688,22272,18944,4608,2560,17920,26112,7680,1792,16640,12544,-256,-10240,-3584,2560,-2304,-4352,-8960,-17920,-18432,-11008,-8192,-17664,-21760,-13312,-3328,-3328,-14080,-15104,-11776,-9728,-12800,-18944,-14080,-4096,-1024,-3840,-5376,4608,5376,-7680,-12032,-5888,8448,17920,20480,13312,-2816,-7424,8704,21248,4608,-13056,-1536,17408,17664,4608,-1024,0,13312,19968,11520,1536,-8704,2048,12288,12288,768,-13824,-5632,11264,15104,-10752,-31744,-15616,4864,-1280,-23040,-21760,-8192,-7424,-9472,-12288,-12544,-24064,-27904,-8960,-7424,-23040,-23808,-3584,7680,-3072,-12544,-10240,3328,3584,-11520,-9984,-768,5120,3072,2816,4352,4864,8448,6400,5632,10752,20992,24576,23552,14336,13568,23296,22528,15360,11520,14336,18432,18176,9472,-512,3840,12544,14336,7936,-8448,-2816,6912,6656,-1024,-3072,5632,8192,8448,4608,-6656,-12288,-4352,1280,1280,-2048,2816,3840,7424,-2048,-16640,-14336,-15872,-20480,-26112,-22528,-9984,-1024,-10240,-25088,-26624,-11520,-6656,-20224,-24320,-15360,-768,4352,-6656,-19200,-14592,6912,13312,-13056,-23296,-10752,9472,14336,-2560,-6400,1536,15872,17152,1024,-14592,-5376,18688,21504,8192,256,5888,22272,17920,3584,11520,19456,20224,11264,12032,20224,16896,15616,18432,18688,16384,4864,-3840,4608,8192,4864,2560,6400,14336,11520,-256,-6912,-12288,-8192,-4864,-3584,-1280,-5376,-7168,256,-1536,-16384,-22784,-18176,-4096,-15360,-27904,-17664,-9984,-12544,-19456,-22272,-18944,-20736,-21504,-19456,-21248,-17152,-20480,-16640,-3840,-1536,-7936,-4864,-7424,-13568,-7680,1024,3328,-7424,-4864,7424,8960,4608,3840,256,1792,6912,15104,23040,15104,11776,18944,22528,26112,14336,1792,9984,17408,17920,12032,13568,19968,15616,5120,-256,7168,16896,12288,-1536,0,20736,25600,7936,-7680,0,16896,15616,5120,-3584,-7936,256,10496,6656,-6144,-11264,4608,3328,-7936,-12544,-9216,-6656,-8448,1280,2816,-9984,-13312,-7168,-4864,-11264,-25088,-21760,-12288,-3584,-8192,-24064,-24576,-9216,-9984,-22272,-25344,-22272,-12800,-4608,-5376,-19712,-25600,-11264,3328,-8960,-26624,-27392,-14080,-2560,2560,-7936,-18432,-15616,-2816,0,-17152,-18688,-12288,-8704,-6656,-768,256,-12800,-11520,5888,7680,-6912,-10752,4352,6912,-5376,-5120,9984,14848,-5120,-12800,3328,13824,8192,-2304,3584,15360,17152,20224,24064,20736,6912,5888,25856,22272,2816,-6912,11008,32512,17152,2560,1792,8448,11264,6144,4352,9216,11776,15104,20736,17664,8704,11008,18944,22016,8960,-4096,10240,21504,16384,9984,9984,12544,14336,3328,-2816,2560,7680,13824,11008,2304,512,6912,10240,4608,2304,7424,5888,-1792,-8448,-6400,2304,5120,-512,-14592,-14848,-6656,-3072,-12288,-24320,-11776,3840,1024,-7168,-13824,-14848,-3584,3072,-7936,-27136,-26368,-5376,5376,-4352,-15616,-18176,-13056,-9984,-12800,-25088,-25600,-7936,2560,-7936,-27904,-22784,-15360,-13056,-13312,-16128,-19200,-25344,-18176,-10240,-19200,-28928,-17920,2816,-4096,-23808,-26624,-14848,0,1024,-6400,-12288,-10752,2816,11520,12544,2304,-5888,-768,6912,5376,-10240,-10496,8448,23296,18688,-2304,-16640,-5120,12800,17920,5888,-1536,16896,30208,16640,3840,3328,16640,26112,13056,5632,2560,17408,30720,25344,18432,10496,10752,10752,10240,15104,15616,14336,17920,23808,20224,9728,11776,16896,26624,20992,12800,5632,-5632,10496,22528,22528,4608,-6656,7168,10240,-7424,-22784,-4864,19456,21760,8704,-6912,256,7936,9984,6144,-12544,-8960,-4352,8192,14080,-768,-3072,1536,13568,2816,-16896,-14848,1536,16128,7936,3584,768,-9984,-11008,-6656,1280,-1792,-12800,-18688,-21248,-6656,-3584,-18688,-28672,-15360,7424,-9216,-28416,-32768,-15360,11264,7680,-8448,-20992,-8704,9216,4608,-12544,-18176,-7936,2048,-3840,-12288,-14080,-7936,256,-256,-14848,-27904,-24320,-11520,-7424,-18688,-16384,-2304,-1024,-9984,-14848,-12032,-9216,-7936,-2304,-9472,-18176,-9472,1792,3584,-7936,-14592,-14080,-9216,-8704,-14336,-8704,-3584,1280,-1536,-4864,-4864,-8192,-2048,1536,1792,1280,-7168,-14592,-7168,1024,2048,-6400,-16384,-18944,-8448,-768,-14848,-22272,-14848,-2816,6400,3584,-9984,-17152,-9472,5632,7936,-512,-8448,-7424,2048,5376,6400,256,-10752,-13312,-5888,-256,3072,-3072,-6656,3328,11008,7424,1536,4864,9472,8192,9728,7168,512,4608,6400,6912,5376,7168,768,-8704,2816,4608,-6656,-2304,7680,8960,4608,6656,12288,8960,5376,7680,10496,2816,1536,4352,4864,3072,8960,16128,9472,4352,-2048,-512,10240,16128,18432,12800,9216,18176,16128,10752,9728,6144,10240,7424,512,3584,11776,11520,-11520,-15616,-2560,-5120,-17152,-15872,2304,5888,7168,8192,3840,-256,3328,7680,6400,-512,-6912,-3072,-6144,-9728,-12032,-17920,-10240,-8704,-2816,-3328,-12544,-8704,-4608,-768,-256,-2048,-6400,-1792,-7424,-9728,-8448,-7680,-11008,-7936,4352,-4864,-4096,4352,1280,-7168,-8192,-5632,2048,2560,-9472,-1792,-2560,-11008,-7680,-12544,-13568,-2560,-2048,-9216,7424,18688,13312,4864,256,-6400,-12288,-6144,-7424,-14336,-9472,-2048,6656,8192,256,7168,13824,11264,10752,17152,13056,16896,12800,6912,12800,12288,8448,4352,9216,-3840,-14080,-1792,6656,-8704,-7680,6400,4608,12288,21504,9728,-7168,-2560,-2304,0,-1024,-4864,3840,3840,5376,4864,8704,2560,-1792,3072,1792,12032,20480,6912,-3328,5632,6144,1536,-1792,-5376,-4608,6400,7680,-1280,-3328,2048,7936,-768,-6912,-12032,-12544,-4096,7168,-3072,-12288,-10752,-14848,-13824,-8448,-2816,-6912,2048,8960,3328,-2048,6144,5376,3840,1536,-4864,-7424,-17664,-11520,-11776,-9472,-8192,-6400,3328,7936,768,-5120,6400,3840,2560,-3072,-18944,-13824,-5888,-8192,-10496,-12032,-15616,-11520,-2304,-6656,-19456,-13568,-5376,-256,5888,1024,-2560,-512,256,-1792,-3840,-9728,-16640,-11776,0,8192,-1536,-19712,-13312,-6400,-3584,-1280,-2816,-3840,-4352,2816,512,-3840,-4608,-2560,-3072,-6144,-6656,-1792,256,4864,5632,4096,-2560,-4864,4352,5632,6656,1792,2304,-3328,-3072,-2816,0,-512,-3328,256,-5632,-8704,-8704,-5120,-1024,7936,9216,5376,-1024,-2048,-4608,5888,11776,6912,1536,-11520,-9984,-6912,-3328,-1024,-5376,-17920,-13056,-12032,-15104,-10240,-4864,-6656,-14336,-11520,-9472,-12288,-10240,-2304,-2816,-4096,-9216,-6656,-4864,1536,4608,3584,256,-5376,-4864,-4608,1536,4608,8448,8448,7936,1024,0,4864,9984,4864,7168,11520,4864,8448,7424,7168,-1792,-5120,512,-2048,-4864,-256,-512,7936,13824,7424,5632,2560,6656,9984,14080,14848,12800,768,1280,6400,5632,12544,8704,5376,-1792,1536,-768,256,11008,17152,19456,12032,15616,12544,10496,11776,11520,10752,8192,4352,5120,6656,4608,4096,-3328,-768,3072,1024,2048,5632,10752,10240,6656,1024,1280,768,2304,6656,2560,3584,1536,-1024,-7680,-16640,-14848,-12800,-9984,-9472,-12544,-10752,-13568,-14336,-15616,-13568,-7680,-10496,-15104,-9984,-2048,-1024,-1024,-6912,-9728,-11008,-6144,-4352,-7168,-6656,-6656,-6400,-5120,-6912,-9216,-7424,3328,1792,-2560,-2816,1024,6912,2560,4608,-768,-5888,-11008,-4352,-7168,-5888,-5120,-8192,-7680,-11008,-3328,768,8448,256,256,4864,8192,2816,3840,8192,3840,4352,3840,4608,2816,4096,0,-512,-6144,-6144,-5376,0,3840,8192,10496,8192,5888,1536,512,3328,10496,8192,7168,3584,4864,-2304,-2304,-1024,-4096,1280,-1024,-512,256,6144,6912,-1536,-2560,-1024,-2048,-2304,2304,3840,4096,5888,4864,512,-4608,-2304,-4608,-8192,-12288,-13824,-15104,-12544,-7424,-10240,-10496,-5632,-3840,-9984,-9728,-7680,-5376,256,5120,6144,3840,3072,4608,5120,4608,4352,3328,-1024,-2560,-7680,-10496,-8192,-10240,-6656,-8960,-7168,-5632,-9216,-4608,-1280,768,0,3584,3584,3584,6656,9472,9984,2816,2816,2560,3584,4608,-1024,0,256,-1792,-4096,-5632,-512,3328,7680,9728,8192,8960,11520,13312,14336,14080,14080,12544,6400,5888,4608,3584,3072,256,-3584,-4096,-4096,-4352,-4352,-4096,-1792,-1024,768,3072,6400,4864,1792,-1280,-2560,-1024,256,512,-2304,-5376,-7168,-6144,-1792,-768,-4608,-12544,-16640,-12032,-8192,-5376,-4608,-6400,-5120,-4352,-5376,-3072,-1024,-512,-2304,-3840,-3840,-768,2560,3328,2816,256,-2048,-512,1536,3328,0,-10752,-11520,-7424,-2816,-256,-1280,-2304,-3584,-4352,-3328,1536,3840,1792,0,-768,1536,5632,5632,4608,3328,2560,1280,2304,3072,5376,2816,-3072,-2048,-512,4864,10752,11264,7424,5376,5376,9472,13056,11520,8448,6400,4096,4864,6656,7680,7680,6144,3328,1024,3072,5120,6144,-1792,-5888,-2816,-1280,1024,1536,1024,1024,0,-2560,-3328,-1792,-256,0,-2048,-7680,-7424,-3328,-1536,-3328,-5888,-6912,-6144,-5632,-4096,-5888,-12800,-12032,-8960,-7424,-6144,-4352,-2560,-2560,-5632,-7680,-4608,-2048,-3328,-5120,-4352,-3072,-1280,-1024,-1792,-1280,-512,-768,-256,-1792,0,-4608,-8448,-6400,-7168,-4608,-3072,-2304,-3072,-2560,-256,1280,1792,1280,1280,3072,3840,3584,2816,3840,5120,6656,4864,2560,3840,5632,5120,-2304,-3072,3072,5376,6144,6144,6656,7168,7680,7424,6912,6912,6400,7168,7424,4608,5888,7936,8192,7424,5632,5888,6912,6656,5888,1024,-5888,-3072,0,-256,-1280,-1536,-1280,-1536,-2816,-3584,-1536,0,-1536,-3840,-4864,-3584,-1280,-1792,-3328,-4864,-5632,-5632,-5120,-4864,-4608,-10240,-13312,-9984,-8192,-5120,-2304,-2304,-4864,-5120,-4096,-3072,-2048,-3072,-4096,-4352,-4864,-3840,-3072,-2048,-512,-256,-2048,-2560,-1024,1792,512,-9216,-9728,-5120,-1792,0,-1280,-2304,-3072,-2048,-768,512,2560,2048,2048,1280,1536,4352,7168,7936,5888,3840,2560,4352,5632,7936,3840,-3328,-1024,1536,3584,5120,6656,6656,4608,4096,5120,8704,9984,7680,5376,4352,5376,6144,7424,7936,8448,6656,3584,3072,3072,5120,-768,-5120,-2816,-3840,-3072,-1280,512,0,-2560,-4352,-4096,-1280,256,256,-1536,-3584,-4352,-5632,-5376,-512,0,-4864,-4864,-4352,-4352,-6144,-10240,-9472,-5376,-1536,-256,-1024,0,1024,2304,-3328,-5632,-3072,2560,4352,256,-1024,0,9472,11264,7680,2304,2048,4864,2304,-2816,-5376,-7168,-3584,512,-2816,-8448,-6400,-3840,-6400,-7936,-11776,-8448,-3840,-1792,-1536,-2048,-1024,0,1280,4608,8704,8448,768,-1792,-2048,-1792,4096,7424,3584,2048,4096,1792,512,2048,6144,2560,-768,-1280,-5888,-7680,-3328,-6912,-3328,3840,2816,-2048,-11776,-8960,-4352,4608,6912,4352,-5632,-14848,-9728,-11264,-2560,9984,3328,7168,13568,2816,-4096,-5120,13312,21504,7680,-512,-5632,-2816,8192,12288,8960,10240,11264,6912,8192,8192,5120,5120,3840,3840,4096,3584,-6144,-11008,-11776,-10752,-13056,-14848,-10240,-8192,-8192,-12288,-12032,-9728,-6144,-4608,-4352,-4608,-9728,-11520,-9216,-2048,4608,7168,7680,3328,8448,6912,9984,7936,5632,8192,3584,16896,13312,4608,256,-6656,-1792,6912,2048,-4352,-4608,-256,768,-17920,-7680,14080,12032,-1024,-17664,-13312,-17408,-10752,-3584,-12544,-7424,-16128,-17408,-9216,-2048,-1792,-12800,-9216,-2048,768,6656,5888,768,2048,256,768,11776,5888,11776,15616,8192,6912,512,6144,14336,19968,9216,5376,6144,15616,17152,16384,17152,768,5888,3072,9472,17152,12544,11264,3584,768,-2048,0,13056,13056,6144,-3328,-15872,-19456,-10752,512,2048,-4608,-14848,-19200,-15616,-7168,-11264,-15616,-13568,-6144,-8960,-16128,-16128,-17920,-6400,-2304,-5888,-9472,-3328,1280,-3584,-1280,-1536,-512,0,9984,9984,4352,6400,3328,7936,5632,4864,10240,15104,9472,-4096,-256,12800,13568,11008,10240,3840,1024,768,3840,6912,3072,-2304,-7936,-12032,-7680,-6912,-8960,-4608,-3072,-6912,-9216,-13056,-18944,-13568,-7680,-6144,-2816,-5120,-14848,-19200,-15360,-11520,-4096,2304,-3072,-14080,-13312,-10752,-4608,2816,-256,-5888,-11264,-9472,-768,10752,12032,768,-7680,-5632,7680,19712,19200,8448,4864,11776,16384,15360,14848,12800,11008,15616,16896,9472,4608,8960,16128,17152,12800,6912,4608,9728,11008,8192,3840,1280,-768,-768,2560,1024,-1024,768,256,-2304,-4864,-6912,-7680,-8192,-7936,-8192,-7424,-12288,-18688,-16640,-13312,-12800,-13312,-15360,-18688,-18176,-15104,-14336,-16384,-17920,-15616,-12032,-11520,-13824,-15360,-14592,-12288,-12032,-10240,-9984,-12288,-10496,-6912,-5632,-6656,-7936,-8192,-6144,-4096,-2304,-3328,-3840,-3072,-768,512,256,512,256,768,2560,3584,2816,3584,6400,8192,9216,8448,6144,7168,9728,10752,9728,8704,9984,11520,13824,14848,14848,14080,14080,14080,15360,15872,15104,15104,16640,17664,17152,16640,16384,18432,18432,17920,16128,15104,15872,15616,15872,15104,14848,13824,12288,10752,10496,9728,8448,7936,8960,7680,6144,4864,4608,5120,3840,2048,-256,-1792,-2048,-1536,-3072,-4608,-6400,-7680,-8704,-8704,-9728,-12544,-13568,-13056,-12032,-13056,-14336,-15360,-14592,-15616,-16640,-17920,-18432,-17664,-17408,-15872,-16896,-17664,-18176,-18432,-18432,-18688,-19712,-20224,-18176,-16128,-16384,-16640,-17408,-16128,-14336,-13312,-13568,-15104,-14592,-13312,-11776,-11264,-10496,-9216,-8192,-7680,-7424,-6912,-6912,-5120,-3072,-2304,-2048,-1536,256,1792,2304,2304,2304,3072,5120,6912,7168,6400,5632,6912,8960,10240,10752,9728,9728,10752,12288,13824,14080,13568,13056,14336,15616,15360,14848,15104,16128,16640,16640,15872,16640,16640,16640,16384,15872,14592,14336,16384,17408,16128,14848,14848,15104,15104,14080,12544,10752,10752,11008,11520,11776,9984,9216,8192,7424,6656,6144,5120,3840,3584,2816,2304,2560,1792,768,-768,-1280,-1536,-2048,-2816,-3840,-4608,-5632,-6144,-6912,-7680,-8960,-9472,-10240,-11008,-11008,-11776,-12800,-13824,-14592,-15104,-15872,-16896,-17664,-18432,-19200,-18944,-18432,-18176,-19200,-19200,-19456,-19968,-19968,-19968,-20224,-19968,-18944,-18432,-18688,-18432,-17664,-17152,-16896,-17408,-17152,-16640,-14848,-13568,-12544,-12032,-11776,-9984,-8704,-7424,-6400,-5888,-6144,-5120,-3584,-2304,-1280,-512,256,1024,1792,2816,3328,3840,4352,5120,6912,7680,8448,9216,9728,10240,11008,11520,12544,13568,14080,14080,14848,15616,15872,15872,15872,15616,15616,15872,16640,17152,16640,16128,16128,15872,15616,15360,15104,14592,14336,14080,13568,13056,13312,13568,13312,12288,11008,9984,9472,9472,9216,9216,8960,8704,8192,7424,6400,5632,4864,3840,3328,2816,2304,2048,2048,1280,768,0,-256,-768,-1280,-1792,-2048,-1792,-1280,-1024,-2048,-3584,-4096,-3584,-3584,-4352,-5120,-5632,-5120,-4608,-4864,-5376,-5888,-6144,-6144,-6656,-7424,-7936,-8192,-7168,-5888,-5632,-6656,-8192,-8704,-7680,-7680,-7680,-8192,-8448,-7936,-7168,-6400,-7168,-8448,-9472,-9472,-9216,-8960,-9472,-9472,-8960,-7936,-7936,-8448,-8960,-8448,-8448,-7936,-7680,-7936,-8192,-8192,-7680,-7680,-7680,-8192,-8448,-8704,-8960,-8960,-8448,-7680,-6912,-5632,-5120,-5120,-5120,-4864,-4864,-4608,-4096,-3584,-2816,-2304,-1536,-1280,-1024,-1024,-256,0,512,768,1792,3072,4096,4352,4096,4352,5376,6912,6912,6912,6912,7424,8448,9216,9216,8960,8960,9728,9984,9984,9472,9216,10496,12032,13056,12288,11264,10752,11520,12288,12544,12288,11520,12032,12800,12800,11776,10240,9216,8960,8960,8704,7936,7168,6912,7424,7936,7936,7680,7680,8192,8448,8704,7936,6656,5888,5888,5888,4608,3072,1536,1024,768,0,-1280,-1792,-1792,-1024,-768,-1280,-1792,-1536,-1024,-768,-256,-512,-1792,-2816,-2816,-2560,-2560,-2816,-3584,-4608,-5632,-6400,-7168,-8704,-9472,-9728,-9472,-9216,-8704,-7936,-7680,-7680,-7680,-7936,-7936,-7424,-6144,-5376,-4864,-4352,-4352,-5120,-6144,-6912,-7680,-7936,-8192,-8192,-8448,-7936,-6912,-6656,-6656,-7424,-6912,-7936,-8448,-8448,-7168,-5120,-4608,-3328,-2560,-2304,-3072,-3328,-3840,-3840,-3584,-3584,-4096,-2560,-512,256,0,0,-1536,-4096,-3328,-256,1536,768,-768,-1792,-1024,-1024,-256,1792,-1280,-2048,-1024,2560,7424,7168,17152,10240,768,-1024,5632,3328,1024,5888,-3072,2048,-3584,512,2560,-512,-8960,-17920,-16896,-12544,-6144,-6912,-1280,2304,9472,15616,13568,14336,15104,6400,-768,-6144,-256,1280,512,-7424,-10496,-8960,-5632,2048,1280,1280,-2816,-2048,-2560,768,-3840,-2560,1792,512,-2560,-7680,-2048,1280,-2304,-4352,-768,5888,10496,14848,12544,14080,13824,5120,-256,1536,6400,1792,-4352,-6144,3840,2560,-512,3328,7936,13568,8448,9984,17664,19456,17152,8192,8192,9728,11264,4608,3840,7680,-768,2304,6400,14080,9472,11776,7168,-2560,6912,15360,8960,-1536,6656,5120,-6144,-256,10496,9472,4608,1536,9472,11520,3328,2560,3840,2304,512,3328,-8960,-10496,4608,-3840,-27648,-27904,5120,-4352,-23296,-8704,2304,6912,-3072,-8448,4096,18688,7936,-6400,512,8704,2304,-12544,-9472,-6144,-15872,-17408,-2560,-5120,-17920,-16640,-20992,-19712,-8960,-4352,-8704,-10240,-8448,256,-8448,-10240,1536,1792,-12800,-12800,4352,1280,-3328,-3328,2560,-4864,-4608,-512,2304,-1536,10496,12288,-10752,-17664,13824,22528,-11776,-4608,11776,7424,-14592,-11264,-3328,5376,-2304,-12800,-512,8704,5376,-8192,-2560,5376,1792,-8704,-2560,-1536,-7936,-9728,-10752,-9472,-4864,-5120,-6400,2816,5120,-2816,0,2560,-3584,-1024,3328,-1536,-5120,1280,-1792,-5632,-1536,-5888,-12800,-5632,1536,-4096,-9472,-4864,-768,-5376,7424,15872,5120,-3840,16640,18176,-10752,-2048,13056,2048,-16128,-3328,5120,3072,-256,-512,7936,6144,1280,256,2048,-1536,-1792,-8960,-6912,-2816,-5888,-9216,0,6656,1024,3840,10240,5120,2560,13824,5376,8192,12544,9216,3328,9728,16384,6400,11776,18432,12288,-512,15104,16128,6144,16896,27648,13056,-256,23552,26112,-6400,-7936,17920,5120,-17920,-11008,1280,256,-4864,-7424,-512,7424,2816,1024,7936,11520,8448,-256,-3072,-1536,1792,1280,-8704,-8448,0,-6656,-14336,-5632,-1280,-9472,-11264,1024,-8960,-16640,-1792,-4352,-15616,-8704,-1792,-9472,-9984,-2816,-4864,-5888,1792,768,-5888,-3072,2816,-1024,4352,15360,5376,-7936,5376,16640,-13056,-19712,4608,-512,-21760,-23040,-8448,-9984,-9984,-10752,-8960,3072,0,-5120,-6400,1280,-256,-5888,-7936,-11008,-6656,-6656,-8704,-5888,2560,-2816,-6144,-1024,7424,-768,-2560,9216,3328,256,4352,6656,-512,5120,7936,2816,5888,14848,6400,3584,16640,14080,4864,7168,17152,4864,4352,17152,13568,-2560,4096,17152,-3584,-14080,256,7168,-9728,-11776,-6144,-2048,1536,-3328,-8448,-3328,1792,-4096,-4096,-512,768,-7936,-10240,-2560,0,-8192,-7936,-3840,-2816,-13056,-13824,-1792,-6144,-11008,-9728,-3328,-3328,-2816,-1280,-3328,-6144,-6656,-4352,512,768,-768,-3584,-3840,-1280,768,-768,-2048,-4096,-6656,-7424,-15616,-11520,-10752,-12800,-12032,-9216,-2048,2816,1024,2304,2560,2816,0,4864,11264,9216,11776,7680,13056,14848,16640,16640,14336,13568,15616,9216,4352,9472,12288,6144,768,5632,5632,5120,2816,3584,-3584,-4864,-3072,1536,4864,4352,2816,3072,6400,6400,6656,5120,5632,-3328,-3072,-7936,-13056,-8960,-8448,-9216,-11520,-10240,-7424,-5888,-6656,-10752,-11776,-10240,-12032,-6912,-5888,-5376,-6656,-5120,-3840,-4608,-1280,1280,1792,0,2560,-2816,-1792,4352,4608,3328,2048,4096,5632,4864,2816,1024,512,-2816,-1792,4608,1792,3328,4864,2304,3072,5888,5888,4352,1024,1024,-4352,-11264,-7680,-8192,-9728,-10240,-11008,-11264,-8448,-7680,-7424,-10496,-10752,-9472,-5632,-3328,-3840,-1792,-2048,-1792,-1280,2304,2816,3840,2304,3840,1024,-2048,3072,9728,8704,6400,9472,10496,11776,10496,9984,8704,8704,6912,10240,11520,13568,14336,13056,12032,13568,15104,13056,11776,9472,8704,-768,-512,3328,2816,1792,1280,0,-2048,-1536,-3584,-5376,-6656,-8448,-13824,-11264,-8960,-12032,-13568,-12800,-13568,-16640,-16384,-13312,-13056,-14080,-15360,-18688,-18944,-14592,-8960,-5888,-7424,-8448,-6144,-4608,-4608,-4864,-768,-2048,-3072,256,2048,5376,7168,8448,7424,6912,7936,10240,8192,6912,4096,-3328,-2304,1024,3584,2816,3072,4352,4096,4608,3840,6400,5888,3584,5120,6144,6400,6144,6400,4352,3584,3328,2560,3840,1792,2816,-3584,-10496,-5632,-3328,-2304,-3072,-3584,-4096,-3072,-3328,-3840,-3072,-1024,-2560,-2560,2048,4608,6144,4864,6912,8704,6912,6912,9728,8704,6400,-256,-4096,2304,4352,5120,4352,4352,4864,4352,4608,4096,4864,4096,768,768,512,-768,256,-256,-1280,-4352,-4864,-3072,-3584,-4352,-6912,-11008,-11776,-9728,-7680,-7424,-7168,-8704,-9472,-8192,-8960,-8704,-6656,-6400,-8704,-8192,-5376,-3328,-2048,-3328,-3328,-2304,-768,-256,256,512,-768,-6912,-7424,-3328,-2048,1024,512,1280,5376,5632,6912,7168,4352,6912,5120,8704,10752,12544,13056,8960,7424,7936,10496,5376,256,-1536,-2816,-13056,-16640,-13568,-7936,1024,-2304,-9472,-6656,-2304,-3328,-11264,-10496,-3840,2560,-512,-12032,-14848,-4352,2304,-1536,2560,-256,5888,3072,1280,5888,9984,16640,14848,8448,3584,-3584,-5120,-2560,-11008,-11264,-15616,-10496,256,-768,-2304,-256,4352,6144,6144,11264,10240,6656,4864,-5376,-2048,12032,1024,-9984,2304,9728,14336,17920,19456,18688,16640,10240,3072,8704,4608,3840,256,-9984,-17920,-8704,-4096,-15872,-17408,-19968,-19456,-19456,-14592,-21760,-17664,-16384,-19968,-17152,-11520,-5888,-2560,3584,7680,9216,8704,16896,18944,23552,22016,20224,19200,19200,16384,13312,7424,3072,1024,-1280,-1024,-5632,-8192,-14080,-10752,-7168,-10240,-12032,-8192,-12032,-14080,-16128,-15360,-7424,-6144,-8192,-4864,-1024,7168,12800,13056,16384,9728,17664,15104,13056,11520,7936,13824,11520,11008,12032,12800,13824,7936,-5120,3328,-1792,-8960,-2816,-9472,-12032,-11520,-18176,-17920,-15872,-17920,-23296,-29184,-21504,-18944,-19968,-23040,-24064,-18176,-9984,-1024,6912,10496,14848,17408,21248,24320,24064,27904,26368,17920,15872,14592,7168,13312,7936,-1024,512,7168,7680,2560,4864,2560,2304,-256,4352,10752,11776,5120,4096,6400,5632,7168,1792,3328,6400,5376,-256,-7680,-3072,2816,-15104,-24064,-26624,-28672,-27904,-32512,-30720,-32512,-26112,-21760,-17664,-5120,-1280,-256,768,3584,14592,15872,19712,20480,19968,24064,18944,15872,20736,21504,14848,15360,9728,7168,1536,-8704,-18432,-27904,-30464,-27392,-24832,-23552,-18944,-16384,-8704,-6144,-9216,-8960,-6144,-2816,-4608,768,10240,15360,22528,16896,15616,14080,12032,11008,-1792,-5376,-6144,-12800,-17664,-13312,-8448,-2048,-1792,-5376,-2816,256,1536,8704,13312,12544,14336,19712,27648,25856,27136,25600,22016,20736,18432,13824,10752,9472,-768,-5888,-5632,-2304,-2304,-7680,-10752,-11520,-9216,-11520,-17408,-15104,-10496,-11264,-15104,-16640,-12288,-10752,-7424,-6912,-5632,-1280,3072,3328,1024,-1280,-1536,-3840,-14336,-15872,-4608,-3328,-18688,-27136,-25088,-21504,-19200,-17920,-18432,-16128,-12544,-5632,1280,5632,11008,5632,-5888,-9216,-6656,-1792,-3072,-2560,5632,12544,15616,15104,8704,8704,11520,6912,-5120,-23040,-21248,-1280,6912,-6912,-9728,-5376,5120,11776,15104,19456,24064,25088,20992,30720,31744,29952,19456,15872,14336,19968,14592,5888,2560,1280,3840,512,5120,8192,8704,3584,6656,7936,17408,23296,20480,16896,12800,7936,6656,8704,8704,12800,18432,16896,16896,12544,9216,9216,4608,-3840,-20736,-32768,-30208,-7680,-11008,-27904,-32512,-20224,-8192,-2560,-4352,-3840,1280,0,1536,4608,7168,-6912,-14336,-13056,-11520,-16896,-26112,-31744,-31488,-29696,-32000,-31744,-24576,-17920,-13824,-13312,-19200,-22016,-12800,-8192,-1792,-1792,-16640,-25600,-15104,-768,10240,21248,7168,-2560,-1536,10752,14848,9216,-13312,-29696,-31488,-14080,13568,-3328,-27136,-27392,-7936,-512,9984,9728,7168,14592,19200,25600,31744,23040,8960,17920,22784,18688,10752,4096,768,9216,12800,1536,-3584,5888,19200,22784,20224,14336,4096,9472,25344,32512,26624,7936,-2048,10496,29184,30720,31744,26880,16640,21504,32000,30720,22016,-512,-15872,-16640,-1536,22784,6400,-19712,-20992,-3840,-2816,-768,-5632,-4608,11008,12032,4864,1792,2560,-4352,7168,8192,-5632,-17920,-17920,-11520,-4096,-8960,-27392,-32768,-24576,-6912,-2816,-15360,-28672,-32256,-25856,-10496,-5376,-17152,-30208,-30464,-23296,-8704,-1792,-256,-7936,-7936,-1536,8192,7424,-9984,-20480,-28160,-32256,-28672,-10240,-21760,-29952,-23296,-19712,-29184,-23808,-22272,-13824,5888,4096,-3328,-13312,-4352,2304,22784,16640,2560,-6400,-2048,12032,17920,10752,-6144,-9472,-3072,12288,11008,8448,1024,-512,5376,8960,7424,1280,6144,13824,18688,16384,12288,22016,29696,32512,31488,32512,24320,19456,20224,19200,7424,-1280,8704,4608,4352,12288,11776,-8960,512,4608,14592,23552,22784,15104,11264,20480,18432,25600,16896,16384,11520,13824,11520,8448,6912,3584,3584,0,-512,-4608,-1280,2304,2304,-4352,-6656,-9216,-4096,0,-2560,-6400,-12288,-8704,-5888,512,-512,-4096,-3584,-5632,-4864,-8704,-10496,-13824,-15104,-10496,-11776,-12032,-12032,-13312,-16896,-16896,-14336,-16128,-12032,-12032,-11776,-11264,-8960,-9984,-8960,-7424,-6144,-7168,-6400,-5888,-7424,-6912,-9216,-3328,-8192,-4608,-11264,-12032,-13568,-13312,-11776,-14848,-10240,-15616,-12288,-14592,-12544,-11008,-12544,-8704,-9984,-7936,-5376,-6912,-2304,-3840,-768,-1024,768,1536,768,-256,-2560,-768,-2816,-1536,-3328,-2304,-2048,0,3072,5376,6912,8448,9216,11776,12800,12032,14080,12800,14592,13824,12544,12032,8704,13568,9216,11008,10496,5632,7680,4608,7936,5888,10240,8704,8704,9472,9728,11264,9728,13056,7168,10752,8704,9216,10496,7424,10752,7680,9984,9472,7680,7936,5120,6656,5632,5888,6656,5888,8704,8448,11008,9984,11520,11520,11520,12288,9472,8448,8704,9216,8192,6656,5632,3584,1536,1536,-768,1792,256,-1280,-2304,-3584,-4608,-2560,-4096,-4608,-6400,-8192,-7168,-10496,-8448,-10752,-11008,-9984,-11520,-8704,-10240,-8192,-6400,-5376,-2560,-2816,-2304,-3840,-5376,-6912,-7680,-8704,-7936,-9472,-10240,-10752,-11264,-8448,-7680,-6656,-5376,-4864,-5632,-6400,-3328,-2816,-1536,-768,-3584,-4864,-4608,-3328,-4352,-3584,-5376,-9984,-11264,-11776,-14592,-12544,-13568,-14848,-15616,-15616,-14080,-15872,-14080,-15360,-14592,-11520,-12032,-8192,-7424,-6912,-3328,-3328,-1280,-1792,-2304,-2560,-3328,-1536,-5376,-4352,-4352,-6144,-3584,-5632,-3072,-768,3584,4096,6400,8448,8960,11520,13824,13568,12800,14080,11264,13312,10240,11008,8960,9472,7168,5632,7424,5632,6144,5120,5632,4352,6656,7168,9472,7168,8448,7168,7936,8192,7680,11520,11264,15104,13568,14848,13824,12800,11520,10496,10752,9472,8192,7680,6656,6144,7168,7680,8704,7936,9984,10496,12032,12800,13824,13824,14336,12032,11008,10240,9472,7680,5632,5376,512,2048,256,-768,-1792,-3840,-5632,-7424,-8960,-10240,-7424,-6912,-5888,-8192,-6400,-8704,-7424,-6912,-6144,-1280,768,2048,-2304,-3072,-4352,-4352,-8192,-10240,-9216,-12032,-9984,-6400,-3072,512,-4608,-4864,-9472,-9728,-4608,-4352,-2304,-5888,1024,-5888,-3072,-1024,-4096,5376,-1792,-8192,-18688,-16640,-24320,-26880,-1536,-8960,-8448,-1024,-15104,-21248,-18432,-23040,-14848,-13824,-13056,-5120,-22272,-10240,-16640,-3840,11008,-4096,17920,3328,2048,-2560,-13312,-8704,-21248,-6912,-20224,-7424,3840,3840,20992,2816,9984,3328,-1792,-6144,-7168,-6912,-9216,17152,15616,9728,7936,5120,17408,19712,14592,256,-19712,-3328,-1792,-3072,30464,13056,8960,22528,1280,3072,7424,5120,2048,-2304,-9472,-4352,-768,7168,7680,12288,22784,18176,23040,6400,-5888,-5888,2816,5888,5120,8960,6912,5120,6912,8448,15104,15872,19456,13824,5376,-1536,-7936,-256,-3072,16384,11776,512,11264,9728,21504,17920,3328,-15872,-29184,-6400,-15360,-4096,20480,-2560,-6400,-256,-7680,-1792,-4352,-13824,-9472,-18688,-22016,-19456,-2560,10752,5888,11520,10496,7168,4096,-13312,-12032,-11776,-3840,0,-2048,5632,-2560,-6144,-9472,3328,4096,3328,-4352,-13056,-9216,-16128,-12544,-7680,-4096,1280,-7168,-6400,3840,5376,17408,8192,-3840,-24832,-24576,256,-4864,16640,19456,-5120,3328,4864,-4352,-768,-5888,-8960,-9472,-18688,-13568,-7168,768,2560,1792,10240,1280,0,-4352,-10240,-8704,-3328,7424,8960,8192,-768,-2816,1792,6912,13312,9728,3584,-5376,-8960,-256,-5888,-6144,-6656,-7936,-4608,-11008,-768,4096,6400,7936,-4608,-14336,-32512,-17408,5888,1280,16128,2816,-8192,-8192,-7936,768,0,-5888,-16384,-14080,-27648,-16384,2304,8704,7424,1792,1280,-2304,6144,7680,7936,4096,-1024,-2304,5888,5376,8448,8704,13312,8448,-3840,512,-512,7424,4864,2304,-13056,-14080,-14336,-2048,14848,6400,5376,6656,11264,19968,20480,1792,-11008,-1536,18176,13056,19456,9472,9728,8704,4608,16640,6656,3072,-7424,-4608,-11264,-4096,6912,9472,7936,6912,5888,4608,10752,8704,8704,3328,2816,7168,5376,6144,8960,8704,11264,3328,2048,-256,6656,9216,6656,-2048,-12288,-9728,-11264,-256,1792,-4608,-3584,-1280,2816,5376,-768,-8704,-20480,-11264,1024,-768,-1280,-5376,-4096,-11008,-10496,-1536,-7168,-12288,-16896,-15104,-9728,-6656,-2304,-4352,-4864,-2816,-3584,-1792,-1536,-1536,-4608,-8704,-5120,-2560,-2560,-4352,-7168,-5888,-1536,1536,256,-1792,1536,2304,3072,2304,-512,256,-256,-1280,-1280,2304,-768,-4096,-3328,-1792,1792,2304,2304,5120,6144,8960,9984,10752,12544,5888,5888,9984,8704,2304,512,4096,3840,4352,2816,-2560,1792,6400,4096,256,256,3328,3328,4864,2560,2560,-256,1536,2304,0,3584,1792,-256,1792,4352,3584,1280,1536,2304,1024,768,-1024,-256,-1280,-3328,-5120,-6656,-4352,-3840,-4608,-3840,-3328,-3072,-4864,-5376,-3840,-4096,-5376,-4864,-3584,-6656,-6656,-7936,-9216,-7424,-7680,-8448,-7936,-5120,-3840,-4864,-5888,-6144,-4352,-1280,-2304,-1792,-1536,-1792,-2816,-3840,-512,1024,-1536,-768,512,-1280,768,256,-256,768,1536,0,-1280,1536,1792,256,-1024,-768,1280,2304,1280,1280,1280,1280,2816,3072,3328,6144,5888,7424,8960,8448,9216,7680,7424,8448,6656,5376,4608,3584,2560,512,-1024,-1792,-256,-1024,-2048,-1536,-3072,-1792,-1024,0,2816,4096,4608,5376,5888,5888,6400,5120,4352,3840,2304,1024,-1024,-2048,-3328,-6400,-7168,-8448,-7168,-6656,-5888,-6912,-7936,-5376,-4352,-4608,-1792,-256,-256,768,0,1024,0,-1792,-2304,-3840,-6912,-7936,-7680,-7424,-9984,-10496,-8960,-7680,-6144,-6912,-5376,-4096,-4096,-2048,-1024,-2304,768,2816,2304,2048,1792,1792,-768,-1536,-768,-1280,-3584,-4352,-3072,-2304,-3072,-3328,-3328,-1792,-512,1024,2304,1536,2560,4352,6144,7424,8960,9728,10752,10240,9728,10752,9984,7680,7936,7168,5376,5120,5120,4608,2816,3072,2048,3328,3840,3328,4096,3584,3584,3584,2048,2560,3584,5120,6144,4608,4096,4352,4096,3072,1280,-256,-1280,-2816,-2816,-4864,-5888,-7168,-7936,-7168,-8704,-8448,-8192,-8704,-7680,-6912,-6656,-5376,-3840,-2304,-768,-1280,-1280,-1024,-768,-1024,-2304,-3584,-4608,-5120,-4864,-5632,-6144,-6144,-6144,-6144,-5120,-3840,-3584,-3584,-2560,-1792,-512,1024,1280,3072,3584,2560,2048,2048,2304,2048,768,-512,-1536,-2048,-2048,-2304,-2816,-3328,-3328,-2816,-1792,-512,0,0,1024,2560,3584,4096,5376,5632,5632,4608,2816,2304,1792,512,-1024,-3072,-4352,-4608,-5120,-4352,-3584,-3072,-2816,-1280,-256,768,1280,1536,3328,4352,4352,4352,3840,3072,2048,0,-1024,-1280,-2048,-2304,-3072,-4096,-4096,-3328,-1792,-1280,-512,-256,512,1024,768,1024,1280,1536,1280,1536,1792,1792,1024,0,-768,0,768,-256,-1536,-1280,-768,-2304,-4096,-4096,-2304,-2048,-3328,-2560,-1536,-512,-1280,-1792,-1536,-1280,768,2560,2048,2816,1536,-256,-1792,-4864,-3840,-1280,-1792,-512,-512,-1536,-768,-2304,-1792,-3840,-2048,3840,5632,6656,7680,6400,5376,1536,3584,2816,-1536,-1536,1024,1280,-4864,-6400,-5888,-3840,-1280,4608,2560,-256,1792,1280,0,-7936,-16896,-11520,5888,17152,11520,768,-6144,-8704,-5888,-8704,-9984,-1536,-512,7168,11776,1280,7680,-6656,-12032,5376,6912,6400,4352,-2560,-3584,-3840,-10496,-2816,5376,9472,12032,3328,4864,-8448,-16384,512,2048,2048,6656,2304,-9728,-8192,-10240,1792,16640,8448,-1024,256,6656,-4352,-19712,-10496,4352,-5376,-14336,512,1792,-7424,-12544,-20992,-8704,-3328,12288,18688,-1792,-7936,11776,19712,2048,-3328,11520,13312,5376,-4352,2048,5632,-14336,9728,3584,-3328,8704,8704,-512,-8960,4864,-7936,-19968,-9472,-5376,-2048,0,-15616,-18944,-5376,1280,-6400,-512,6400,9216,1792,-8192,10752,23552,5120,-17920,-8704,23040,19456,3840,-1024,8704,27136,7424,-3072,5120,1792,4096,-3840,-9728,-12544,-14336,4864,-768,-10752,-5120,-1280,-16128,-18176,-1024,-5632,-5120,-5120,-4352,256,1024,-3072,-6144,12032,17664,7168,-3840,-2816,5120,-256,4352,10240,18688,3840,-6656,6144,11264,9984,5376,256,-7168,-1024,0,-11520,-6656,1792,-2560,-11776,-17152,-3072,-12288,-19200,-10752,-9984,-4864,-6400,-4096,-6656,-512,10752,3584,6656,5376,4608,18432,18176,10496,1280,12032,18688,15360,15872,12288,3840,768,5376,3584,7168,11008,5888,-768,-1280,-3072,-4864,-6144,512,2560,-7936,-13824,-4096,-2816,-12800,-15360,-18432,-18688,-17920,-15104,-18176,-22272,-18176,-12032,-10752,-8192,-6912,-12288,-13056,-6912,3328,3840,-9472,-9984,-3328,-3072,4352,5120,-512,-5376,-1280,4608,6144,9472,6656,-3328,-5632,-512,-2048,-4352,-6144,-5376,512,-3584,-6912,0,-4864,-5888,-2816,-2304,-9984,-16128,-7936,-8960,-3328,11520,11264,-512,2304,16640,22272,23040,22016,21504,14592,17664,32256,25088,23040,26112,22784,19712,20480,27904,23552,13056,15104,16384,8704,9984,6912,3072,4608,5376,5120,-2560,-11008,-6656,-6912,-6400,-768,-5888,-15872,-25344,-18688,-12032,-17408,-18688,-13056,-19456,-21248,-12288,-4608,-2304,-4096,-4096,-5632,-5632,4096,3584,-9728,-1792,3328,2560,-5888,-4096,512,-7680,-5888,-2304,-6400,-17920,-13312,-9984,-8192,-8448,-12800,-19456,-26112,-18432,-12032,-18432,-15360,-11776,-17408,-19712,-16128,-11264,-17408,-24320,-20992,-5632,-6144,-9216,-5632,1536,9728,12032,14080,8704,9728,15616,15872,12800,22784,26880,15872,14080,27392,32256,21248,15616,20480,16896,13056,24576,22784,14080,13312,12288,6400,6656,16128,8448,-5120,6144,18176,4608,-7424,-2304,-1280,-5376,-3584,-2048,256,-4864,-2560,4352,7168,16640,17152,11008,6656,15872,20736,9216,2560,13312,16896,6400,7424,15616,10752,-768,0,5632,768,-7680,-4608,-11008,-13824,-4352,-6144,-19712,-22016,-13824,-16640,-26880,-22528,-13568,-24576,-30720,-22016,-19200,-27648,-29696,-27136,-25856,-26880,-23040,-18432,-20992,-15104,-9472,-4608,-2560,0,256,-4096,-1280,7680,6656,-2816,-768,6400,8960,3328,5632,4864,-4352,-6912,-768,-1280,-3328,-2560,-5120,-8192,-6144,3328,-5120,-10496,-4864,2048,-1792,-5632,-2816,-6400,-9984,-1280,5120,-256,0,3072,7680,9472,16896,19712,16896,15104,24832,28416,25344,28928,25344,22016,20480,28416,31488,24832,21760,24320,22016,20736,18176,15104,9216,8960,14080,10752,5120,2816,4352,-768,1280,4352,1792,-3328,-4864,-4352,-6400,-7424,-7680,-7936,-9472,-6656,-4608,-4352,-4352,-4352,-5888,-4608,-2560,-3328,-4352,-4864,-4096,-6656,-7680,-7424,-9472,-12032,-10496,-8960,-10496,-11264,-13568,-13056,-14080,-14080,-14848,-14592,-15872,-17408,-17408,-17152,-13568,-15872,-18944,-17408,-13312,-12800,-15360,-15872,-14848,-16384,-16640,-14592,-13824,-14336,-13824,-14080,-12800,-10496,-10752,-11264,-11520,-8960,-7424,-7680,-6912,-4352,-4352,-2560,-2048,-2560,-1280,256,-256,-768,1280,1792,1536,2048,3328,4608,5888,3328,5632,7168,7424,8704,9728,11776,12800,13056,12800,15872,15872,15616,14592,15616,16896,16128,15104,15872,17152,16640,15872,15104,15360,15104,14848,15616,15872,14848,15616,14336,13568,13824,14080,12544,11008,13056,12800,12032,11520,11776,11264,11264,9728,7680,7424,7680,7936,7680,8704,8960,8192,6912,8448,8448,5888,4608,3584,4096,3840,2816,2304,1536,1280,256,-1024,-1536,-2304,-3072,-4608,-4608,-4352,-5632,-6656,-6656,-6400,-6912,-7936,-8704,-9728,-9472,-9728,-10752,-11008,-10240,-10240,-13056,-13056,-11776,-11520,-13312,-13056,-12288,-12288,-11776,-12800,-12288,-12288,-13056,-13312,-12544,-12032,-11008,-11008,-10496,-9472,-9216,-9472,-9728,-8192,-7680,-7424,-7936,-7424,-7424,-8192,-7680,-7936,-8192,-7936,-8448,-8448,-8448,-7936,-7680,-9472,-8704,-7168,-9216,-9216,-7424,-7168,-6656,-6144,-5376,-4352,-4352,-3840,-3584,-2816,-1280,-768,-1536,-512,768,1024,2048,2816,3072,3072,3584,5376,6656,6912,7680,7936,8448,9216,10240,11008,11264,10752,11008,10752,11008,11520,11776,12288,11008,9728,10752,9728,9216,9472,8448,8960,8704,9728,9728,10240,9728,10752,9984,9984,8960,7424,7936,7168,7936,7168,7680,7168,7936,8704,9216,9728,8960,8704,8192,8448,7680,7168,7168,8448,7680,7680,7168,6400,6656,6144,6656,4608,3072,2048,2560,1536,2048,512,-1024,-768,-2048,-1280,-2560,-2816,-3328,-4608,-4608,-5888,-6656,-6912,-6144,-5120,-5632,-6656,-6912,-7168,-6144,-6144,-7680,-8704,-9472,-8448,-8704,-7168,-7680,-7168,-6400,-6400,-6656,-6400,-6400,-7424,-6144,-7168,-7424,-8704,-6912,-5120,-5376,-6912,-6656,-6400,-5888,-5888,-6400,-5632,-6144,-5376,-4608,-2304,-2816,-1792,-4352,-5888,-5376,-7936,-12032,-14848,-15360,-18176,-15872,-12800,-11008,-12032,-11264,-4608,-2304,-256,-3584,-1024,4608,-2560,-2304,-2560,-4096,-1536,-2048,-1792,-7168,-7680,-3840,-3584,-6144,0,4608,-256,11776,16640,23040,24832,23552,21760,17152,13056,-1792,-3584,-16640,-26624,-27136,-16640,-15872,-17152,-6912,-4352,-768,2304,10752,6656,7424,12032,8704,4096,6400,4096,3840,6144,-512,-3584,-2560,-3584,-1024,8704,8192,11008,19456,30208,30464,30464,32512,28416,25600,18944,5120,-7168,-8960,-17408,-19712,-20736,-13312,-768,1280,768,9216,14080,18176,17664,7936,15360,6912,-256,-768,1280,512,-768,4608,-1280,-3840,1792,3072,0,11008,15872,17408,21760,25344,23552,24320,30464,27904,15616,11520,3840,-11520,-8704,-22528,-25088,-11264,-3840,-4096,-768,-2816,-4864,256,0,5376,-6912,-1792,-6144,-13056,-6656,-12800,-7424,-3584,-1536,-5376,-4096,-6656,-7168,-5632,-5632,-2048,-512,5376,5632,8704,7424,3328,1280,-3840,-13056,-22528,-21248,-22272,-26624,-27392,-26624,-18432,-9728,-10496,-9984,-10240,-7424,-4608,-11776,-18176,-21504,-23552,-23552,-23040,-18688,-18176,-16896,-11776,-10496,-5632,-7424,-5632,7936,7168,-2560,2048,10240,14592,13824,12800,12544,5120,-14848,-18176,-21248,-18688,-8960,-17664,-9728,-9728,-4096,768,5632,2304,7680,21504,20736,14592,0,-768,-12544,-3584,256,-1792,3584,3584,5120,5632,11520,12800,14592,19200,23808,24064,25856,19712,25856,29696,22784,14080,14080,11520,-3328,-11520,-11776,4608,2304,6656,8192,15360,17152,13312,21504,19456,29440,23808,21760,6656,-3072,-6144,-12800,-8704,-6912,2560,-1280,-2304,-1536,4096,9984,12032,11520,8192,5888,6400,8448,4352,2304,1280,2304,-9728,-16128,-24064,-19712,-11520,-10240,1536,-4096,-3840,-8192,-3584,2816,5376,8192,9216,2816,-11776,-10496,-14336,-12800,-14080,-9472,-3584,-3072,-8448,-17920,-10752,2048,7936,4608,-1792,-4352,-6400,-7168,-8960,-4096,3584,-512,-5376,-16896,-22272,-17920,-9728,3840,-5120,-9728,-3072,-2048,-1280,-9728,768,13824,19456,5888,-7424,-7168,-7424,-4864,-12032,-9728,-4864,2560,-4352,-14848,-13056,-5632,6400,12544,10240,7168,-1280,-1280,2304,2560,8192,7168,0,-11008,-22016,-26368,-16896,-12032,-6656,-7168,-9216,-4608,-4352,-512,6656,15616,20224,19456,12800,6144,256,-7168,-9216,-11520,-13824,-5632,-9984,-19712,-24064,-24832,-11008,4864,12800,13312,5632,-768,1792,4864,8448,13056,7680,-3328,-10496,-20736,-17920,-11264,-5888,1024,-2304,-2560,1536,8960,15616,17664,15872,17664,23552,27904,27136,17664,1536,-7424,-8192,-2816,8960,7680,-6400,-18944,-19200,-6400,9472,16384,14592,10752,6144,6912,10752,11008,11264,8960,4608,-256,-6656,-10496,-10240,-7424,-3840,512,-768,-512,2816,4352,6400,6656,8960,14592,16640,13824,4608,-13056,-23552,-20224,-11008,-768,-6656,-27392,-32768,-32768,-19456,256,4096,-5120,-12544,-10240,1536,10752,6656,1280,-4608,-7424,-4608,-7936,-9728,-7680,-3328,-2048,-1536,-4864,-3840,7168,12288,13824,8448,8192,15104,22016,14336,-5632,-19968,-24064,-10496,3584,0,-17152,-30976,-28416,-8448,9984,6912,-4096,-8960,-1280,12032,18432,14080,6656,1536,4864,7168,5376,7424,8192,8704,9216,8192,9728,13568,18176,19968,19712,18944,13824,8960,5376,6656,5632,1792,-4864,-11008,-14336,-9984,-3840,-512,-4864,-10240,-6400,-2304,3328,3584,1792,512,1024,512,2560,-512,-1792,-1024,-1792,-2304,-4352,0,4608,6400,3328,-1536,-3328,-1280,-3328,-4096,-6656,-9216,-6912,-9472,-13568,-15872,-17152,-12800,-7424,-8960,-12032,-14336,-11008,-7168,-4864,-3072,-3840,-1792,-512,-256,768,768,2816,6400,5376,5632,5888,7936,10240,7936,4352,6912,7424,2816,1280,-3840,-4864,-3072,-3328,-7424,-11008,-13312,-12032,-6400,-6400,-7936,-11520,-10752,-3584,1536,3072,2560,768,4096,7680,10752,13824,11776,12544,11264,11008,10240,12800,14592,12032,12288,11520,11520,6144,4864,3840,3584,3328,3072,-512,-6144,-5120,-6656,-4864,-3072,-5632,-8704,-10240,-10240,-5888,-5632,-6400,-5120,-3328,-768,-1536,-1280,-1280,256,512,2816,3072,512,1536,1024,512,0,256,1024,2048,1280,-3840,-7680,-8704,-6400,-5376,-6144,-8192,-10496,-11776,-10752,-10752,-10496,-8448,-7168,-6400,-6656,-5376,-3584,-768,1536,2304,3840,5888,6400,5888,6144,5376,4864,4096,3072,3840,2304,-768,-1024,-1280,-3328,-4352,-3584,-5376,-6656,-4608,-4864,-6656,-5888,-4608,-5120,-5632,-3840,-3072,-2304,768,2304,4608,7424,10496,11776,12544,14848,15872,15360,13568,12800,11264,8448,7168,6912,3840,768,256,-1280,-5120,-5632,-6912,-9472,-10240,-9472,-9728,-12288,-12032,-11008,-12032,-10752,-8448,-7680,-5376,-512,2048,4864,7424,9984,13056,15616,16896,15872,15872,15872,14592,10752,8960,7168,2560,-256,-1536,-4352,-8192,-8448,-9472,-12800,-13568,-12544,-13056,-14336,-13312,-13824,-14592,-12800,-10240,-9728,-7424,-2816,-512,2048,5376,8704,10496,12544,14336,12032,10752,13056,11008,6656,7680,8192,4352,1280,3328,-256,-5632,-5120,-5120,-9216,-11264,-9728,-10496,-11008,-9216,-9728,-10240,-9472,-8192,-6656,-5376,-3072,-1024,1792,4608,6912,9216,8960,10240,10752,9472,9216,8704,6912,3072,4096,3840,1536,-256,-1024,-256,-3072,-2304,-1024,-3072,-6656,-6144,-4096,-4352,-7168,-7168,-6400,-9216,-4352,0,-4352,-5376,1024,4352,1280,6912,8704,6656,9216,8192,6912,5120,6144,6144,-3840,-2560,1280,-4352,-1792,-5632,-6144,-5120,-2304,-2816,-3840,-3328,-4864,2048,-768,0,-1024,-2560,1280,0,4096,2816,512,2816,3328,3072,8192,7680,3072,-1792,-2816,2816,-256,3072,-8704,-16896,-6656,-1792,-512,-7168,-11520,-6400,2560,8704,1024,-8192,-6400,1024,3072,6912,3584,-5888,-768,0,2048,2304,10752,12800,4864,4864,9472,22016,16640,-3072,3072,13824,10752,4096,-15360,-27392,-26880,-20224,-15616,-10240,-12544,-1536,9472,-4864,-512,4608,-768,-5888,-4352,-1536,2816,4096,-6400,-12544,-14592,-8192,10752,23808,17408,6912,12288,27136,32512,17664,-1024,4096,1536,7680,5632,-22016,-29184,-12800,4608,-1280,-10240,-13312,-3584,-6656,-4864,-5632,-13312,-18432,-19968,-9472,-6656,-9216,-15104,-6656,-1536,3072,6656,22016,24320,17408,22016,29696,31232,8704,-22784,-17152,10496,6144,4352,-5632,-1536,12032,17408,14848,9984,6656,-512,-4864,-7680,-4608,-14080,-26112,-29696,-17408,-7680,-7936,-6144,768,3328,-512,-3584,8192,8192,-2048,256,1280,7680,-6400,-32768,-26112,-2816,6144,512,-3840,-4096,-4864,2560,-7680,-11520,-5376,-8192,-6144,-6400,512,-1792,-17152,-13568,-11520,-5376,3584,7424,11008,17408,14592,2304,5120,12032,3584,2816,20736,24576,22016,-12544,-13824,10752,13824,27648,23808,9216,9472,17152,8192,768,11776,10752,1024,9984,19712,20480,-2816,-11264,-7424,-7680,9216,19712,14592,16896,15104,4608,-2816,-6144,-2048,-6400,768,15360,22016,-15360,-32768,-8192,-1024,-3840,6400,768,-15360,-6656,-5120,-16896,-19200,-11264,-11776,-10752,-1792,9216,-11520,-32000,-27904,-21504,-14848,-1024,7168,-768,-4608,-8448,-9984,-17920,-25344,-16384,-768,512,17152,1536,-32768,-19200,-1280,512,6656,11520,0,-6400,3328,-512,-4608,-6144,-3584,10496,10240,16896,14848,-256,-5632,-6144,4864,17408,25600,26368,12288,4608,12288,11008,5888,512,14592,22784,25088,21504,-9472,-10496,2304,9216,20480,18176,1024,1792,7424,6400,3328,2048,-512,-3328,7168,11264,10496,2048,-6400,-15872,-11008,9216,10496,-256,5120,-256,-4864,1024,-2048,-7680,-11776,0,8448,4864,-16384,-22016,-13312,-14336,0,7936,-12800,-18432,-6912,-9216,-8192,-2816,-14848,-25600,-15104,-512,1536,-6656,-8960,-16384,-22016,-15104,2048,-768,-13056,-6656,-5888,-4608,768,-6912,-14848,-12032,1280,8704,-17152,-28416,-6400,-3072,-8192,10752,8192,-16384,-6144,8448,1792,1536,2816,-4864,-10752,-512,14336,10752,4608,5632,-2560,-6400,11776,22528,9984,7168,19968,19968,15360,11776,13056,13824,9216,21760,14336,-8192,3840,21248,15360,14336,19200,3072,-3328,18432,25344,7936,1024,5888,7680,768,6144,17664,8448,1024,768,2304,4608,7168,6656,-2304,512,8960,3584,-3328,512,5632,-4096,-4352,0,-17408,-21760,-5120,6144,1536,-6400,-11776,-16640,-16896,-6912,-5376,-14592,-19968,-13824,-11776,-21760,-9728,-4096,-15104,-17664,-12544,-8960,-12032,-10752,-3840,-12544,-13568,-3584,-4096,-11008,-11776,-2048,-4864,-14848,-20224,-14080,-9728,0,8960,0,-18944,-17664,-4864,-9216,-6144,-1792,-6144,-13312,-6656,-5120,-10496,-8960,-7936,-11520,-13568,0,5632,-2048,-256,5888,2816,-512,2048,-768,-3584,6144,6400,4352,3584,5120,8704,6400,15104,14592,4864,256,7424,8704,3072,6912,14336,10240,4352,6912,13056,15616,7680,7168,-512,1024,13056,22784,16896,13312,18176,16384,12800,14080,13568,1792,8704,17920,21248,18688,19712,14080,12032,10240,15872,24832,20736,20224,18432,15872,8448,9984,5888,3072,5632,17408,14848,8704,5632,-5888,-4864,6912,15616,8960,8192,6400,3328,2816,-1536,-9472,-8960,-5120,2560,4352,-512,3840,-4608,-11264,-5120,1280,2816,7168,9472,2560,-2816,-3072,-5120,-18688,-27904,-21248,-4864,-2560,-2304,-8448,-19456,-19200,-11264,-2304,-7936,-7680,-5120,-8704,-20736,-20992,-16128,-19200,-10752,512,1024,-1792,-4608,-13568,-16128,-12544,-6656,-5120,-3584,512,768,-2048,-2304,-4352,-11008,-13312,-7424,-5376,-12032,-18688,-20480,-16384,-13824,-12032,-15872,-11008,512,2048,-5376,-21504,-22528,-23296,-27392,-16384,-8192,2304,4352,0,-768,-3584,-2560,-1792,256,5376,5120,3584,512,1792,3840,256,7680,13056,14848,10496,7680,9984,9472,3584,-4608,-1536,3328,7168,9216,3840,9984,12800,3584,1024,1024,4352,4096,4864,11520,15104,10240,11264,11520,10240,14592,17664,15616,9216,7424,3072,4096,11008,16128,14592,11520,15104,16384,12288,9216,13824,17408,14592,9472,6144,4608,3328,4096,3072,3328,4352,3584,512,256,5888,9472,8960,4864,2560,-1536,-4608,-1536,4608,3072,-1536,-5632,-2560,256,-3840,2304,9216,11008,3840,-3072,-2560,-256,-1024,-2560,-4096,768,4608,256,-9216,-8960,256,-1792,-7936,-11776,-9728,-8960,-10496,-8960,-5120,-6144,-11776,-14336,-10752,-8192,-10240,-11520,-13568,-14336,-17408,-16128,-13824,-7680,-1536,-6656,-7936,-4864,-3328,-13824,-18432,-5888,2560,-5376,-17664,-12288,-5888,-5376,-6656,-5376,-2048,-1280,-5632,-11264,-11776,-6656,-5376,-12288,-12032,-4096,-4864,-14336,-13824,-7680,-7168,-11008,-5632,-4096,-7168,-5632,-3328,-5632,-10496,-10752,-11776,-7936,-5376,-2304,-4352,-5632,-4608,-5120,-4096,0,8960,8448,7424,6144,3328,5376,5632,5888,5376,3328,4608,2560,-1792,512,2048,5120,5632,4864,6400,8192,8960,14080,14336,10496,9728,4864,5888,-768,-2816,-6400,-8960,-3072,0,-2048,768,3584,3072,9728,6400,6144,-2048,5888,5888,7424,12288,9728,9984,6656,15360,4096,6144,1280,1792,0,-2560,-1024,-2560,-4096,-4864,1792,-5120,-3584,-4608,8448,5888,5120,7168,6656,2048,1536,4608,-4096,512,-512,-512,-6656,-4608,-7680,-3328,-768,3072,4608,3328,5120,4608,9728,3072,5632,256,256,-4096,-4608,-2816,-3072,-5120,-8192,-6144,-9984,-11264,-9984,-10752,-13056,-8448,-9472,-8704,-6912,-5632,-6144,-5632,-7936,-4352,-5120,-3840,-7168,-12032,-11264,-11264,-7424,-15104,-14848,-18432,-16640,-12800,-8192,-11264,-9984,-5888,-5888,-768,-3072,256,-768,-3328,-3840,-1280,-3328,-4096,-6144,-6656,-13312,-11008,-12288,-12288,-4352,-7424,-512,-7168,-3840,-3072,-1792,-3840,1024,2816,-1024,1536,-2560,1536,-7936,-5376,-5888,-5376,-4608,-3072,4096,-256,-512,256,5120,4352,4864,9216,8448,6400,11264,18176,12800,12800,16384,14848,17152,13568,8192,8704,8960,8704,6912,7424,3584,8704,11264,10496,11776,8448,12800,11776,19968,15360,14080,13312,14080,14592,7680,10240,2304,9216,7424,6656,5376,8448,8960,9728,13568,12544,18176,10240,16384,13568,13312,14336,11264,8960,3328,6912,4864,4352,2304,-5120,-3328,1536,-2816,-4352,-6912,-2560,-4864,-2560,-1536,-1280,-1792,-3584,-4352,-1792,512,-6144,-4864,-10240,-4352,-14336,-7936,-8960,-12544,-7680,-9216,-4864,-12800,-11776,-11008,-4096,-8448,-4096,-4096,-7680,-6656,-1536,1280,-6144,-6400,-5120,-3072,-2560,-10752,-11520,-13056,-14080,-14848,-14592,-8960,-13312,-10496,-11520,-5376,-6656,-4096,-8192,-7680,-4352,-9984,-8960,-15616,-14592,-14848,-12800,-13824,-12544,-11264,-10240,-9216,-9472,-5376,-5120,-7168,-4352,0,768,-2816,1536,5376,-512,768,2816,5120,0,-2304,5632,768,-3328,-4352,-1024,-2304,-256,3328,4608,5120,3328,8960,7424,12544,7936,10496,10496,10496,12800,5632,7168,3328,8960,9984,10496,8192,7680,10496,11264,12288,11776,12544,11008,11776,11776,11520,6144,5120,4864,3584,512,2048,-256,-5120,-6400,-9728,-5120,-11264,-10496,-8704,-6912,-4864,-5376,-4864,-5632,-512,-512,-512,-2304,1024,1536,3072,2048,768,1024,1536,1536,-1024,-512,-512,1024,1024,2304,2048,-512,-3840,-3072,-3840,-5632,-6656,-6912,-8448,-10752,-11520,-13312,-15104,-14080,-16128,-18432,-17408,-17152,-15872,-16640,-12800,-9216,-8704,-7424,-3072,-1536,-3328,-2560,2304,6912,7680,7168,7168,6656,10496,6144,-256,2560,7168,9984,8704,9984,8960,8448,7680,8192,8192,6400,3072,2048,4096,2048,-2304,-4096,-2048,-4096,-8448,-18944,-16384,-11776,-14080,-10752,-7680,-3072,-2816,-768,768,2560,4864,6400,6400,9984,13056,13824,13312,15872,18688,19712,11776,6912,14336,14848,16128,13568,16128,18176,16640,12800,10240,10240,11008,7936,5120,3328,1536,256,1024,1024,-5632,-9728,-19456,-16640,-12800,-13312,-12032,-11264,-6144,-4608,-3328,-3328,-3328,512,1280,1536,4864,3584,4352,4352,6144,7168,7168,256,-6912,-1280,2048,1280,-768,-1536,-1024,-768,-2560,-3328,-4096,-7168,-7936,-6656,-4352,-6400,-11264,-11776,-9984,-8960,-14080,-24832,-27136,-19968,-15104,-16384,-15616,-11520,-7936,-4608,-3072,-1024,1280,3328,7168,8704,8192,7168,6656,9728,9472,10752,5120,-4352,1024,6656,6912,4608,5120,7424,8960,9728,6144,3584,1280,2304,5120,2048,-1792,-5120,-4352,-3072,-6400,-8704,-18432,-20480,-12544,-8192,-8448,-8448,-1536,3328,3328,3840,5632,8448,8448,10240,12288,12800,14592,14848,13568,13568,14336,14080,4864,5376,15872,14592,15104,13568,16128,17152,12544,11776,11264,9728,4352,1024,4864,3584,1792,-1536,-5120,-6656,-11008,-14848,-24576,-23296,-15104,-10240,-6144,-8960,-6144,-512,-1024,3328,5632,6912,4096,3584,9216,8704,6144,1536,256,1280,1024,-5376,-12800,-6656,-1024,3328,4352,-2304,3072,256,1024,256,-8448,-10240,-15104,-5888,-8192,-12032,-13312,-17920,-16640,-20736,-21504,-29696,-27392,-14080,-8960,-5120,-8960,-5376,1024,-2816,3328,4608,6400,4864,4608,13312,11520,9728,5376,6656,7424,4864,2048,-5632,4864,11776,10240,8448,2560,7424,4864,768,-512,-3072,-2560,-2816,2560,3072,-2304,-6144,-7936,-5632,-11520,-17920,-19968,-16896,2560,6656,3840,-512,-5632,7168,6912,4096,5376,9216,19968,20992,22784,21248,13056,11776,14592,16128,11264,4352,-768,6144,23552,19968,11520,3328,2304,13312,6144,-512,-1024,-1280,6912,9984,6912,-1792,-7680,-3328,-7936,-14848,-18176,-21248,-19456,-5632,8960,3328,-3328,-7680,-3328,5632,-256,256,5632,10496,19456,11008,7936,6912,1792,6400,1536,1536,-3840,-10496,-5376,4352,8192,-1024,-4864,-14080,-8448,-768,-14592,-16640,-13056,-4096,-1792,-12800,-9472,-9728,-13568,-18176,-22016,-18176,-26880,-23808,-14080,-1792,2560,-5120,-9472,-12800,768,2304,-2816,4608,11264,16896,12288,9728,10752,5120,8192,6400,4864,2304,-4096,-3584,-1792,11264,8704,512,-6912,-6400,6144,-4352,-8960,-3584,-1280,1536,-2304,-512,-2560,-9472,-11264,-15616,-11264,-16384,-18432,-11008,256,15104,7936,3328,-2560,1536,13824,8960,10240,13312,20480,23552,12800,14592,13568,11776,12288,9216,14336,3584,256,4352,10240,16896,9472,5632,-2816,2304,9472,-3072,-3584,-1280,3840,6912,512,1280,-4352,-5632,-7680,-9984,-11520,-17152,-8704,-4352,4096,12032,4096,-2048,-5376,5376,11008,1536,7680,15360,17408,13568,6400,6656,4864,4096,1792,-256,-6912,-13056,-9472,-7168,-2816,0,-5888,-11520,-15872,-8960,-5632,-17664,-17920,-8192,-1536,-6400,-15616,-14080,-11008,-17920,-18688,-17920,-20480,-17152,-13056,-5632,3584,7168,1536,-3584,-4608,5376,9216,2048,7680,14848,15616,10752,5888,6912,6912,5120,4096,-2304,-5120,-3328,-3840,-7680,0,7680,-2304,-8192,-8960,-1536,-5632,-14336,-4096,3584,1536,-6144,-9216,-4352,-5120,-5888,-10752,-12544,-4864,-2816,0,1280,11264,15360,9216,5632,3328,12544,16640,10496,13312,22016,24320,16640,8192,13568,16384,11520,5888,4352,5888,1024,0,-1536,1536,5888,1024,-1536,-7680,-7680,1024,-3840,-7424,-5120,-2048,-2048,-7936,-5376,-1792,-1280,-3328,-2304,3328,6400,6400,4352,11264,15360,11776,10752,9472,8960,5376,3328,7424,8704,5888,3840,-3328,-3328,1536,768,-1792,-8960,-8192,-7936,-13056,-9472,-6144,-5632,-4864,-6656,-7936,-8192,-15872,-26624,-23296,-15104,-12800,-7424,-11264,-16640,-11776,-11520,-5376,-1280,5632,8448,-1792,0,5120,10240,15872,13568,1792,-2816,-2048,4096,13568,6144,-3584,-6400,-7680,3328,17152,13824,3584,-4608,0,9472,7680,7680,8960,7680,13824,15360,4096,256,2048,8704,8448,2560,-1280,3072,11776,9216,10752,14080,10752,2560,1792,11776,10496,3328,9216,12544,9984,3328,2048,-256,-5120,-3840,-7424,-14336,-20992,-21760,-18688,-16640,-13568,-13312,-19456,-23040,-23040,-18432,-17152,-17152,-13312,-10752,-7424,-6912,-13568,-17152,-12032,-13568,-14080,-9728,-8704,-8192,-3584,5120,13568,15616,12288,11008,9216,7680,12800,14592,16384,10496,5120,11008,16640,15872,7424,-1792,-3840,3840,4864,5376,8960,10752,6144,4096,6656,6912,8448,12800,13824,7424,3328,512,-256,1536,2560,2560,768,-2304,-6912,-13824,-17408,-13824,-7680,0,1792,-2816,-3072,-4864,-5120,-2560,-1536,-512,0,-2560,-6656,-7936,-8960,-10496,-14080,-14848,-13824,-16128,-17152,-15104,-15872,-16384,-14080,-12288,-9728,-6144,-6656,-9216,-10240,-5376,-2816,-6144,-5120,-3072,-5376,-6144,-7680,-7168,1024,3584,6144,7168,8448,12032,15872,17152,13056,13824,16384,17664,19200,23808,25600,24576,21248,14848,12544,14592,14592,10496,7424,6656,5632,3072,2048,1536,2048,2816,2304,1280,256,3072,5632,4352,1792,0,-1024,1280,3328,2304,256,256,512,1024,1024,0,-3840,-1280,5120,1792,-3584,-5376,-3328,-2048,-3840,-6144,-5888,-8192,-12544,-14080,-17152,-20480,-20480,-17152,-16128,-17664,-18944,-21504,-23808,-20480,-16128,-12288,-12032,-11776,-9728,-9216,-8192,-6400,-4864,-3584,-512,-1792,-4352,-3072,256,768,3840,8448,6656,4352,7424,12032,12032,11520,11008,9216,9984,15104,19456,14848,10752,9728,8704,10240,10752,12800,12800,11008,9984,8960,7936,7680,9984,9728,8704,12288,13312,10752,12032,12800,8960,7424,9472,10752,9216,8448,9472,5888,4352,5888,5376,3328,4352,5888,2816,0,0,512,-512,-1280,-1024,-2048,-4864,-6912,-9728,-12288,-11520,-10752,-12544,-13824,-13824,-15616,-16384,-15360,-15872,-17664,-17664,-16128,-15616,-17920,-18432,-18688,-21504,-21248,-19456,-19712,-21760,-21248,-20736,-22016,-21248,-20736,-19968,-20224,-19712,-17664,-17152,-17152,-16640,-17408,-17152,-14848,-12544,-12288,-12800,-11776,-10752,-8448,-8192,-8704,-9728,-8960,-5376,-3840,-3328,-3072,-2560,-2560,-1024,1792,2816,2560,3840,6144,6400,6400,5888,7168,8192,9472,10496,10496,9472,9728,10752,12032,13568,15104,15616,15360,16896,16640,17408,17664,17664,18176,17664,18944,18944,17920,17152,16896,15872,15616,17152,17920,16896,16640,15616,15872,15616,15104,14592,12800,13568,13824,12800,10240,8960,7936,7168,8448,8704,6656,5120,4608,4608,4864,3840,3072,1280,1792,3328,3328,768,256,-256,-2048,-1280,0,-512,-3328,-3072,-2304,-3328,-5376,-6656,-6912,-5632,-4096,-3840,-6400,-8704,-8448,-8704,-8192,-7936,-7168,-9472,-10496,-10240,-10496,-11264,-12800,-12288,-12800,-12800,-12544,-14336,-16640,-15104,-13824,-15104,-15360,-13312,-13568,-14336,-13824,-13312,-13824,-15360,-14080,-14080,-15360,-14592,-13312,-14336,-14336,-13568,-14592,-14336,-12288,-10752,-11520,-10752,-9216,-8704,-8960,-8704,-7936,-6912,-5632,-4096,-4352,-5120,-4608,-4352,-3584,-1536,-256,-1280,-512,1536,1024,512,1792,3840,3328,4096,5888,5376,4608,5632,6656,6656,7424,9728,10240,9216,9728,10496,11776,11520,12032,11776,11008,12800,14080,14080,13568,14592,15104,14336,14592,15360,15360,15616,15872,16128,15872,15360,14336,12544,14336,14592,13568,12544,13056,13056,11776,11776,13056,13056,12032,12288,12032,11520,10496,9216,7168,7424,8448,7424,5120,4352,5120,4096,3328,3840,4096,2560,2304,2048,1792,512,-512,-1280,-2304,-2560,-3072,-4096,-4864,-4096,-4608,-6144,-7168,-6656,-6656,-7168,-7168,-6400,-6912,-8448,-9216,-9984,-9216,-8960,-9216,-9984,-9472,-9216,-10240,-12032,-12288,-11264,-11008,-11264,-11264,-11008,-11264,-11520,-11776,-11264,-11520,-11264,-11008,-10496,-9728,-10240,-11264,-10496,-9216,-9472,-9984,-9984,-8960,-8960,-8704,-8960,-8448,-8192,-7936,-6656,-5632,-4352,-4352,-5888,-6400,-5120,-4608,-5120,-4864,-4096,-3840,-5376,-5888,-5888,-5888,-4608,-2560,-1792,-1280,-256,1280,1536,0,-512,-4864,-9984,-4096,2816,256,-1024,-768,3584,-1280,-768,3072,4096,256,-6912,-512,-768,6400,4608,3840,7168,6912,1536,-5376,-5376,-4608,-4352,-9472,-6144,-6400,-8192,-8192,-11520,-10496,-9472,-2304,12032,5888,11008,8448,5632,7168,5376,7424,-512,3072,-2304,-3328,-11008,-9728,-5632,-5120,-6912,-7680,512,-3072,2048,5376,7168,8960,6656,8192,9984,5376,1280,2304,-4352,-2304,3584,-1024,-6144,-7936,-3840,-256,1024,-2304,2304,3072,4352,8960,10752,13568,12800,11776,14080,15872,13056,10240,7168,6400,3584,4352,4864,6912,4096,4608,3840,4096,2816,-2304,12544,15360,13568,13312,13312,13824,12288,9216,4096,3328,-1024,-2304,-8448,-9216,-9216,1280,5376,3328,6400,6912,4096,0,12800,12800,7168,7168,10496,4352,3584,3328,768,-10240,-7936,3072,-3072,512,-5888,-3840,-3328,-3328,-5888,-7168,-8448,-11008,-1792,-2304,2816,9216,13568,10752,11520,7936,4608,4352,2560,-2304,-6912,-6656,-12800,-9984,-11520,-6912,-5120,-13056,-11776,2560,4608,-768,-2048,-7680,-6400,-3584,-5376,-7680,-8448,-13312,-15104,-14080,-13312,-12032,-5632,-7168,-3584,-8960,-8960,-6912,-8448,-3328,-10752,-9728,-8960,-5376,-5888,-5120,-8704,-11520,-14592,-9216,-7424,-16128,-15104,-16896,-15104,-14336,-13824,-16896,-17152,-17152,-13568,-6656,-3328,-4096,5120,7680,3072,2048,-4096,-512,-512,-3584,-8960,-11520,-9472,-6144,-3840,-1792,-1280,-5376,-5888,-2304,5376,256,1024,3584,4608,7424,3840,3840,-3328,-3840,-4096,-2816,-1536,0,1536,6912,10496,7168,8704,4864,7424,9728,12032,12032,15104,14080,17152,19712,15616,13312,8192,5888,10752,11520,7680,7168,9984,14080,7680,12800,11776,8448,8192,8192,8448,9728,12544,12544,16896,15104,10240,5376,11264,8448,10240,11264,7936,7680,7936,13312,5888,6912,2304,-512,1792,2560,4608,3584,4864,2304,2304,3840,4352,-2816,0,768,-5376,-6656,-2304,768,1024,5120,3584,-1536,256,4864,-2048,-5120,-256,1280,-7168,-8192,-1024,-1024,-14848,-11776,2048,-1280,-14336,-2816,9984,-17920,-25344,-2560,-2304,-26624,-23296,-16640,-16384,-11264,-12800,-17664,-9472,-768,-4096,-6912,-5376,-2304,-7936,-7424,-7424,-5376,-12544,-7168,-3072,-7680,-9472,-5120,-6400,-12288,-2048,-1536,-6912,-8704,5632,-4096,-11264,256,4352,-5120,-6656,10496,7424,3328,9984,14848,12032,9984,10496,12288,4864,3840,10496,3584,-2304,5632,11776,-4864,-12032,11264,5376,-22016,-8448,10496,-3840,-17664,-6144,0,-768,2048,-2048,-3584,7168,9472,5888,9472,12288,12800,10240,7936,9728,8448,10240,13312,7424,8448,14336,13056,2816,6144,10496,5888,0,7936,6656,-6400,256,768,-3072,-9728,768,-2560,-11776,-3328,3584,-1280,-6912,6144,13824,7936,5888,16384,16640,7936,13568,29184,16128,-3072,8448,18432,-9216,-21504,-3328,-8448,-25856,-22528,-21504,-23552,-12032,-15616,-24064,-17408,-2560,-9216,-13568,-8960,-6656,-8192,-12032,-9984,-5632,-4352,-9728,-8960,-2560,-2816,-8704,-5888,1792,0,-6144,-512,3840,512,-6912,512,2304,-2816,-5632,256,3840,-6144,-5632,-1536,-512,-8192,-6144,-3584,-6656,-3072,4352,8960,6656,6912,16640,15872,10752,4352,9728,16896,4864,-4608,256,16896,-1792,-18944,-3072,7680,-10240,-19456,-6656,-5376,-9728,-16128,-10240,-512,-2304,-10752,1280,6144,2304,3584,6656,10752,9984,9472,6400,15872,10496,5888,10240,7168,8960,4864,13056,16896,7168,10240,13568,17408,12032,3584,6912,8192,1024,-5120,-256,11008,1024,-9472,10240,15872,-2816,-9472,16896,10240,-10752,-2304,8192,11008,-1280,-5120,7680,17152,3072,-9728,5376,13312,-4096,-8704,-3072,-3840,-7424,-16128,-19968,-15104,-22784,-23808,-12800,-11520,-11520,-9984,-9472,-4352,-1792,-6144,-6400,-3328,3584,-1792,-768,768,-512,768,768,3328,-2304,2560,0,-768,2816,-1792,-4608,-768,-2560,-11520,-5888,-1536,-11520,-19200,256,7168,-8960,-7680,8960,4096,-12032,-5632,-1024,-4864,-12288,-7680,-512,1024,-2560,-4864,8192,11264,3328,4608,8704,9216,5120,2304,4096,4352,256,-2304,4608,1536,-3584,-2560,-256,1024,-768,1536,2816,2048,3072,4608,6912,6144,8960,14336,14592,14848,14848,20992,21248,19200,21760,18432,17664,17664,15872,12288,7424,8192,3840,-256,-768,-3840,-6912,-7424,-3584,-5376,-7680,-6656,-6656,-7168,-9216,-7424,-5888,-8448,-8192,-7424,-6400,-7424,-9728,-8704,-5888,-4608,-7424,-6400,-6144,-6144,-5120,-3840,-3584,-7936,-7936,-7168,-5632,-7680,-8192,-6144,-6912,-6144,-5632,-5632,-6144,-6400,-6656,-6144,-6400,-6400,-4096,768,2048,3072,6400,7424,8704,9216,12288,11264,8448,8192,8704,6144,1024,0,-1792,-5632,-7680,-9472,-11264,-12032,-11264,-8704,-8960,-8960,-9984,-10240,-9472,-11008,-9216,-8960,-8704,-7936,-6656,-6400,-5376,-4352,-4864,-2560,-1792,-1536,-2048,-2560,256,2816,3584,3328,3072,3840,3328,2048,2560,5632,6400,4096,6912,7424,6400,4864,4352,6144,3328,3584,7168,8960,11264,13056,15104,16384,17152,20992,21504,20224,20224,20736,19200,16896,15104,12800,10240,6912,2560,-256,-4096,-8960,-8704,-8448,-6400,-7936,-10496,-9472,-8448,-7680,-10496,-10496,-7424,-4096,-4096,-4352,-3840,-3840,-3840,-3328,-1792,-2304,-3584,-5120,-3840,-2048,-1792,-4352,-5376,-3840,-3584,-5632,-6656,-7168,-5120,-3584,-3584,-3840,-4352,-4608,-5120,-4608,-6400,-8448,-8960,-5888,-2816,-1536,0,768,2048,2560,6144,6912,4352,5888,7680,8192,6144,3584,1536,0,-2560,-5120,-6400,-9984,-11776,-10752,-9984,-9728,-10240,-11520,-11520,-9984,-7424,-8960,-11520,-6656,-4096,-3072,-3328,-2816,-1280,-1792,-256,1792,-512,-1536,0,1024,2560,3584,2816,1792,2048,1024,3072,2304,2048,3328,5376,6656,4352,4096,4352,4096,2816,3328,3840,2816,4608,6912,9728,10752,9984,12544,12544,15104,18944,17920,17920,18176,18432,17664,15872,12288,9728,7424,3072,256,-2816,-6400,-6656,-6400,-6656,-7424,-9984,-11264,-11776,-10240,-9472,-10752,-8960,-6144,-5120,-5120,-4352,-2816,-3328,-2048,256,-1280,-2560,-2304,-1024,-256,-768,-2304,-3584,-4096,-5632,-3072,-1280,-1024,-768,-3072,-1280,-256,-512,256,1792,2560,1792,256,-1536,-2048,1280,3840,5888,7168,5120,2816,2048,7424,7936,7168,4608,6400,9472,4608,-512,-4864,-5632,-4096,-5120,-8704,-8192,-9728,-16896,-18176,-16384,-17920,-14592,-14336,-10496,-8448,-6144,-10240,-17920,-13056,-6144,5120,5632,3584,512,-2816,256,7936,5888,4352,8704,10240,12032,5376,6400,3072,6400,6144,7424,6912,-1536,768,1536,6912,2048,1792,-512,2560,2560,-2560,-4352,-8448,-10496,-8704,-1280,256,512,-11520,-13312,-15616,-5888,-2304,-12288,-11520,-10240,-2816,-9472,-11520,-12032,-8704,-5632,-6912,-11776,-13312,-3584,-4864,-3840,-4096,-256,256,256,2304,5376,8704,-256,-3072,-1280,13056,13824,12032,11008,10240,10240,4864,16128,13568,15104,11264,12288,16640,13824,15360,8960,10240,10240,9984,1536,5888,12032,12288,8448,0,6400,5120,5376,2560,512,-2560,-4608,-10240,-10240,-2816,2048,4352,-5376,-4096,-7936,-3072,-4352,-7168,-5120,-3584,-512,-6912,-7168,-11776,-13056,-19200,-18176,-12800,-9728,-11008,-13312,-14592,-15872,-14080,-11520,-5632,-2304,3584,-3584,-6656,-5632,-3584,1280,4608,10752,12032,11008,4608,-1792,5632,11008,10240,7680,4608,12288,6656,3072,-5632,-5632,6912,2304,2560,4352,13568,7680,2816,-256,2560,10752,7424,9984,8192,7168,2048,-2304,-3328,5888,9728,13824,9216,2048,256,-6656,2816,4608,7424,1024,1024,5120,-1792,-9984,-17152,-9216,-5120,-4864,-8448,-8192,-6912,-6400,-13824,-15360,-11520,-6912,-3328,-9728,-11008,-13312,-11008,-17152,-16384,-11776,-7424,-2304,-9472,-13312,-17920,-14336,-7680,-8960,-9216,-7424,-5632,-6912,-14080,-12032,-9728,-8960,-3840,256,4864,3328,6912,5120,3584,4608,7168,12288,13056,16384,12544,8448,6144,7168,7936,11776,15104,20736,20224,10496,7424,11520,23296,21504,23040,20224,18944,20224,13568,9728,6656,13312,14336,15872,14848,15872,14336,8448,2816,2048,5888,4608,5632,3072,1536,-7424,-12288,-17920,-13056,-5632,-3840,-1792,-12032,-16128,-25600,-19712,-12544,-9472,-11264,-18944,-12544,-13056,-13568,-19712,-20736,-13312,-7424,-8448,-11776,-12800,-15104,-12800,-15104,-14848,-13056,-12544,-11520,-11776,-13824,-14080,-14080,-11520,-4352,-768,5888,3328,512,0,1024,9728,13056,11264,7680,10240,12800,14592,11264,9216,6912,9728,15360,13312,13568,11264,12032,15104,13568,11264,11776,11776,13568,12032,12288,8448,3328,6656,11264,19968,19712,16384,11520,9728,15872,19200,20224,18432,18688,19200,19968,18944,13568,9728,8704,13056,15360,13824,9216,3840,5632,6912,8192,4608,512,1280,-768,512,-2304,-4608,-5376,-3328,2816,5376,3840,0,-2304,-4096,1280,1792,512,-3072,-2560,0,-1280,-3328,-10752,-12032,-14336,-7936,-9728,-8704,-10752,-12800,-12800,-16640,-12800,-16128,-15872,-18176,-15104,-16128,-18432,-22272,-18432,-15360,-12800,-8704,-13824,-15616,-22784,-16640,-11008,-7936,-11264,-14080,-11520,-10752,-8704,-12800,-15360,-17408,-14080,-10752,-9216,-12800,-13056,-10496,-8960,-8192,-9216,-10240,-11008,-7424,-5120,-2048,-7424,-5888,-2816,2560,9728,7680,5632,1024,2048,6400,8704,10496,10752,11008,13312,15872,15872,10496,8192,7936,12544,17408,17408,17152,13568,13056,16384,14336,14848,11776,12032,13824,12032,11008,6656,12544,12544,18688,21248,16640,14080,8960,14592,17408,21504,18688,16896,16896,16640,17152,16640,11520,4608,4864,2816,10752,7936,11008,5888,3840,3328,-1792,2816,-1536,2304,-1792,-2560,-4608,-6912,-3840,1792,5376,4352,-256,-4864,-7936,-2560,0,2560,2816,-768,-256,-4096,0,-5632,-6144,-9728,-10496,-7680,-8192,-5632,-8448,-10496,-13568,-14336,-14592,-14080,-15872,-16896,-19712,-20480,-19200,-18176,-13568,-10240,-10496,-11776,-16128,-17408,-16640,-12288,-7936,-10240,-9472,-13056,-9472,-10496,-12544,-15616,-20480,-22016,-20736,-14336,-11776,-9216,-13056,-16384,-19712,-15360,-13568,-10496,-11264,-13056,-14080,-15872,-9728,-5888,2816,4608,1792,-4096,-7936,-5888,0,7168,10496,8960,4608,3072,5632,9728,7936,6656,1280,1536,2560,6912,13056,11264,11776,4608,3840,3840,8192,10752,9728,8704,6912,8704,10240,16896,22784,23808,17664,13568,9216,12800,18688,23296,23808,19200,16384,13056,14336,13568,12800,12288,8960,9216,9216,10752,13056,9984,9728,6144,5376,6912,5632,6400,1792,2560,-768,1536,4352,4864,7424,3072,3840,-1024,1536,2560,4352,7680,3584,4096,256,-1792,-512,-3328,-3072,-6144,-8448,-8192,-10752,-6912,-11776,-9472,-10752,-13312,-9216,-14592,-9728,-12544,-10752,-7936,-11264,-5888,-8448,-3840,-2816,-4864,-2560,-6400,-3840,-5376,-3328,-2048,-5120,-4608,-7680,-7168,-8704,-7424,-7424,-7424,-9472,-10752,-7680,-9472,-7168,-8192,-7680,-8704,-10752,-11264,-11776,-9728,-14848,-8960,-11776,-8448,-5120,-3328,1792,-1024,4096,768,1792,4608,2816,5632,1280,-256,2560,-6400,-1024,-5376,-3072,-4864,-6912,-2560,-6144,-1024,-4864,-1024,-2048,-2560,1536,1024,256,3584,2048,2304,4608,5376,5888,4864,7936,8960,7168,15872,13568,14592,18432,12288,13056,10240,11264,9984,11264,10240,8704,8448,8960,7936,6912,8192,2816,4608,7168,3072,1024,-1792,-1024,-7936,-8704,-9728,-5120,12288,5632,11008,16128,14592,18688,7680,9472,5120,2816,5888,3840,3328,-6656,-6400,-9216,-17920,-13056,-5888,-9216,-8448,-14080,-8448,-7680,-1024,6912,-6912,-3584,-7936,-3072,-4864,768,8448,-2304,0,-5888,-2816,-5120,-768,-3328,-15360,-13056,-11776,-2048,3840,15104,2560,17408,18688,5632,19968,14592,8448,-3328,-23296,-24832,-17152,-11520,5888,-16896,-2304,-3072,-5888,-1280,-5376,15872,5888,26624,16384,4352,-4864,-5888,2816,-6400,2816,-9984,256,-768,-3072,3584,-2048,6656,14336,9472,-1280,8704,3840,16896,19456,4352,19200,4096,6400,2816,-12800,-3584,1024,3840,14592,15360,-6400,9216,14592,13568,16128,10752,-512,-7680,-10752,-7680,1792,-22272,4352,-4608,-19712,-1280,-5888,768,512,1280,7680,22528,5120,6144,2048,-7680,-768,-6400,-11776,-21248,-9984,-3584,5888,-1792,-8704,-12288,-13824,-10496,-768,7168,-512,11008,-1792,3584,9216,-5120,-7424,-8448,-8192,-11264,-9472,-24576,-14080,-8192,-7168,5120,-7680,-2816,-7680,-13312,-2560,5376,8192,18432,16128,1792,3584,-6656,-512,7936,-2816,-12288,-23040,-30464,-21760,-6656,-3840,5888,-3328,-17920,-11008,-12288,2048,1792,-10496,-12544,-21504,-14336,-6144,-3840,-7680,-8704,-15104,-15104,-8960,-5120,4864,1792,512,0,-3328,8448,11008,2560,4352,5376,7168,10496,6400,6656,5888,-768,1024,-2048,-256,1792,3584,3840,5120,12032,12288,19968,15872,15360,11264,1536,4608,5120,6656,7168,11520,12288,8448,6144,13824,13312,1536,-8192,-9984,-1792,768,2816,2560,3328,4352,4864,2560,7168,5888,3840,4608,2048,7680,7424,8192,11008,11264,3328,1024,4096,6912,3840,6912,7168,6656,7936,3328,11008,5632,3328,-1536,-2304,-2816,-6144,-2048,-3072,-3584,-4352,-2816,-5888,-7168,-12800,-12800,-12800,-10240,-7424,-5120,-2048,-1280,1024,-1792,-1536,2816,-2304,-6144,-1280,1280,3584,-1792,512,3328,2816,-7424,-16896,-9472,-6912,-6400,-5632,-3584,-6400,-7168,-6912,-3840,-2560,-8704,-12544,-13824,-5376,-3584,768,3584,2560,6144,5120,5376,6144,2560,4608,5376,4352,7168,6400,11264,11776,12032,9472,9984,6656,6400,7680,5888,3840,4608,5632,3584,6656,2304,3840,1280,2048,-1792,-2048,768,1024,2560,-2560,0,2304,1024,-6400,-1024,1024,1280,-256,1024,4864,5888,3584,-1280,1536,1536,2560,-1280,-1280,-768,2048,1280,1024,-2048,-3840,-7424,-12288,-14848,-13568,-12032,-14848,-12544,-15360,-8448,-9984,-9728,-6144,-8704,-8192,-5376,-1280,-1792,-3072,-2304,-1792,-2304,-2560,-4352,-3328,1024,768,-512,-2816,-1024,512,-2560,-3584,-4864,-768,-2560,-5120,-2816,1024,1792,2048,2304,1024,2048,3584,2048,1024,1024,1536,768,-256,-256,0,3584,1280,256,-512,1024,512,-2304,-512,256,2048,1792,1536,1792,2816,3072,2048,768,-768,-1024,-1280,256,1792,1280,2304,3072,5888,4608,8448,14336,16128,18688,14848,16128,17152,12032,7168,3328,5632,3840,-2304,-2816,-2304,-3072,-2816,-4608,-3328,-3328,-4096,-4352,-2560,2048,1024,1792,2304,2304,2304,1280,768,3072,0,-256,-1024,-256,-512,-4352,-3840,-5376,-4096,-5632,-6144,-7168,-5888,-7168,-6912,-6912,-7168,-8704,-8960,-8192,-8960,-7680,-10752,-8448,-8448,-8448,-6912,-5888,-4864,-2560,-1792,-1536,-256,768,2048,2816,3584,4096,3840,3840,4352,2560,1792,256,-256,-1280,-3072,-4352,-3584,-3840,-3840,-3584,-3584,-3584,-2560,-1792,-2560,-1024,-256,-256,-512,256,-512,256,1024,512,1024,1536,1280,2304,2304,2304,2304,1792,2560,2816,4608,4352,3840,3584,3072,3584,4352,5120,5120,5632,6400,6656,6912,5888,5888,5888,7168,7168,6144,6400,6656,7680,7168,6144,5632,5632,5376,4864,4352,4352,3840,3328,3840,3072,1024,0,-512,-1280,-1280,-2048,-1792,-1280,-1536,-2048,-2048,-1024,-1792,-2816,-3072,-3584,-2816,-2304,-3840,-4608,-4608,-5632,-7680,-7424,-8192,-8192,-8192,-9728,-8960,-9216,-8448,-8448,-6656,-7168,-6912,-6144,-6400,-5632,-4096,-3584,-3840,-3072,-3584,-3328,-3328,-3328,-3072,-2816,-2560,-2304,-1536,-1024,-512,-512,-512,-1024,-512,768,1024,1536,512,1024,1280,1792,1792,768,768,0,1280,768,512,256,1536,4352,3584,2304,2048,2816,4096,4864,4096,3840,4864,4864,4864,4864,4352,4352,4096,4096,4864,4608,3840,4096,5120,4608,5376,5888,4608,4608,3840,3840,4352,3072,2560,2560,2816,2048,1536,768,768,1536,2048,1024,-768,0,512,512,512,-256,-1280,-1280,-768,-1024,-512,512,512,1280,1792,256,1280,1536,512,256,-512,-1792,-2048,-2048,-3840,-3584,-3840,-4608,-5120,-5376,-5632,-4864,-4864,-4864,-4096,-4096,-2816,-3328,-2560,-3584,-3072,-2560,-3584,-3840,-4864,-4352,-4352,-4864,-5888,-6656,-5376,-4864,-4352,-4096,-4608,-4352,-3328,-2816,-3584,-3328,-3584,-3328,-2560,-2816,-3328,-4352,-4352,-3072,-2816,-2560,-2816,-1536,-256,-256,1280,768,1536,2816,3584,4096,4352,4864,5120,6400,6400,6144,6400,6912,7936,8448,7936,7936,7936,8704,9472,9728,9728,9472,9472,10496,9984,8704,8192,7680,7680,6656,4864,3584,3840,3072,3328,2304,2048,1536,1024,1024,1280,512,-768,-768,-1280,-1792,-2048,-2048,-3328,-4352,-4608,-4352,-3840,-4352,-6400,-5120,-4352,-5632,-6144,-9472,-11520,-8448,-7680,-9216,-9728,-9728,-6912,-5888,-3584,-2304,-3840,-8448,-8192,-4864,-6656,-1280,6144,5888,7168,3840,-1536,-1280,-2048,9728,15360,8192,-512,-8192,-6912,-5376,-3072,1536,7936,16640,17920,12800,7424,-7168,-16384,-12544,-6912,3840,8960,9216,9728,4096,4608,-3328,-11008,-13312,-18944,-18432,-25600,-28672,-23296,-17664,-9984,-5120,-256,-2048,-5888,-3840,-5376,3072,14848,13824,11264,18176,20480,19712,9728,5888,4608,5376,13568,10496,14848,9728,3840,18432,26880,11520,10496,18432,16384,-8960,-20736,-1792,1024,-6144,-20224,-24320,-25600,-27136,-17408,-15616,-15360,-6144,-17152,-18688,-1280,2560,-8704,-15616,-8448,-10496,-14080,-6400,0,-3328,-7424,-8192,-1024,-2048,-7936,5376,7424,-4352,-9472,-4608,-1280,4096,16128,6912,6912,14336,26880,31744,32512,30464,24320,30720,19712,25344,27136,10752,5888,0,-5120,-15616,-5888,28416,15616,-1280,7680,5632,-5888,-5120,17408,12800,-13568,-23040,-21248,-20224,-18944,-22528,-24832,-25856,-20480,-17664,-25600,-30720,-21760,-11520,-12800,-19712,-21248,-5376,-9728,-11776,2816,512,-2560,4608,23040,18688,7424,9216,1280,-4096,-2304,-3328,-9216,-5888,-8960,-11520,-1024,4864,6400,12800,21248,19200,19712,28928,26112,21248,24320,20224,8192,2304,6144,-1792,-5120,4352,-3584,-5632,7680,-9472,-23552,0,8192,-6144,-9984,-7936,-11264,-20480,-25600,-12032,256,-512,-15360,-26112,-22528,-20736,-20736,-17152,-15360,-20736,-24832,-19200,-4352,-512,3584,1792,-4608,2304,13056,22528,18432,6144,1280,10240,14080,4352,0,3584,-2304,-2560,5120,3328,768,8192,16896,11264,11008,8448,13568,27392,26880,23808,21248,19968,14592,14592,11520,1280,4864,14336,1280,-11776,2304,1536,-19200,-9984,11520,1024,-11008,-11520,-8704,-6144,-9984,-7936,-4352,-14336,-17920,-9984,-22528,-32768,-31232,-28160,-25344,-24064,-19968,-18688,-18432,-17152,-10752,-9472,-3840,-1024,-5376,-1280,3840,5376,-1792,-5120,768,-4864,-8960,2304,4352,-1280,-5632,-1792,-1024,6912,12800,6400,5376,2560,14592,24320,27648,27392,29184,31232,29184,21504,16896,17664,12800,16896,8704,-6144,768,10496,256,0,13056,14848,5120,4864,10240,5888,1024,-1536,1024,-1792,-12288,-10240,-13824,-25088,-22272,-20992,-18176,-17152,-19200,-14080,-11008,-8192,-8704,-14592,-11776,-8192,-11520,-11008,-9984,-15872,-12288,-8192,-11264,-11264,-8448,-10752,-8448,-6912,-12800,-13568,-15872,-13312,-19712,-17664,-11776,-21248,-14080,-11008,-16384,-16640,-11520,-9984,-8704,1280,-5888,-768,-5120,-10496,-3840,-6400,-6912,-9984,-5632,-5120,-8704,-2816,1024,-1024,2048,3584,6400,3328,256,4352,-1280,-8448,256,-7680,-5376,-5632,-9216,-7424,-9216,-768,-1024,1792,6400,9472,6656,12288,17152,15104,17920,21760,17408,20992,25600,28672,23552,29440,24576,23296,26624,21248,21504,18688,19968,8448,13824,16640,12800,15360,19712,14336,12288,12544,11008,18432,16896,13568,20224,13056,6656,6400,8448,768,-2048,2048,-6656,-6912,-4864,-768,-4608,-4608,-2048,-3584,-11008,-8448,-5632,-16128,-19968,-18688,-25344,-25856,-28928,-27136,-28672,-32768,-28928,-29952,-28160,-22784,-21760,-22272,-16640,-16128,-17920,-18688,-10240,-13824,-9216,-4608,-8448,-10240,-9216,-8960,-10496,-12032,-17920,-17664,-11008,-14592,-22016,-12800,-8192,-10496,-3584,0,2304,768,0,4352,2304,-2304,-2560,3584,-6144,-9728,256,0,-8192,-4864,-1024,2560,6400,8704,9728,9728,14080,17408,11264,9728,19456,11008,7168,5888,9216,6144,3072,4096,8192,7680,6656,4864,4608,14080,9984,6912,6144,14592,12800,11776,18688,19968,23296,22528,24832,25088,26624,28928,25856,20480,18432,20992,20480,17664,9216,17152,20224,18688,17664,18176,24832,20992,19712,15104,14848,13568,5632,1792,1536,-4608,-1792,-6400,-11776,-7936,-7168,-6912,-7680,-5120,-7680,-8192,-6400,-2560,-10240,-12800,-11008,-13056,-17664,-16640,-14592,-22272,-24064,-19712,-15360,-21248,-25856,-25088,-21504,-21504,-25856,-26624,-24320,-20992,-20480,-22528,-19968,-14848,-12544,-13312,-12800,-8704,-5120,-9216,-13568,-13568,-10752,-10496,-12544,-16640,-19456,-13056,-10240,-5632,-6400,-4608,256,-768,2304,-1024,-768,768,-5632,-5376,-3840,-4096,-3072,-6912,-6912,-5632,-6144,-3584,-3328,-2304,-1536,-256,1280,4864,6912,4864,4864,7936,9984,11008,9472,6656,7936,10752,11776,7424,8704,11008,12800,12032,10496,12032,12544,14336,14592,16640,17408,15872,14848,14080,16640,18688,16384,14080,13056,12288,12544,11520,10240,9216,9472,11008,10752,11520,11008,11264,10240,9472,9216,6912,5376,3840,2816,1792,-768,-1024,256,512,1536,3328,6400,7168,6656,5888,5376,6144,6656,6912,6656,5888,5120,3328,1280,512,1280,256,-2048,-2048,-2816,-1792,-2816,-4608,-4352,-4608,-4352,-5376,-5888,-6656,-6912,-6144,-7680,-8960,-10752,-12288,-12800,-13824,-13312,-12800,-12800,-13056,-14080,-13056,-13568,-13056,-9984,-8704,-7424,-7168,-6144,-5376,-7168,-8192,-8960,-9216,-8192,-8960,-10496,-12800,-14592,-14080,-11776,-9984,-8960,-6912,-6400,-7168,-7168,-6656,-5120,-4352,-2816,-2304,-2560,-1792,-1024,-256,-3072,-3584,-1536,-1792,-3840,-3584,-2816,-3072,-3072,-5120,-5632,-4864,-5120,-4352,-2816,-1536,256,0,-1536,-2304,-3072,-3840,-3840,-2048,-1024,-2048,-1536,-1024,-1024,256,2560,5888,7168,6912,7936,9728,11008,12032,12544,14080,14848,13056,11264,9216,8704,8448,7424,7680,8448,10240,11520,12032,12032,12544,13824,14336,13824,12032,12032,12288,13312,15360,17152,17920,15104,12800,12288,10496,10496,9472,8192,9216,7424,5888,5120,3840,4864,5632,5888,5888,4608,2816,1792,768,-1024,-1792,-512,-512,-2048,-4096,-5632,-5120,-5376,-4608,-2048,-256,-256,-3072,-3840,-3072,-1792,-1792,-2560,-2048,-3584,-4352,-5632,-7424,-8192,-9984,-10240,-10496,-10496,-9728,-9216,-7168,-6912,-7168,-4352,-2304,-1536,-2048,-2816,-3584,-4352,-4352,-2560,0,1536,2560,512,-1024,-2560,-4864,-6656,-8960,-9216,-8448,-8192,-8448,-8704,-7680,-6656,-6400,-5376,-4608,-4608,-5632,-7168,-8704,-8448,-8960,-9728,-9472,-10496,-11008,-10752,-8960,-6144,-3328,-1280,512,1280,1792,1024,-512,512,768,2816,5376,3584,-768,-4864,-6144,-4352,-3072,-1024,768,2816,0,-6912,-6144,4352,7424,6400,9472,8960,12544,7424,6656,7424,12800,18944,19712,15872,9472,8704,2048,512,-9216,-9984,-6144,-7936,-9472,-14592,-13056,-7168,1024,7168,13056,13824,5632,-512,-8704,-8448,-6656,-11264,-5120,-13824,-13568,-10752,-7680,-4608,-3584,6656,9216,20992,20736,17408,10496,7936,3584,4352,7424,6656,10496,0,-8704,-12800,-5376,3584,13312,13568,7680,-8960,-17920,-12288,-5632,4864,12032,20480,20736,13824,6656,8960,-3072,-512,4096,3584,8448,9472,16128,16384,20992,3072,3072,8960,-2048,-4096,-5632,-6144,-1280,9984,20992,22272,7936,6912,5120,2048,8448,17920,20736,11264,5120,2560,1024,2304,9216,11264,8704,5888,6400,4608,4608,5120,1024,256,-3584,4608,9472,1536,-4608,-12032,-11008,-6400,5120,12800,6400,-12288,-28416,-29184,-32768,-28672,-13056,4352,4864,1792,3072,-3584,-10496,-13568,-18176,-16640,-11264,-11008,1280,-2048,-4096,-11008,-20736,-23040,-24832,-17920,-19200,-23296,-21248,-16640,-9984,-2048,2560,8192,-1792,-9984,-10496,-2560,-2304,-7168,-2048,-6912,-11520,-7936,-2304,0,-768,-256,7168,4608,3328,6656,10240,6912,-2560,-3072,-2048,-4096,-2048,-4864,-3840,-4352,768,11520,11008,14080,-256,-21248,-31232,-26112,-19456,1280,16640,16384,20736,16896,14848,9728,6656,-8704,-6656,2048,5888,20992,25856,26880,17664,6400,3584,4864,-1280,-5120,-6400,-4096,-768,11264,17920,15360,13824,768,-3840,-5632,-3840,3584,17664,12800,3328,2048,-2304,6656,11008,17408,12800,8448,13312,11776,12288,9728,5632,-768,-3584,6144,12288,18688,8448,-6656,-1280,4608,12288,12288,15104,-5376,-31488,-29184,-30208,-28928,-15616,512,256,-8192,-9728,-512,-3328,-10752,-6912,-6144,-8704,-7936,9728,14336,9728,4864,-2816,-7168,-9728,-6400,-3840,-12800,-18176,-6400,2048,6656,9216,8704,-5120,-9728,-7168,-5120,-1536,-3584,-10240,-14336,-13824,-5376,9216,8960,8192,3840,1536,-3072,-2816,3072,6400,7424,3072,5376,6144,4864,13824,13824,4352,5120,8192,9984,14848,14080,-9984,-27904,-26880,-20224,-16128,3072,14592,6144,2816,9728,15872,8960,5376,-3584,-5120,-6656,3840,11776,6912,4096,2816,0,-5888,-5120,-7168,-8192,-14336,-6144,-512,3840,11008,12544,5376,-256,-4864,-6912,-1024,-2048,0,-5376,-11008,-11264,-3584,2304,8704,4352,-2816,-3840,-4352,0,1280,-768,-6400,-8704,-8192,-8192,-8704,-7680,-12800,-18432,-13056,-8960,-7936,-2560,-6656,-17664,-20480,-19712,-22016,-13312,-5120,-5120,-1536,1792,3072,2304,2048,-1280,-3072,-1536,768,3328,3840,3584,2304,2048,256,-2048,-1024,-768,1280,3072,3584,1536,3072,3584,1536,2304,1536,1536,2560,3584,4352,3840,3840,3072,1536,4608,2560,3328,3072,1792,3072,3328,6144,6912,7936,5632,4352,3072,512,0,0,768,2048,1536,2304,1280,256,768,-512,0,512,-512,-256,768,1024,256,-1024,-1280,1536,2560,3584,3840,1792,2304,2304,2560,2816,2048,2048,2816,4096,3072,3328,3840,2816,3328,3072,3072,3072,3840,2304,512,1536,1536,1536,1280,1280,1792,0,-2816,-3584,-4352,-4352,-4864,-6656,-8448,-7424,-7424,-8448,-8192,-9216,-8704,-8704,-8192,-6656,-5632,-4352,-3584,-3072,-3328,-3328,-3328,-3840,-4096,-4096,-3840,-2560,-2304,-1536,-1792,-2048,-2560,-4096,-5888,-6144,-5120,-4864,-5632,-5632,-6912,-6912,-6400,-6656,-5632,-6144,-5632,-4352,-3584,-2304,-2048,0,1792,4608,7680,6912,7424,7424,8960,11264,8960,10496,12288,11008,11776,10752,11008,10752,8448,8960,9728,10496,10496,10240,12032,11520,9728,8704,7168,7168,5888,4608,5632,4608,3328,2816,2048,1792,768,-768,-768,-512,-1024,-1536,-1792,-2048,-3328,-4096,-3584,-4352,-5376,-5632,-5888,-5888,-5376,-6400,-7168,-6400,-6144,-6656,-6656,-6656,-7680,-7680,-6656,-6656,-5888,-5888,-5888,-6656,-7168,-7168,-6656,-5888,-5120,-5376,-5376,-5632,-6400,-5632,-4864,-2560,-1792,-2304,-2816,-2816,-2304,-1280,-768,0,1280,512,0,512,1280,1024,1792,2048,3072,3072,2048,1536,512,-768,-1792,-1280,-1536,-2560,-3328,-3328,-3584,-2560,-3328,-3072,-2304,-3072,-2560,-2304,-1536,-768,-768,-256,1280,1024,1024,1280,1792,2304,2560,3072,4096,4864,5888,6144,5376,5632,6400,6400,7424,7936,6912,6144,6400,6656,6400,6912,7424,7168,6656,6656,6400,5888,5120,5120,5376,5376,4864,4608,4608,4096,3328,2048,2048,1536,2816,3072,2560,1792,2048,1280,768,768,-1024,256,1536,4096,3072,2304,1024,-1280,-10240,-12800,-11776,-12544,-15104,-14080,-9728,-7680,-1536,-7680,-12032,-8448,-3584,-2048,-1792,4096,5888,6912,1024,-3072,10240,3072,0,7424,11776,9472,5632,12544,14336,14848,16128,11008,1280,256,-1792,-9472,-17920,-12544,-13568,-15872,-17664,-15104,-13568,-11008,-10752,-13312,-9472,-8192,-7168,-5632,-1536,-4096,768,-5888,512,8448,7168,4608,5376,13312,12288,9472,16896,20480,16384,16128,8448,1792,-768,-7424,-12544,512,3072,-2560,-1792,-2816,-7168,-11008,-9728,-6912,-8192,-4864,-9216,-17408,-11776,-9728,-10496,-8960,-2304,-256,3584,6656,5888,6656,7168,7168,2560,5376,6912,8704,6144,6912,11008,7168,5632,2048,11008,7680,3072,4096,6144,-3328,-8192,-768,-6400,-7936,-5632,-2048,-9216,-11008,-11008,-14080,-17920,-10752,-7936,-10496,-9472,-9728,-3584,-5888,-5120,768,6400,6400,9984,14080,7936,5632,8192,10496,15616,18432,16640,11264,10496,17152,13056,9984,11776,8704,8448,5632,4352,-1280,-6912,-7936,-11776,-10240,-6400,-6656,-7936,-4096,-4096,-7424,-11008,-9472,-11776,-9984,-3584,-8704,-10496,-15872,-14080,-12288,-9216,1792,7936,5632,-1792,8704,8704,2048,7424,14848,11008,8960,15360,11008,8448,6912,9472,3328,5120,7424,5376,1792,768,4352,512,768,-2560,2304,-2304,-8448,-8192,-11264,-17664,-18688,-14592,-15104,-15360,-19200,-17920,-17664,-13312,-15360,-12544,-4608,-4608,-6144,-1792,5376,-2560,3072,9472,3840,3840,10496,9472,8960,9216,12800,10752,4864,12032,7680,6912,6656,8448,9984,2048,-1792,5376,9984,9472,12288,8960,4608,3072,4864,2816,3584,3840,-2560,-5376,-3072,-2304,-5632,-1536,-2816,-6400,1280,512,-3584,-6656,-3072,-2304,-7936,-4608,-8960,-12800,-9984,-7680,-7424,-7936,-10240,-8960,-7680,256,2304,-1280,-3584,-4864,3328,-2304,-768,8960,13568,6656,8448,12800,6656,5632,9472,10752,3072,2560,6144,2560,-5632,2048,6912,6400,5632,2816,5376,-3840,-7424,-2560,-8960,-16896,-11520,-7936,-11520,-13568,-15104,-14592,-13568,-15872,-15360,-14592,-18432,-12800,-15872,-16384,-12288,-17152,-15104,-15872,-13824,-11776,-7936,-4864,-6144,-3584,-4864,-4864,256,-512,2560,3328,-1792,2304,-1792,-2816,3072,5888,4608,3840,11776,13824,14336,17152,15104,12288,8960,14336,21248,17664,24064,24832,14592,12032,11008,24832,23808,17408,23808,21504,13824,10240,18432,17408,17920,16384,1024,-12032,-11008,-4096,2304,256,-1280,-2304,-6144,1536,1792,9216,10496,5888,8704,8704,12800,7936,-1024,-1280,-5120,-5376,512,5376,6400,-2816,-1792,-512,3072,9472,9216,9216,-1280,-2048,256,-7424,-8192,-3584,-3328,-10496,-13568,-10752,-15360,-14080,-3584,-4608,-6912,-8448,-9984,-14080,-15360,-5888,-3328,-6400,-3840,2304,-2816,-13312,-13056,-3840,-1024,-3840,0,-1024,-10496,-16896,-18176,-13568,-9472,-6400,-8704,-26112,-32768,-32256,-32512,-18432,-6656,-6656,-14848,-24064,-22016,-15360,-768,-256,-768,-512,-10240,-5888,512,-256,2304,256,-768,2816,10496,22528,16640,10496,2816,2560,15872,20224,26880,30464,26368,17408,11520,12800,10240,8960,12544,12032,8960,6656,12800,22528,20736,23808,27392,28416,27904,21504,25856,23040,12800,16640,26624,24320,19712,18432,14336,11520,9216,17152,21248,13056,10752,10752,4608,1536,-1024,5120,4608,-2816,-10240,-27648,-32768,-30976,-12800,-768,-7936,-12032,-24064,-26112,-19968,-12288,-768,-8960,-11776,-13056,-24832,-18688,-14080,-13824,-17920,-25344,-20224,-23040,-21760,-11520,-8192,-11264,-22528,-18944,-8704,-7168,-6400,-9728,-12544,-17920,-20480,-14592,-14336,-14848,-19456,-19712,-13056,-10496,-1536,-1024,-9728,-9984,-4608,5120,11008,8192,4096,256,-7424,-8704,-768,5376,9728,9216,3840,256,-3584,1792,7424,11264,17152,6912,-1792,512,5120,9984,8704,12544,13312,4096,-5120,-9728,-3584,-1792,6144,16896,12544,7936,-256,4096,10752,9984,25856,30976,22016,11264,4352,12544,12800,14336,20480,16896,13568,7936,11776,14592,8704,10496,8448,11520,10752,15104,26368,23808,22528,11776,1280,4864,13056,21248,18944,11008,7168,256,256,5120,2048,256,5376,10240,9984,10240,5120,3584,1280,-2560,4096,4352,2048,-2048,-6912,-7936,-14336,-15360,-10496,-7424,-5376,-6912,-6400,-8448,-10752,-10752,-12544,-8704,-10496,-10240,-8192,-13568,-15616,-18432,-18688,-18176,-15104,-10496,-9984,-13824,-18688,-21248,-19200,-14336,-11520,-11008,-14080,-17408,-18688,-15872,-12288,-9216,-7168,-6144,-6912,-7680,-6144,-4608,-1024,-256,-3328,-5888,-6912,-5632,-3328,-5632,-6912,-8448,-11264,-11264,-8960,-5888,-5888,-7424,-8448,-8704,-7936,-4352,-1280,-1280,-3328,-5376,-6656,-6656,-5632,-5120,-5632,-5376,-5632,-5632,-5632,-5632,-4608,-3840,-4096,-4352,-3840,-1536,512,-2048,-2560,-256,1024,2048,2560,3584,5120,5376,4864,4352,3840,3840,4352,5632,6144,6656,6912,6144,5632,5632,6400,7424,8960,11520,13312,13056,12288,12032,12288,12800,14336,14592,13824,10240,5632,8704,10496,10752,12288,13824,15616,15616,14848,12544,11520,12288,11776,11264,12032,11520,11008,9984,7936,5888,3840,3328,3840,4096,3840,2816,1024,256,1024,2560,3072,2048,1792,-256,-6400,-7168,-5632,-4608,-1792,512,1792,2048,2048,-768,-2560,-2560,-1536,-768,-256,-512,-512,256,256,-256,-1792,-2816,-3328,-3840,-4096,-4864,-6144,-8192,-8192,-7424,-7680,-7168,-7424,-8704,-14848,-19200,-17152,-15104,-12800,-9472,-7424,-6400,-6144,-7168,-8192,-8704,-6656,-5120,-5632,-5888,-6656,-5632,-5376,-7424,-7424,-6656,-5120,-5376,-5632,-6144,-7168,-6656,-6912,-4864,-3840,-4096,-5120,-5120,-7680,-13568,-13568,-11008,-8192,-6144,-5376,-5120,-5888,-5888,-5376,-4864,-3328,-2816,-2048,-256,1024,1024,512,-512,-256,512,1024,2560,1024,1536,512,1536,1024,2048,3072,3072,4608,4096,3840,-2304,-512,3328,5888,7168,7936,7168,7424,7680,6144,6400,4096,5376,5632,6144,7168,9216,8448,5888,6400,6656,8704,12288,13056,12544,12288,12032,9728,9728,9728,10240,7168,3840,7168,3584,1280,768,8192,6912,6144,7680,9216,3584,-3328,3584,-1024,5376,2816,3584,15104,10496,2560,3584,2048,2304,1280,-2304,-5120,-11264,-13824,-13568,-10752,-4608,256,-5376,-768,-4096,-3328,-256,-2048,-5376,-11776,-14592,-16640,-10240,-10240,-8960,-8960,-768,2304,5632,4096,-2816,-1024,-5376,-8192,-12544,-6656,-6400,-8192,-8192,-6400,-5376,-6912,-8704,-5376,-512,-4864,-11776,-16128,-13312,-12544,-4608,-5632,-5120,-4864,-512,512,5376,9728,1792,7680,7680,10240,5632,2560,-1024,-512,6656,4864,4608,256,-768,2560,5120,2560,-1536,-1280,3328,4096,9216,8704,6656,10240,13056,13824,12800,17664,13568,12544,9472,14848,12544,8704,12544,17408,16384,10752,16640,12032,12544,11776,19712,15872,14080,15360,14336,12288,10240,14848,10752,10752,11776,15616,10240,11264,9472,7168,4864,3840,6912,3072,-1024,-1536,1792,1280,2560,4096,3328,1024,-3072,-1280,-5120,-7936,-9216,-11520,-8960,-7424,-10752,-12544,-5888,-8704,-3072,-1792,-4608,-3840,0,256,-768,-2048,-6400,-5888,-7936,-3584,-4352,-8704,-12544,-12544,-7936,-8960,-8704,-10752,-12032,-15360,-13056,-10752,-13824,-8704,-7168,-5632,-6144,-2816,-3328,-1792,-4096,-2560,-1792,-2816,-2816,-3840,-2304,-3584,-3584,-5376,-768,-2816,256,-1024,768,1280,512,3072,3328,1792,-512,-3328,-2560,2304,1280,1024,-512,-1536,-3072,0,-1024,-5120,-8960,-7680,-6144,-6400,-5376,-4096,-6656,-3584,-3328,-5120,-3328,-7168,-6912,-9216,-5120,-5888,-7936,-7680,-3840,-1536,-1536,-1792,-5632,-2816,-3072,256,2560,7168,5376,4352,4096,4352,5632,1536,1280,-1280,4608,3328,1536,1792,-3072,-3840,-768,1280,-2816,-3328,-3584,-2304,512,4608,5376,6912,6400,10496,6912,5888,6912,6656,11008,6144,9472,9728,8192,7424,12800,7936,8192,7424,9216,10496,10240,11520,4864,10496,4096,6144,5120,6144,6400,6400,9728,4608,8448,7936,6912,5376,5632,4608,2304,-768,-2560,-768,-1280,-768,-2048,-5888,-6400,-7168,-3840,-4864,-10240,-9216,-6144,-4096,-6656,-6912,-10752,-9472,-4096,-256,1024,-5888,-3328,-1536,1536,2816,1536,256,-4608,-2304,-512,-512,-4864,-4608,-6912,-6144,-4352,-6400,-6656,-8448,-8448,-7168,-4864,-5120,-5376,-3840,-1536,0,-512,-1280,-1792,-512,3584,3840,5888,2816,2304,5120,4352,4864,3840,5632,512,3840,5120,3584,1536,1536,4096,3328,4608,1536,3584,1536,2816,4352,4352,3072,1792,2048,512,-768,-1536,-2304,-2560,1280,-4352,-8192,-7680,-5376,-1280,-3072,-3840,-4352,-5120,-2304,-1024,-1024,-3072,-7424,-3840,-3072,-2560,-5888,-9216,-8192,-8448,-6144,-10496,-3328,1792,512,0,-2304,6144,6400,1536,-256,-3584,-256,2048,1280,2048,-1792,-1536,-2048,-2048,-5120,-11264,-9216,-12800,-1024,6400,2048,4608,-256,5376,9216,5120,7680,3072,4608,7424,7680,10240,2048,3840,5376,7424,5120,-8192,-12800,-12544,-4864,3072,5120,11264,13824,12032,14336,11008,8192,3840,-512,1792,3072,4352,-256,-5120,-512,1280,-3584,-14848,-20992,-12288,-5376,-3840,-5120,-2816,2304,-1024,3072,2304,256,1536,-4096,-3328,-5120,-4864,-5120,-3072,2816,2048,-4608,-15616,-17920,-9728,-8960,-4864,-2304,2560,10240,3584,2560,-1280,-2560,-2816,-4608,2560,3072,-1024,-3840,-1024,4608,512,-4864,-16640,-14080,-1024,-5120,0,-1024,4864,7680,4864,12544,9984,10752,6912,5120,8704,6144,6400,5376,9216,13312,8192,768,-16384,-10240,-5376,-6912,6656,11520,16640,9984,4352,8960,6144,2048,-1280,-512,5120,2304,1792,-4864,-3328,-1024,-4608,-7424,-17408,-9216,-12544,-13824,-1280,-1536,3584,-512,-4352,3840,1024,512,-7680,-4864,-512,-1536,3584,256,3840,0,-6144,-14848,-20480,-14848,-14848,-7168,5888,5632,8960,-1792,-5888,1280,-3072,1536,-3328,5120,7936,4096,6144,-2560,512,3840,-3584,-9472,-12288,-6912,-4608,-1792,5888,3584,11776,3328,8960,10496,768,6656,-1024,8192,8704,8192,10240,4352,9472,3328,-9984,-14336,-17664,-4352,3328,12800,13056,4608,8448,-4608,3584,2048,-1024,5120,3584,13056,6656,1536,-2816,-8448,6144,-3328,-10240,-13312,-16640,-3840,-6144,7168,2560,4864,6144,-6400,2560,-4352,-3328,0,-2816,12544,8448,9728,4352,-7168,-256,-14592,-14336,-16896,-8448,512,-768,10240,4096,3584,-7424,-13312,768,2560,10752,5376,1792,9472,3072,5888,-2816,-3072,1792,-7424,-7424,-15616,-10752,-7424,1024,11264,9216,8704,-9216,-4864,1280,256,6912,-1024,7168,13056,8448,5632,-8192,-6656,-6400,-7168,-7424,-8192,-1536,-256,6400,3584,1536,-2048,-12544,-768,6400,7424,7680,512,3328,2048,3840,-512,-1792,2560,-5120,-4864,-7168,-10496,-4096,-1792,8704,4608,3328,1024,-10752,3328,3328,4864,9728,7168,1792,5376,2048,-6400,-1280,-6144,1024,-3328,-14592,-4608,-5376,-1792,8448,-2816,-1792,-256,-13568,512,7168,3840,6912,7680,4352,1280,768,-2560,-2560,-768,-4096,-7168,-8192,-11264,-6656,9216,11776,10752,12288,-4608,1280,-1024,7936,9472,512,-1792,-8704,256,13056,11264,-12544,-9984,-7168,-6144,-13568,-8192,1792,-4608,3072,11008,5632,-5632,-15872,-17664,2816,18176,3584,10240,3072,-4608,1792,-14080,-4608,4352,6400,-3072,-4352,-256,0,-1792,0,1280,12032,10240,-2304,0,-10496,-1536,15360,23040,5376,-4096,-1280,-8192,-12032,-19968,-18688,-6400,-5632,-6400,-512,7680,9728,-8704,-1280,256,-768,11008,15104,11264,-3584,5376,5120,-3584,-1792,-256,2304,1280,-3328,-6400,-7680,-9984,-512,512,3072,7936,6656,10752,3840,-3072,-8448,-11264,9216,8960,-8448,-3584,5632,-1024,-19456,-15104,-2816,2816,5888,0,-7168,4096,10240,6656,-768,-2304,-6144,-1280,5632,5632,18944,4864,7680,15104,11264,13056,2816,-768,512,5120,-2048,-11008,1536,-2048,-8448,-7168,-6144,-5120,-3584,-23040,-27136,5632,-1536,512,-1024,-10752,256,-1024,-3328,1280,9728,-2816,-6144,11520,2304,-7168,3840,6912,7424,18688,11008,10240,13568,3328,1536,9984,9728,-11008,-5376,-11776,-10752,-1280,-18688,-20736,-10752,-6144,-16896,-19712,-7424,-512,1280,-6656,-9472,0,-1280,-10240,-4608,9472,12544,23808,12288,4608,5120,1024,24576,27136,19200,13056,3328,3840,16384,17408,3072,-512,1536,9984,8704,2816,-512,-18432,-18944,-11776,-9472,-7936,-10496,-16128,-17152,-8448,-11776,-6144,-5120,-3840,1024,-5120,-5888,-9472,-8448,-1024,6400,1536,-5376,512,-9216,-256,15360,18432,20224,18432,18432,8704,12800,12032,4352,-1792,5888,4096,-15616,-18944,-17664,-23296,-15616,-9728,-15104,-7936,-3584,-6400,-14080,-12288,6144,13568,8192,-512,-5120,-2560,-4352,1792,1280,1280,11008,6912,1024,3072,4096,12544,14592,4096,-2048,4352,9216,7424,-7936,-17920,-10496,-7936,3840,-5120,-7680,-5376,-768,6400,2048,3840,12800,24576,18688,10496,6144,14848,20480,11520,3072,256,1536,16640,17152,6400,2304,5120,19968,12288,-4864,6400,15616,12032,-1280,-22528,-14592,-10752,1536,-3328,-19456,-16128,-7936,9216,4096,-10752,-11776,8960,13824,5632,-5376,-12800,-7424,-6144,-4608,-10496,-20224,-14592,-6144,-5376,4352,7680,9984,1024,-13824,-9728,-7424,-6656,-6144,-21248,-30208,-30976,-18944,-8704,-21504,-26368,-26624,-16128,-3072,1536,256,3072,7936,3584,-768,-5376,-4352,-5632,-256,3072,-3328,-6400,-2560,-2816,-1792,9216,25088,26368,9728,1024,2304,2816,3072,3584,-1792,-768,-768,1792,-5376,-11520,-3328,5376,16128,12544,8704,19200,28928,26368,11776,-1280,-3840,1024,13312,17920,14592,8448,11008,14848,12288,25344,28672,23040,14848,17664,22528,1792,-7168,-7168,-10240,-9216,-8448,-3072,-8960,-18944,-14592,-4352,11008,13824,6656,-512,4096,7168,5632,1536,-12800,-16640,-22784,-17152,-7680,-7936,-512,-5120,-16128,-6400,7424,16640,3072,-10752,-3328,-2816,-5632,-10240,-26112,-32768,-32768,-30208,-14848,-20992,-27392,-28160,-19200,1792,4608,-2304,-10752,-15872,-6912,256,-1024,-5632,-15616,-20736,-17664,-8448,-768,2048,-4608,6400,12544,12800,9472,2048,9728,2816,-3584,-5632,-11264,-10240,-12544,-13568,-5376,-6400,-1024,1024,3328,8448,8704,14080,19200,16128,10240,10240,5376,6400,8960,13312,11008,1536,3840,15360,18432,29440,32256,32256,27136,12032,14336,19712,21248,14336,2048,-7680,-2560,1280,7680,3328,-1792,-3840,-5120,7936,19200,25088,25088,16128,10496,9472,3584,-256,-5632,-1536,1024,3584,768,-768,-3584,-1280,12800,20480,18688,-768,-9728,-3328,-5120,-6656,-11008,-19712,-27136,-32768,-22272,-15360,-17152,-19456,-23040,-18944,-11008,-512,7168,5376,-8960,-19712,-20224,-16128,-9472,-12032,-15616,-13312,-7936,-2048,-7680,-9728,-3072,1536,4608,-1280,-6144,-512,-8704,-17152,-17664,-18176,-17152,-27648,-26368,-18688,-16128,-6912,-2560,-256,-256,-4352,0,8448,11520,11264,768,-7680,-7936,-5888,-1024,512,3840,7168,8192,14336,25344,26880,23552,12288,9216,20480,13824,4352,-512,-3072,-1536,-2304,-512,256,-5888,2560,14848,22528,23552,11776,8192,11264,17664,21248,17152,14336,7424,256,2560,7168,16384,17664,17920,27904,30464,32512,29696,20992,14848,17152,15616,6656,1536,-3584,-10240,-8448,-2560,512,-5888,-11008,2816,12800,18432,13056,5376,4608,6656,9728,6400,2304,-2816,-11008,-11264,-7168,-5632,-4864,-9728,0,9472,13312,15872,7936,-2560,-3840,-3840,-6656,-6400,-12288,-21504,-24320,-19200,-18944,-21504,-23808,-15104,-5376,-1024,1792,-6912,-12800,-13056,-6656,-1792,-3840,-11264,-21504,-24064,-15616,-9984,-6400,-8448,-8192,1792,6912,16128,10496,-5632,-14592,-15872,-17152,-15104,-16896,-26624,-29440,-24576,-17664,-19968,-21248,-18176,-7936,-1024,5632,4096,-4864,-9216,-6144,1280,4096,512,-12288,-19968,-14336,-6144,-4608,-3072,-1536,5632,8448,15360,23552,14336,3584,-4608,-7936,-256,6144,-1024,-11264,-9472,-3328,-7168,-7424,-5120,768,4608,9984,19200,15872,7168,3072,8704,18944,23552,15360,2816,-768,6912,12032,14848,15104,14592,17920,20224,30464,30208,16896,6400,-2560,3584,14080,8448,-2816,-9216,-4096,-4096,-3840,1792,768,5120,10752,22272,27136,17664,8192,2048,11264,20992,15616,3328,-6400,0,5888,9216,11520,6912,8960,11776,22528,26624,15360,5888,-8704,-10496,-1024,-768,-5376,-13056,-14336,-13824,-11264,-4864,-8192,-11520,-6656,2048,9984,8448,-256,-8704,-7424,2304,1024,-2048,-5120,-10240,-8448,-2048,4608,-1280,-7168,-2304,8704,15104,7168,-1536,-13056,-22016,-13056,-6656,-6144,-12032,-23040,-28416,-20736,-9216,-12288,-18688,-16896,-5376,1536,4864,4352,-3328,-8192,-7168,-1280,512,-4864,-12288,-15616,-7168,1024,-3840,-7168,-8448,512,7680,8960,7936,-3840,-19200,-22528,-13312,-7424,-7680,-17152,-28416,-23552,-11520,-11264,-14848,-15104,-6400,512,7424,11776,4608,-256,-4608,-3584,256,-256,-3072,-8192,-3328,5376,6400,9472,5888,7936,14592,19712,19456,10752,1536,-4864,-1792,3840,4352,-2304,-9216,-10752,-3328,-2048,256,2048,1536,5888,12032,15104,14080,11776,7168,7424,11008,13824,13056,8704,5120,12800,16384,20992,20480,20736,23808,27392,27648,19456,14848,6656,7168,4608,8448,5120,-3584,-10752,-7680,256,5120,14336,13312,11520,5376,8448,11008,13312,6656,4608,5120,1024,7168,7424,1792,-1280,-1024,1024,8960,9472,13056,9728,10240,-2048,-3072,256,-9728,-5632,-256,9472,2816,-3328,-15360,-18432,-6400,3584,-4352,-10752,-15104,-19968,-11264,-7168,512,-15360,-17920,-11520,-4352,5632,-1536,-7936,-14080,-10496,0,6912,3584,3584,1536,-3840,-7936,-7424,-9472,-15616,-12032,-7168,-2560,-9472,-21760,-25856,-15872,-1792,-3072,-6656,-4864,-12288,-7168,-2048,-4352,-3328,-18176,-15616,-12032,-3584,3072,-5376,-6656,-7168,-2560,6656,14848,14592,13568,6912,6144,7168,4608,1280,-6400,-8704,-6400,-8704,-12288,-15872,-16128,-18432,-19200,-21504,-9472,-6144,-14848,-10240,-13056,-6656,-10496,-11264,-4864,2816,5376,10752,13056,5120,4608,6912,18176,19968,20480,14336,7424,5632,8192,6400,3072,-1536,-3840,-2048,0,8192,2560,-4864,-12032,-8960,-2560,4608,2048,1536,1280,-1024,2048,768,2816,-2304,6912,13568,19968,12800,7424,15104,19456,26368,26112,30464,25856,17408,13312,17920,16896,7936,-1024,-4352,-1024,2560,9728,3584,-4608,-9984,-8960,2816,8192,10496,3840,-4864,512,3840,5888,-2560,-11520,-3328,2560,9984,5632,3840,-2560,-11264,3328,15360,19456,1536,-10240,-7424,-1792,2560,-11008,-22016,-22016,-11520,-1024,-3840,-11008,-21248,-27136,-21760,-9984,-6144,-10496,-18176,-17664,-9216,-8192,-8960,-18688,-16128,-8960,1792,8960,7680,2304,-11008,-6656,3328,16128,14848,1280,-8960,-4096,-1024,-6912,-11520,-16128,-14336,-8192,256,-1024,-5376,-16640,-18688,-7424,1280,6400,1536,-3840,-5120,-512,3584,-3840,-9728,-9984,-5632,7936,20480,17664,6144,768,6400,20736,25344,19712,11520,8192,8704,3328,-5888,-13056,-18944,-17408,-12800,-8704,-8960,-16384,-22784,-22272,-13824,-8192,-2816,-7424,-7168,-8448,-3584,-2816,-7680,-512,-4096,4352,9984,15616,14592,9728,12288,13312,17408,13056,14080,18688,14080,4608,1792,-256,-6656,-11520,-8960,-5888,-6656,-3584,-7424,-11776,-8704,-8704,-2560,-256,2048,4864,1792,6144,6912,8448,0,3072,11264,22016,25344,11520,18688,18944,16896,15616,19712,20480,13056,5376,6144,5120,0,-9984,-19456,-14080,-17152,-9984,-11776,-16640,-13312,-8704,-20224,-24064,-12032,-12288,-7168,-3584,256,-1792,0,0,7424,14336,14336,16128,9472,14080,10240,7936,6912,11264,7936,-8448,-8192,-2560,-2304,-5632,-6144,-10496,-12032,-9472,-6400,-10496,-14336,-13312,-12544,-14336,-12288,-8704,-7936,-4352,3328,3584,3840,2048,256,10496,10240,15872,16640,15616,10752,11520,14336,13568,18432,8192,11520,16640,10496,5376,4864,2560,-1536,-2560,-768,-9216,-10752,-6912,-11008,-11520,-11776,-7680,-10752,-6400,1024,3072,0,4608,2560,4352,8448,11008,12800,13056,15616,6144,8960,2304,9984,7680,-4096,1280,-1280,-4352,-4864,-3072,-10496,-13312,-9984,-14080,-16384,-17920,-19456,-20992,-20480,-13056,-16640,-16128,-17920,-11776,-3840,-1792,6144,2304,5888,9216,17152,16896,18944,15872,11264,14336,11520,18176,8960,9728,8192,4352,2816,-7680,-7680,-14080,-12800,-10752,-13056,-12288,-17664,-22528,-18176,-8192,-6656,-768,3328,4096,4352,9984,15872,14848,19968,18432,23808,19712,22016,22272,20224,18944,14336,21248,7680,8192,2304,-1024,-1280,-8192,-2816,-15360,-17664,-14336,-17152,-15616,-16384,-15360,-15360,-16128,-16896,-15872,-12544,-10240,-8448,-7424,1280,512,5632,7168,8960,12288,11264,17920,13824,16640,7680,9728,7936,0,1024,-6912,-8192,-14080,-10496,-8960,-13568,-13824,-17408,-17664,-14592,-18176,-17152,-14848,-12800,-9984,-5632,-768,-1280,512,3584,7424,8192,10496,7680,16640,16896,20224,16896,12544,18176,14080,23808,12544,12800,7936,5120,5120,-1024,5376,-1024,-4608,-4608,-4608,-8448,-11776,-10240,-8704,-8448,-5376,-6400,-6400,-2816,-2560,768,2304,4352,7168,2560,11008,9728,14848,14592,11008,15872,7424,13568,2048,3328,2560,-2560,-3840,-13824,-8448,-13824,-15616,-15104,-16384,-16384,-19456,-19200,-19200,-17664,-14592,-11776,-7936,-3584,-6400,-6912,-1536,-512,7680,8192,10240,12544,13056,15104,11776,17408,9984,13568,9728,4864,10752,3840,3328,-5632,-1536,-4096,-12800,-6912,-14592,-13568,-13568,-14848,-14336,-12544,-7936,-8960,-1792,-1024,-768,0,1280,3072,5888,12032,9728,10496,12544,8960,7424,8448,8960,7168,12032,8448,5888,8192,1792,2048,-1792,3328,-7424,-11776,-4864,-13056,-10752,-10496,-12032,-13312,-7424,-8960,-9472,-5120,-7168,-4096,256,2048,2560,6144,8704,8960,11520,11520,8192,6144,10240,11264,9216,13568,6400,5632,3840,-2048,-2816,-7424,0,-9728,-9728,-3328,-15104,-8448,-11008,-9984,-9216,-8192,-6400,-11264,-1536,-5120,1792,1536,2816,5888,3072,7936,4608,7424,7680,8192,6656,7680,8192,9728,7168,7168,8704,-1280,-768,-768,-1792,-1280,-6656,-6144,-8704,-11264,-11520,-14848,-11008,-10496,-8704,-6400,-8192,-2048,-2816,256,4352,2816,6400,4096,5888,6400,9472,12288,10752,9216,7936,9728,7424,3840,-2048,3072,2048,-512,1536,-5632,-2048,-4864,-7936,-6912,-11264,-10240,-11264,-7936,-5632,-6400,-4352,-8192,-4864,-1536,-1536,1792,7680,9216,10496,1280,-9216,768,6400,9216,2816,12288,14592,7936,5632,1024,20992,17664,1536,-5120,-3072,256,-20992,-22784,-16384,-14592,-9216,-20992,-26880,-8704,-1280,-10752,-8448,-256,6912,256,768,10496,18688,22784,15360,11264,16640,7936,-3840,-4608,-2816,-512,0,8960,1792,9984,8704,1024,8448,3328,-768,-17152,-11008,-2816,-18944,-24320,-14336,-8960,-20480,-27904,-15360,-2304,5376,11264,10496,15872,19968,13824,2560,15360,13312,6656,12544,10496,11008,8448,14848,2560,3072,-1280,-9728,-8960,-20992,-23296,-26880,-29952,-23040,-22528,-19200,-15360,-10752,-4352,512,8704,512,-512,256,11264,20736,22272,25856,18944,10752,10752,21504,20480,18688,11264,16640,12800,7680,14080,0,2816,-13056,-8704,-1280,-11520,-14848,-30464,-24576,-19456,-13568,-18944,-23808,-20224,-22272,-12032,1792,-2304,-8448,-9728,-1280,16384,14592,19968,15104,6656,11520,22528,23552,16896,14848,4608,6400,11264,11008,-6144,-14848,-4864,-6656,-6912,-4608,-10240,-19200,-21504,-17408,-12544,-9216,-11520,-13056,-15104,-10496,1280,3072,-3584,-9984,-7936,-2048,11520,13824,3072,-2304,4096,12032,16896,18688,17408,21504,20736,28160,26624,24832,17920,2304,6400,9216,12544,7680,6400,12544,256,-3840,2048,15104,14336,1024,7168,7168,10752,6656,-7168,-9984,-8704,-512,256,1280,4352,4608,-3328,-4608,2048,-2048,-3840,4864,15872,11264,-6400,-13056,-10496,-9472,-14336,-19968,-14592,-8448,-4096,-5120,-1536,5376,-1024,-13312,-14848,-1280,1280,-9472,-24832,-26112,-15360,-17408,-21248,-25344,-25088,-18944,-15104,-2304,4352,3328,-5120,-7936,2560,5376,5120,-4096,-5632,-5120,-8960,-5888,-5376,-1792,-3840,-6144,2560,17664,31232,19968,7424,6912,12032,13056,1792,-768,-1536,3584,3072,5376,7936,256,3840,3840,13312,18176,17920,23808,24064,28160,15616,2304,-3328,-256,6656,4096,8704,8192,9472,8448,7936,13824,14592,19968,13312,14080,14592,8704,4352,-14080,-16896,-17152,-11008,-4096,-5888,-9728,-16640,-7424,0,3328,1280,-2816,-256,2560,8704,5376,-4864,-17408,-29952,-27136,-22016,-9984,-9984,-15616,-13056,-8704,4864,14080,9728,-9984,-14848,-6144,-256,-5888,-20480,-28928,-32768,-29952,-20480,-14848,-13568,-14336,-6912,-1280,1792,5120,5632,8192,256,-1536,-6656,-4608,-8448,-16640,-15360,-15872,-6400,-3072,3328,8448,13568,19968,27648,23040,6656,8192,11264,9216,2048,-3072,-4864,-6400,-2048,5888,5376,256,4096,16384,26624,27392,23808,24320,26624,22528,15360,4864,4352,-1536,-3584,3840,8704,13312,6656,5120,13056,23040,29952,32000,23296,9984,2560,1536,5376,1024,-11776,-18176,-18944,-11008,-2304,-3584,-3840,-4352,-1024,4352,9728,17152,14848,256,-8704,-12032,-6912,-12544,-30208,-29440,-23552,-9216,-3840,-11264,-12544,-10752,-4864,8192,16896,3584,-9472,-20736,-18432,-12800,-20992,-26112,-30976,-29952,-27136,-23808,-13824,-6144,-8448,-8704,-7936,-3072,5376,7680,2816,-8704,-18176,-18944,-21760,-19456,-15616,-14592,-7168,-2816,2816,6656,8704,13824,22528,14592,4096,2304,1792,2560,-8448,-14336,-12544,-9984,-8960,-3072,4864,10496,10752,12800,19712,19712,22528,21504,16128,15360,6656,512,-2816,-4608,-512,2048,3840,5888,8448,12800,26624,31232,32512,26880,11520,9216,15104,17408,6912,-4352,-11008,-9728,-3072,3328,11520,11264,7168,6656,16128,28160,29696,26624,8448,-4864,-6656,-9984,-6912,-7936,-9216,-11008,-17920,-20992,-15104,-8192,3840,12032,14080,15616,5120,-3072,-1792,3584,-2048,-14080,-26368,-32768,-24576,-11520,-256,5376,-1792,-9728,-4352,11264,29440,32256,9728,-14848,-23552,-24832,-23552,-21504,-25856,-26880,-26624,-32000,-28928,-19456,-12032,-3584,4096,8192,9472,-256,-11776,-8704,-8448,-13056,-23296,-31744,-32000,-22016,-8960,256,0,-8704,-13312,-3840,19712,32512,28416,-3584,-24576,-26880,-21504,-13824,-13824,-17920,-21504,-24320,-24576,-12800,-1536,3840,7168,13056,20992,19712,5120,2048,3840,1280,-4608,-14592,-18688,-11008,-256,14336,24576,18944,8704,4608,24064,32512,32512,27136,2304,-11520,-13824,-2816,2816,3584,-1536,-8192,-10496,256,12032,18176,19456,20736,27136,32512,27392,15872,14080,4608,1792,-2816,-9472,-6656,0,9728,25600,28160,19456,6912,11520,31488,32512,32512,17920,-4864,-19456,-13568,-2560,256,1536,-8192,-19456,-16896,-3584,9472,12544,7680,9216,15360,22784,14080,5632,-7424,-15616,-14848,-23040,-22528,-18688,-11264,1792,11264,8704,2816,-4352,6144,27136,32512,20480,-4864,-24832,-32768,-22272,-17152,-14080,-13568,-24576,-29952,-23552,-11520,3584,6656,1280,2560,8960,12032,6912,-7168,-24320,-26112,-26112,-28928,-24832,-19200,-8192,4608,5120,2048,0,1280,15360,29184,24832,6400,-17152,-32768,-29952,-20224,-15616,-13568,-21504,-27392,-23040,-14848,1280,10752,4608,-1792,2304,12800,18432,7168,-15360,-26112,-25600,-25600,-16896,-8192,-2304,6912,9984,9728,10752,10752,17152,30976,32512,24576,3840,-15104,-20480,-12288,-7168,-2816,0,-11264,-13056,-6912,7424,23808,22528,13312,12032,17920,26368,26624,10496,-7936,-17152,-20992,-13056,1536,6656,12032,17152,18432,21248,19456,21760,31488,31488,30464,20736,1792,-12544,-16384,-11008,-3840,5120,-768,-9984,-7680,1536,17920,26112,20224,13568,11008,16128,26624,18176,-4096,-23296,-29696,-22784,-7168,5376,10752,12544,6912,7680,14592,20480,26624,27648,19200,10240,-6400,-20480,-20480,-10240,-4352,-4352,-12544,-19968,-14336,-2560,13568,15872,9216,-2816,-2560,256,7680,17408,4096,-9728,-24832,-32768,-22784,-5888,4864,7936,-6144,-14080,-3328,6144,15872,22272,18944,11776,-4864,-24576,-12544,256,6656,4608,-19968,-32768,-26368,-11008,6400,14848,7168,4864,-5632,256,8704,14080,11264,-11776,-27136,-32512,-24576,-10752,6656,7936,-3328,-20480,-11008,8960,21760,30976,30720,19712,-3584,-26624,-28928,-16128,-7168,-3328,-18944,-30720,-22528,-256,17664,17408,8960,0,3328,12544,16640,17920,3072,-11520,-23808,-32256,-29440,-11776,7424,8192,1536,-10752,-8960,3840,11008,19456,21760,11520,4608,-14848,-25088,-15872,-1024,4352,-20736,-31488,-29440,-5888,13312,6912,-1792,-15872,-9984,7936,20736,9984,6912,-5376,-22784,-28160,-20992,1536,6912,9728,2816,-5120,-13824,3584,13824,21760,26368,17408,14592,-8960,-21760,-15104,3328,2816,-7936,-25088,-25600,3584,24832,29184,14848,5120,7680,19968,29440,26624,20480,6144,-12544,-17408,-22528,-13312,6400,18432,13824,3584,5888,20736,32512,26368,28160,21504,25088,24832,-256,-17408,-7936,8704,14336,-7168,-29184,-8192,13824,29440,23808,3584,-8448,12032,29952,24320,16384,-5632,-15872,-20224,-18944,-15360,5376,8960,256,-1792,-8192,1024,5120,6656,8448,11776,15616,13824,-14336,-17152,-7424,-4864,-5888,-12288,-24832,-22784,8704,22784,17408,-8960,-20480,-15360,12800,17152,6656,-7424,-21760,-18432,-29440,-32768,-20224,0,-1792,-7936,-12800,-3584,13568,18176,10752,1024,7936,12544,5120,-20480,-30976,-15616,-3584,-5376,-25088,-32768,-19456,9472,30208,11776,-13824,-12544,13568,29440,14592,-7168,-23296,-22272,-14336,-7168,-10240,-7424,-9216,-8448,2304,6144,14848,11008,1792,-256,8960,17920,14336,-13056,-32768,-22016,0,11264,-4864,-30464,-29440,1536,26624,18176,-12544,-25344,-15616,12032,23296,9984,-13568,-23808,-11520,-3584,-1792,1280,-256,-6912,4864,10752,21760,24832,6400,0,6144,18176,23552,4864,-24320,-18176,2816,12288,256,-25088,-32000,-4608,24576,29440,17408,-7680,-7936,7936,26112,21248,6400,-512,-4864,512,3072,6656,1536,-1280,768,11776,22528,26368,16640,6144,9472,17664,24576,16640,3840,-1792,3072,4352,1024,-9216,-12288,-4608,5120,8960,4096,-3072,-8192,1024,2304,5632,3840,-512,-3072,-4864,-5120,-7936,-6144,-6912,-9472,-10496,-3072,-2560,-768,-3072,-5888,-2304,-512,4864,6400,1792,-768,-5888,-3584,768,-3840,-6144,-10496,-5888,-768,1024,-1536,-11520,-8192,-3584,-1536,3584,-512,-6144,-8448,-12800,-6656,-3328,-4608,-1024,-2816,3328,9984,10240,5120,8448,5376,11520,14336,13568,11520,4864,8448,4352,8960,4352,-2048,-4352,4096,8448,10752,6912,1792,6400,7424,14080,11776,8448,3072,1792,-512,-256,1024,-1024,-4864,-4352,-256,-1280,-1280,-4864,-5376,-6144,4096,2560,1792,-256,-3840,-2816,-6400,-3840,-8448,-4864,-6144,0,-2048,-4864,-6144,-8960,-256,-2048,256,-4096,-4864,-1024,-2048,1280,512,-512,1792,0,-768,1536,-512,1280,-2048,-5120,-5376,-5888,-3584,-3328,-5376,-8704,-9216,-9216,-3840,-4352,-1024,-2816,1024,2048,2304,4608,2048,3072,4352,9728,7168,9216,6400,7168,6912,6656,7168,3584,6656,6400,5888,5120,10752,8960,2304,5888,2048,3328,2304,-256,-1280,-6144,-1024,-4864,-4864,-4608,-7680,-3584,-4096,1024,1536,-512,-256,-768,1280,-3328,1024,-2560,-4352,768,-7424,-4096,-8960,-6144,-4352,-3072,3072,-5120,-512,-5888,-3328,-6656,-7936,-3840,-5120,768,-4864,-2048,-3328,-2304,-512,-2816,768,512,2816,-1024,-3328,-1024,-5632,-1024,-6656,-5632,-4352,-5632,3840,-1280,4352,768,256,3584,2304,6400,5376,7680,2304,3072,256,2048,5376,2048,5888,3584,5120,4864,4608,2816,2560,6144,7168,7680,5888,4096,4608,5376,6656,4864,4608,3584,256,4352,256,512,-256,-2304,-2560,-2048,768,256,3328,0,768,0,-2816,-3072,-5376,-3584,-4864,-6912,-7424,-8960,-8704,-9216,-5632,-3072,-5376,-2304,-4864,-4608,-5120,-5120,-3328,-3584,-1792,-5120,-4096,-4864,-3072,-3840,-4352,0,-512,0,-1536,-2816,-2816,-2560,-1536,-4352,-3840,-1536,-1024,256,256,512,-512,768,256,512,2560,1792,3328,1536,1280,2560,2304,3328,2304,3328,2560,3840,3584,2048,2048,512,2304,2048,3328,2560,2304,2816,1536,2560,512,1792,1280,-256,1024,256,1536,-1024,-512,-768,-768,256,-1280,-256,-1536,-1024,-1280,-256,-512,768,512,256,-512,-2048,-768,-1536,1024,1792,256,256,-2048,256,-1024,-768,-256,-2048,2048,0,2816,256,256,512,-512,1536,-1536,1536,-1024,256,0,-256,512,-2304,-1024,-2560,-512,256,256,-512,-1792,-256,-512,1280,1792,2304,1024,768,-1280,-1792,-1536,-512,256,-768,-512,-2048,-1280,-1536,-512,-1024,-256,1792,1280,1792,2560,1280,256,-1280,-1280,-1792,-3328,-768,-2304,256,-512,-1792,-256,-1536,1024,768,1024,1536,1280,1280,-512,-256,-1024,-768,512,-512,256,-2304,-2304,-1024,-512,256,-512,-256,-512,-512,-1024,-256,256,-512,512,-256,1280,2048,768,768,256,0,-256,-1280,-512,-256,-1024,-1536,-1536,512,-256,-1024,512,256,2048,1024,-1024,-768,-1792,1280,0,2048,1280,256,512,-2560,0,-1280,1024,512,0,1024,-1280,512,-1536,-768,-768,-768,768,1024,3584,768,256,-512,512,768,-2048,-1536,-1280,512,512,-1536,-768,-768,-512,512,256,2048,1536,256,0,-1024,768,0,256,1024,0,0,-1792,-1280,-1536,-1024,0,-256,256,768,0,256,-1024,-1280,-1024,-768,768,1280,1792,0,1024,512,768,-1024,-2304,256,256,1792,-1792,-1024,-256,-512,256,-1536,768,0,768,768,-1280,0,-1024,512,768,0,256,-2560,-768,-1024,1280,768,-256,1280,-256,1024,-512,0,-1024,-768,-512,-1024,512,-256,512,256,256,0,-1024,-768,-768,0,0,768,1024,2048,1024,-256,0,-1280,-512,-2304,-1792,-3328,-2304,512,1792,4352,2048,2816,1024,768,512,-1024,256,-512,-256,-1792,-2816,-2816,-1536,-2560,-3584,-1536,-4608,-4352,-2304,-1280,-2048,-5120,-7168,-3840,-768,-2304,-256,4608,7680,512,-512,8448,13568,4608,-7680,8192,25600,16640,3840,-9728,-11520,-11520,3072,7936,-6144,-5120,-1280,12288,3584,-5632,-2304,-7680,-512,1792,4352,0,-7424,-512,-5120,-2816,-7936,-16640,-11520,-4864,-1536,2560,-1792,-13312,-12544,-2816,11008,11264,4352,-2816,-1792,3584,-7424,-12032,-14592,-13056,-5376,-12544,-9472,-5632,12544,8448,1536,-2816,-7424,3840,4864,3584,-3840,6400,16128,17408,13568,9216,9984,7936,12032,23040,11776,7424,4352,17152,20224,12288,15872,15360,19456,14336,18688,14592,6656,-4608,-7680,-9472,-5888,1536,0,-3072,-768,2304,3584,-1024,-8192,-12288,-13312,-15104,-16128,-11264,-9728,-7424,-15872,-13824,-11008,-9984,-5632,-4352,-6656,-16128,-20736,-6656,-3328,-3328,-13312,-5888,4608,3328,8192,0,3328,-10496,-6656,-12288,-7168,7680,2048,-1024,-6400,4352,6912,11008,4864,-10240,-11264,-7424,11520,15616,11520,8192,256,9472,10240,23296,15104,9216,8448,-2816,5120,1280,12544,18176,14848,18432,15104,15616,14336,9984,6144,-1792,3072,-4352,-11008,-10496,-15616,-18944,-16384,-768,8448,5120,-7936,-22016,-31488,-22784,-10240,-7680,-10240,-13568,-12288,-9984,2048,7936,-7424,-12800,-19200,-16640,-16384,-18176,-11264,-11520,-3840,-3072,1280,1792,2816,1536,-2816,-4352,-512,-7168,-6656,-256,-10496,-12800,-6656,11520,19456,4352,-4352,-3584,-5376,6144,6144,11008,5888,15104,21760,14336,23040,21248,20736,5888,-768,3584,10496,15104,13824,7936,13568,22016,25856,15104,4352,0,7680,14336,11008,5120,-17152,-4352,-3584,-256,-1024,0,15360,4608,-1792,-12288,-11520,-12288,-10240,-11520,-17152,-3840,5376,11264,6400,2816,-4352,-11008,-6912,-10240,-2560,-11264,-10752,-10240,-3072,14336,3840,-7936,-22016,-13824,-5120,3584,1792,-8704,-25600,-30720,-14592,-12288,-9472,-7424,-2816,1536,-8192,-10752,-6656,-11264,-10496,-17920,-11264,-3840,13056,19456,7936,6656,1792,7168,3584,768,256,1792,7168,6400,10496,22016,27648,19968,4608,3840,5888,19200,20480,15104,2816,-16896,-768,1792,10240,6144,6656,15616,12032,16640,5632,3072,-6400,-5888,-1536,3584,17920,17664,13056,7936,7936,10752,8192,5632,1280,-4608,-2048,256,2048,7936,11008,7936,1024,-5120,1024,8448,8448,-3072,-9216,-18944,-24832,-15872,-16896,-14592,-12544,-4096,-4608,-7680,-11776,-16896,-20224,-24064,-19456,-14336,-4608,0,-3584,-9216,-11008,-10496,-9984,-12800,-19712,-28160,-25088,-21504,-16128,-4608,-2048,512,-2304,-9984,-15872,-14336,-5888,-11008,-13824,-15360,-29440,-27648,-20736,-16128,-17920,-11520,-4608,-4608,1280,-5888,-11776,-19712,-17920,-11264,512,11520,11008,7424,2304,5376,7424,11008,4864,-2304,-6144,-3328,3840,10752,19200,20736,25600,19968,12032,7936,9728,17664,9216,13568,8448,-4352,2560,2816,6656,4864,12800,14336,16128,19200,9472,5888,-2048,1536,9472,18176,24832,24832,20480,16896,11264,14848,10496,9728,10752,7424,8704,5888,19456,19200,24064,22784,9984,3584,8448,18432,11520,6656,0,-12544,-10752,-7168,-8448,-7168,-10496,-10240,-6144,3072,1536,-3840,-11776,-16640,-12288,-3072,2048,256,-512,-768,-1280,-3072,-1536,-7936,-3328,-7168,-5888,-7424,-2560,8448,2816,6656,-1024,-9984,-12032,-1792,512,-7424,-7936,-18176,-27136,-18176,-17152,-15360,-16896,-16896,-15360,-14080,-6912,-12288,-13056,-18176,-23808,-22272,-12800,-4608,-1792,-2816,-5376,-8960,-6912,-6400,-8192,-7936,-14080,-12800,-14336,2048,8448,4864,3328,-6400,-10240,-5120,7168,4096,-256,-3328,-17664,-17664,-10752,-11520,-7936,-8192,-3072,-2560,1792,768,-3072,-1792,-5120,-5376,-2304,8960,14848,13568,11008,4608,1792,8448,8960,13824,9984,7424,2304,6400,24576,23552,25856,21248,12544,7424,15360,18176,8448,11008,7168,-3328,-768,1280,3328,6656,5888,4864,6144,13568,16128,11776,8704,1536,-2560,4864,12800,14848,14592,16384,12288,14080,16128,19200,15360,8192,5120,1024,12544,19712,17152,13824,13568,512,-3840,6400,4864,768,4864,-4096,-14592,-12544,-9984,-10240,-8448,-8704,-14336,-10496,-3328,1536,-8960,-11776,-21760,-22272,-3840,4352,7936,4096,256,-4096,-1536,2560,3328,-1536,-6400,-14848,-13568,-4864,4096,768,3584,-2048,-12288,-3328,-1024,-4352,-8704,-8448,-20992,-21504,-19200,-17920,-13824,-12544,-15872,-18432,-13312,-6400,-4864,-11520,-15360,-24320,-16640,-9472,-3072,768,-256,512,-1792,-2304,-768,-256,-1024,-3328,-6912,-6144,-256,6912,4864,2816,-6656,-7936,-7168,-1792,6656,5120,-512,-12800,-17408,-20480,-8704,-2816,-7168,-8960,-8704,-4096,-3584,-512,-6912,-10240,-8192,-6912,1024,10496,13312,15616,20224,10752,8192,9472,11776,12032,6400,3072,-1280,5632,9216,9216,3840,2304,1792,-11520,-4096,7680,9728,7168,256,-4352,-8704,-1536,768,-1536,2304,1792,-512,-6400,-11008,-23040,-19200,-14336,-13312,-4352,2560,12544,16128,23552,8448,3584,3072,-512,2304,-6400,-9984,-10496,256,7680,8960,4864,3840,4864,2048,9728,7936,-768,-5376,-19712,-14336,-12544,-12544,-6656,4352,15616,15872,14336,3328,-2560,-12288,-13312,-16640,-16640,-7936,8448,14848,15616,14080,8960,12800,15104,21504,18432,13568,4352,8192,11008,9984,7936,8448,10496,3328,3584,13056,15616,18688,14336,-1792,-4096,-12288,-7936,-6656,1024,5120,512,-1280,9216,6656,2048,3840,-10496,-3840,2560,14336,9984,16640,8960,1280,-3584,-2816,10496,5632,3328,512,7936,3328,6656,1792,-3328,-13312,-18432,-14592,-11008,-2816,-2304,-512,-10752,-14336,-14848,-10496,-7936,-4352,-8960,-14080,-10240,-8448,-4352,-4864,-11008,-12800,-3328,3072,12544,9984,9216,3072,-768,-3840,-5120,-512,-1792,1792,-5632,-2560,-4096,1536,768,-2048,-2816,-11008,-9472,-768,2560,-4352,-13824,-22784,-19712,-13568,-1280,1536,256,512,1280,1024,-3584,-5888,-8960,-19200,-18688,-10496,-3328,4608,6912,12800,6912,4608,-512,3072,8448,2304,512,-3072,-1536,-4864,-3328,-5120,-11520,-19200,-20480,-13824,-4096,3072,512,-15872,-26368,-25856,-23808,-12288,-9472,-6656,-6400,-7424,-5376,-512,-3584,-3584,-7424,-6912,-2816,-3840,7680,8192,8960,4352,2816,2304,6912,12288,7936,10240,5888,9984,8704,7168,5120,-512,-3584,-4864,-1024,2304,11520,8192,-2304,-6656,-5632,0,9728,11520,8704,7168,13312,15360,12032,12288,12032,5632,6912,15872,16640,24832,23808,20992,10240,6656,8704,15104,19968,14848,14080,11520,18176,15360,17152,13568,3584,-4096,-5632,1280,4608,8704,768,-10240,-17664,-19712,-9728,256,3584,3072,-1792,-512,-512,768,-256,-7936,-9216,-9472,-1536,4608,14080,11776,5376,-2560,-7424,-1280,2048,11008,6912,-256,-9472,-10752,-7680,-5120,-8192,-12544,-13056,-8704,-4352,-1792,-6400,-13312,-18688,-22528,-17152,-10752,3328,3840,4096,-1024,2048,4096,9472,10240,5888,3840,-256,7936,11264,20736,11776,8960,1280,2304,3584,8448,11776,5120,6656,-256,3072,-4352,-3840,-9984,-12544,-8704,2816,11008,11008,3840,-6144,-14080,-18688,-11008,-3840,6912,5888,4352,-1536,-1024,-1792,-512,-4608,-8448,-6656,-4096,3328,4608,1280,-6144,-7424,-11520,-7424,-5376,-1024,2304,-2048,-2560,-8448,-10240,-8704,-5888,-5632,-9216,-7680,-3328,768,-1536,-2816,-9472,-11520,-8960,-4096,2304,-256,1280,-1536,-3584,-2560,0,-1536,-3584,-3840,-512,4864,10752,13824,8960,3840,1792,5376,9984,13824,11776,8704,4608,4352,3840,5120,1792,-1280,-2304,1024,5376,6400,8448,4096,1536,-2816,-256,1280,5632,7936,7936,8192,7936,7680,5632,2560,-512,-3072,-5888,-2304,1536,5120,5120,256,-5888,-7680,-9216,-5120,-256,1024,-2048,-4096,-5632,-8192,-10240,-13824,-12544,-11776,-4096,2304,6912,4352,-3584,-8448,-8704,-4352,2048,6400,4864,2048,-256,-1792,-3584,-3328,-6144,-9216,-10752,-5120,512,1792,-768,-4352,-6912,-5888,-1280,1280,4096,5120,4864,4608,4352,3584,2560,1024,-1792,-3328,256,5632,11776,13568,11776,7168,4352,5120,5376,8192,8960,10240,9472,7680,4608,2816,-256,-3840,-3328,-1792,2560,9216,11264,8192,2816,-1536,-1280,-512,3328,4608,3328,512,-1792,-2560,-3840,-5888,-8448,-11520,-11264,-6144,-3072,-1792,-4096,-6656,-9216,-6912,-4096,-1280,-768,-768,-256,0,1536,-1280,-4096,-7168,-7424,-7168,-4096,-256,1280,512,-3328,-6656,-6144,-4608,-768,1280,2304,1792,768,1024,-2304,-4608,-5632,-5888,-3840,-1024,768,2304,1280,768,-2048,-2560,512,4352,9472,12544,12800,10752,8960,7680,5888,4096,1792,256,256,512,2304,2048,2304,768,512,1280,4096,7680,7936,7168,6144,5376,3840,3072,512,-768,-3584,-3584,-2560,-2560,-2304,-3328,-2816,-3328,-2816,-3072,-1024,1280,3328,2560,768,-1024,-2560,-1536,-1536,-2048,-3072,-3584,-3072,-3328,-2816,-3072,-2304,-1280,-1536,-768,0,1792,2560,2304,2048,512,-768,-1536,-2304,-2560,-2304,-2304,-3328,-3584,-3328,-1024,512,768,512,768,2816,4608,6144,6144,5376,3584,2560,768,512,768,256,-768,-2560,-2560,-2048,-1280,-512,-1280,-1792,-768,-512,256,0,-512,-1792,-1280,-2304,-2816,-2560,-2816,-2048,-2048,-1536,-768,0,1024,1024,512,512,1024,2304,3072,3584,3328,3840,4352,4608,4352,3328,3072,2048,1536,1280,0,-768,-1792,-3072,-4352,-5120,-3584,-2304,-1792,-2816,-4352,-4608,-4096,-2560,-1792,-1280,-2048,-2816,-2048,-768,256,512,256,-512,-512,2304,4608,5632,5120,4352,3584,3328,4864,5120,6144,6144,5888,4608,1792,512,-512,-1536,-3072,-4096,-5376,-4864,-3840,-4864,-6144,-6912,-6912,-6912,-5888,-4608,-3584,-2048,-1024,-512,-1280,512,3072,2816,3584,3584,4608,6912,8448,7424,5888,5120,4608,4096,3584,3840,3328,2560,2560,2048,1536,2560,1280,-1536,-3072,-2816,-2560,-3072,-4352,-6656,-8960,-10240,-10240,-8704,-6912,-6400,-5888,-5120,-2816,-1536,512,2304,4096,5120,6144,8448,9472,9472,8192,6656,5632,5632,5376,4096,2816,3328,2560,512,-1024,-1024,-768,-1536,-2048,-2816,-3072,-3072,-3072,-6144,-8448,-8448,-7936,-7680,-6912,-6144,-6400,-5888,-4864,-3840,-2816,-256,2304,3584,3328,4608,6912,8448,8960,8704,7936,7424,7680,7424,5888,3840,4352,2816,1280,1024,1024,-1024,-3072,-3328,-4096,-4608,-5120,-5888,-8448,-9216,-8960,-8704,-8448,-8448,-6656,-5888,-3840,-3328,-2560,-1536,256,1792,2560,4864,6912,7936,8704,8448,8192,6912,7168,7936,7680,8192,8448,8448,5888,4096,3328,2048,1792,512,-768,-2816,-4352,-7680,-9984,-11520,-12544,-12288,-12544,-9216,-7936,-7936,-6912,-4096,-2048,-1792,1792,3328,5120,3328,7168,11776,11008,10240,5888,8448,14592,16128,14848,12288,8192,3840,13056,13056,8192,-4352,-12544,3584,-768,-4864,-6144,-1536,-3328,-7168,-5120,-11264,-15360,-17408,-7168,-5376,-10496,-16384,-12544,-7680,-2304,5888,8960,-1280,-13056,-8960,2816,3840,-7424,-17920,-22784,5888,14336,512,-2816,8448,15616,-3840,2304,512,-3072,-1792,-5632,16384,1024,-5376,256,-2304,-2304,-2048,25856,22528,2304,-6656,11520,26368,12800,-4096,-17152,-1280,26624,18944,-4096,-11264,-1536,6912,-3584,-3328,-16384,-24064,-17408,-15872,-6912,-5888,-18688,-16128,-8960,-6400,-1280,-4096,-256,-8704,-6912,-256,768,256,-9984,-12800,-11520,2304,-1024,-16128,-13312,-6912,1024,512,0,3584,8960,16128,14592,11520,5632,13824,12288,6400,10240,13312,8192,512,15616,5376,-4608,2816,9984,19712,14592,15104,16384,16128,19712,7936,9472,9216,512,4608,7680,9216,-1280,-6656,-5632,1280,0,-3840,-9216,-7680,7168,5376,-4608,-9216,-4608,-5632,-9216,-3840,-14592,-32768,-11520,3584,-7424,-14080,-21248,-22784,-15616,-5632,-13312,-30976,-23808,-11776,-7936,-6912,-9984,-7936,-5120,9728,6144,-12800,-16896,512,12032,9472,11008,4608,9216,18432,12288,-3840,-4608,3584,3328,18944,28672,-2304,-8960,22528,32512,10496,5888,13056,1536,18432,32512,18688,-512,1536,12032,6400,6400,3840,-4096,-6656,7168,11008,-11520,-8704,1792,4352,8448,4864,-6912,-12544,4352,7424,-3328,-4352,-11264,-13056,-9728,-20992,-32768,-15360,14080,-9472,-24064,-17920,-16640,-17920,-5376,1536,-22784,-25856,-4352,-1536,-10240,-13056,-15360,-19456,-13824,-3840,-19968,-29440,-12288,4608,-2304,-768,4608,-3584,7680,21248,11520,-8704,-11264,4096,21504,30208,3072,-23040,6144,32512,21504,2560,8448,4608,4864,29184,32256,6144,-12032,3584,22784,20224,17664,15872,4352,4352,12288,11008,256,3328,11008,17920,24576,14336,1792,-768,4608,-3072,-6656,-1280,-6912,-3840,13824,11520,-13056,-12288,11520,7168,-10240,-1792,5120,-4096,-10752,-1792,-8192,-20992,-20480,-9472,-10240,-25600,-16384,-6144,-8192,-18176,-18176,-8448,-2048,-4864,-13824,-11008,-6400,-6144,-4608,-3328,-512,-13824,-29440,-17152,-6656,-13824,-29440,-16640,11776,6656,-5888,-3328,3328,-8192,-16640,512,7936,-5376,-13568,-1536,14080,3840,-9728,-10496,-2048,4352,-512,4608,6656,6912,12544,10752,9984,4864,3840,13568,17920,18176,12800,13824,22016,12544,-9984,-11776,13312,29184,10240,-9216,7168,29696,19712,-4864,-3328,20992,30208,23040,12800,-4608,-1024,20992,26624,13568,-4352,768,21504,17408,6144,4352,19200,20736,11008,13568,15360,19456,8960,8704,-1536,-12800,3840,25088,27904,-2816,-18944,13312,22272,-7424,-26624,-14848,9216,10240,10240,-8704,-24576,-14336,5120,9216,-7424,-10240,-3584,2560,-4608,-12032,-512,4096,-4352,-8704,-14848,-22272,-25600,-14336,-3584,-13824,-19712,-16640,-6400,-14336,-29952,-17664,-1536,-3328,-21504,-30208,-16640,-5888,-7168,-11264,-20992,-17920,-18688,-15104,-10240,-18432,-25088,-20992,-2048,-5632,-13824,-19456,-15360,-4096,-8448,-7168,-6400,-5888,-6400,-8192,-3840,2560,8704,5120,2304,-6912,-24064,-12544,16384,17920,-12288,-25344,7936,27136,10496,-12288,-13824,12544,25856,22016,3584,-8192,6400,28160,21248,-3072,-1792,13568,15360,9984,9216,4608,9216,18432,22016,16640,15104,23808,24064,23040,13824,-2816,6144,22528,31488,20480,-3840,10240,25600,11520,-12288,-9728,10752,14848,16640,10496,1792,256,10496,19200,13824,5888,-256,6400,15616,16128,13056,9472,6144,-512,-6400,-6144,256,6656,2048,-4096,7680,11008,-6400,-26624,-8704,20480,16128,-12800,-23552,1280,7680,-2816,-12288,-10496,256,-768,-8960,-16896,-25344,-17408,-5632,-2816,-9472,-18944,-5888,-1024,-6400,-15616,-18688,-2816,2560,-3584,-20992,-15616,1536,6912,-6912,-22016,-17664,-23552,-26368,-11520,-768,-11776,-30976,-25088,12032,-1280,-25600,-28416,-2560,11008,-6912,-21504,-32768,-18176,-5888,768,-12800,-25344,-18944,-3072,-8704,-17408,-20992,-6912,8704,2304,1280,-2048,5888,2304,1024,8448,7424,-7936,-11264,7936,24576,4864,-15104,-6400,7936,11264,-13056,-13568,-1024,11776,18432,3328,-6144,-2816,10496,24832,17664,2816,4096,16640,26624,20480,12032,14592,23296,17152,6400,5888,6400,12032,11520,19712,23552,8448,-3328,4352,25088,26624,11264,256,11776,20736,18176,11776,5888,6400,14336,11520,0,-6144,-3328,2048,6656,11520,3328,2816,4352,12544,10240,0,256,4608,7680,4096,-5376,-8448,-2048,4608,768,-12288,-12032,-9216,-2048,-9472,-8960,-1024,2560,-1024,-13568,-4352,4096,-4352,-8704,-6144,-7680,-19200,-16640,4864,-512,-16384,-27904,-11008,1280,-17664,-25344,-16640,7936,8960,-6656,-11008,-9216,-768,-2048,-3840,-2560,-4096,2560,7936,-768,-19200,-15872,-2048,-5120,-17408,-20224,-5120,-2560,-9984,-11520,-6912,2560,4352,-1792,-6144,-5376,-7936,-11520,-7680,-6912,-5120,-1536,-2048,-3072,-7936,-7168,-6144,-11520,-6656,1024,5888,7936,2560,-1024,4608,9472,-3328,-6144,2304,11776,7936,-2816,-3840,-512,2560,512,11264,5376,-4608,-5632,5376,17408,9728,2048,-2304,4608,15360,5888,-5376,3072,512,2048,1536,3584,9216,12288,20992,22784,11520,1792,7936,13312,21504,5632,3328,6400,5376,7424,-1280,8960,19200,19712,18176,12032,9984,3072,-3584,3840,-5376,-4608,-10496,-15104,-5888,-1536,-3072,-2560,15104,16384,4608,2304,19456,5376,-18688,-18944,-6912,4608,-512,-10752,-14592,3584,13568,9984,-9472,-16640,-7168,-768,768,-18688,-25344,-14592,6144,5376,-20224,-20224,5888,15616,768,-13312,-11520,4096,7168,-2048,-15104,-9728,8960,256,-20224,-21248,-6656,8704,-1792,-3840,9216,8704,-1280,-12032,-12032,-6912,9728,3328,-4864,-3840,7680,17664,20736,6912,-9216,2304,8448,7424,-13056,-9728,-2560,2304,768,5120,4864,7168,16640,1536,-9216,-2560,12800,3328,0,-5120,-9984,-13312,-9216,-9216,-11520,-7680,8960,15616,-256,-256,6656,16128,7936,1792,-10240,-4608,8192,7936,-4096,2048,17408,8960,4864,1536,1024,-12288,-3328,3328,-4608,-17152,-3328,5376,-2048,8960,5888,3840,1536,6400,0,6912,12032,12544,0,-7168,3072,1024,-4864,-12544,-1536,5888,11264,2816,2304,-2560,3840,11008,3584,-768,-7168,1280,8448,8704,-1280,9216,17408,13568,-3328,-1024,1024,-4608,-7168,-4096,2816,-7424,-256,2304,-7424,-11264,3072,256,-10752,-12800,-5632,-4352,-6144,-6912,-17152,-17664,-15360,-15872,-12800,-9984,-3840,1536,-2304,-5376,-11776,-7168,256,-1280,-11776,-5120,-3840,-9216,-11264,-11520,-5376,-7424,-8192,-13312,-16640,-17152,-5376,-512,-10496,-15872,-10240,-4096,6144,9216,-6912,-14336,-7424,-2560,-6400,-11264,-9728,-9216,-11776,-1280,-6144,-15616,-13568,-8960,512,2816,3328,512,-7936,-7168,1024,3328,2560,1280,-5120,-1280,12288,6656,512,-2048,3840,-1536,-1024,8704,9216,13056,11264,11008,6656,8960,13568,20480,16384,12544,14592,12288,7424,6144,5120,-1024,-1024,4864,11264,2560,10496,9216,3840,12800,2304,-5120,-3584,5120,5376,6656,7936,4352,3072,-768,1792,2816,-3328,1280,4096,512,3328,-3584,-1792,-7936,-6400,-6400,-5632,-2048,3072,4352,-1792,5120,-3584,-512,4352,8192,5376,8192,15104,11520,3584,-768,-3328,-5632,1536,-3072,-8448,-4608,-3584,-8192,-10752,-14336,-9472,-10496,-13312,-6144,1280,256,256,5888,4352,9472,12800,9472,5632,8448,13824,7168,3584,5376,-1792,-3584,3584,3072,0,-1024,1024,3328,-256,1536,5632,3584,6144,8448,5632,13056,11776,6912,7168,3328,512,-1024,-1792,256,-2560,-9728,-12544,-14848,-17920,-12544,-4864,-7936,-1280,-5120,-8704,-13568,-9216,-3584,-7168,-512,-8960,-9984,-12544,-3328,-4096,-12288,-9216,-6144,-8192,-10496,-7424,-7424,-2048,256,2304,-4352,-2560,-7424,-6400,6144,12288,13312,3328,-7424,-11008,-8192,-1536,256,-9216,-11008,-9984,-6400,-2304,5376,3328,-512,-5632,-1024,5120,-1536,7424,6656,13568,21504,14848,7168,2048,3072,5888,3584,0,-2560,-6912,1024,5632,1792,256,3840,8192,1024,1792,1280,2304,9984,11776,17920,13568,5120,3584,512,-1280,-2304,-8448,-5888,-4096,-7424,-7424,-5632,-4864,-7168,-5632,-2816,-3072,-6144,-3072,-256,2048,4608,1024,-2304,-512,-2048,-6912,-7680,-2816,1536,-6400,-7680,-8960,-10240,-9984,-6400,-2304,-7424,-3840,1280,3328,1536,256,-2560,-768,-768,-1024,512,-3072,-256,-4096,-4608,-1536,-3328,-3584,-2816,-3328,-1280,2560,3840,6144,8448,11008,9472,5632,5376,7424,9472,14336,11008,2304,768,2048,4352,2816,2048,2304,-768,-6144,-5120,-1024,2048,7680,5376,-256,-1536,1536,6144,8192,6912,3328,1024,-2304,-1536,-3328,-7424,-6144,-6400,-3584,-4096,-8448,-6144,-6144,-4352,-2304,-1536,-4352,-9984,-5632,-2304,-1280,-512,512,512,-1024,768,0,256,1792,4096,1536,-768,768,-2048,-1280,2560,4864,5888,3584,2816,4096,3328,5632,4096,1024,-6144,-11008,-5888,-512,2304,3584,3840,2304,768,0,-256,-1792,-1024,-512,1024,1024,3072,5632,5120,3584,768,-2048,-3328,-1280,1280,1536,0,512,-1792,-8192,-7936,-4352,-5376,-4864,-5376,-2816,-768,768,2816,1280,1024,-1280,-3328,-1536,-1024,1536,5632,4096,2048,2048,1280,768,1536,256,1280,256,2048,2048,-5120,-3840,-2304,-2816,-1280,0,768,1536,1536,256,-256,-1024,-256,1024,2048,1280,-1024,-1792,-1536,-256,3072,2048,512,-2560,-5632,-2560,1024,4608,1536,-4096,-5120,-4096,-3328,-3840,-2048,1280,2816,768,-1536,-256,768,2560,4608,1024,-1792,-2048,-2560,-2048,1280,3072,2560,2304,1536,1792,1280,2816,5376,-768,-5632,-3584,-1792,-768,-2560,-256,512,1024,1536,1024,3328,2560,1024,0,512,768,256,-1536,-2048,-1536,512,3584,5888,4096,3584,1792,-1792,-3840,-11264,-9472,-5888,-3584,-1792,-1536,-1792,-1792,2304,4096,3328,1280,-2048,-3584,-1792,768,2816,2048,3072,2560,2048,1280,1792,1024,768,1792,-256,-768,-1536,-6656,-5632,-1536,-1280,-2048,-2304,-768,256,3584,3840,2816,-1536,-2816,-1280,1280,3840,5120,3840,-256,-2304,-1792,1024,4352,4864,2560,512,-2304,0,-1280,-5120,-3584,-3072,-3584,-4096,-2304,512,2304,1536,-256,-2816,-5120,-2560,2048,4608,5376,2816,-1280,-3072,-2560,0,4096,6656,5888,2304,-512,-1024,-1024,-4608,-6400,-2560,-1280,-3840,-4608,-3584,-768,2560,4352,4864,1792,-1792,-1792,-512,2816,3840,4608,2304,-1536,-1792,512,2816,4096,4096,1280,-2304,-3584,-2048,-5120,-3328,768,1536,-1024,-3840,-2304,-1024,1280,1792,1024,-512,-2560,-3072,-2304,-2304,-768,-512,-2816,-5376,-4864,-2560,768,5120,4864,2560,-1792,-2560,-2048,-7936,-2304,2304,-1280,5120,4864,-256,-5888,-3584,9216,12288,8192,-512,-7424,-1792,8448,8448,4352,5632,8704,9472,8960,6912,6144,1280,1536,512,3072,3328,-4096,-6400,-9728,-8448,-13568,-11520,-3328,-768,-7424,-14080,-13312,-7936,-5376,-7680,-9216,-6656,-8448,-11776,-7680,-768,2816,6400,1536,768,5376,1024,7936,1536,5376,2048,4096,16640,6400,1280,2304,-3072,-2048,4864,-1280,-1280,-1280,5632,-5120,-15872,256,13056,8448,-10496,-15616,-7936,-7936,1792,2816,-1536,-1280,-16128,-14336,-6912,-2304,-6656,-13056,-9728,-7680,-5632,256,-1536,-8448,-2560,-5632,3328,3584,-5376,9728,8192,6400,2816,2304,10752,19968,19712,9728,6912,11008,21504,19712,21760,13824,4352,3584,3072,16896,17920,15872,11520,-2816,-6144,-6912,768,9472,5120,-3584,-13312,-21504,-21504,-8960,3328,2560,-10240,-16640,-18944,-13824,-10752,-15872,-16640,-11264,-3072,-11008,-17408,-17408,-13312,3072,5376,-2304,-5120,256,3584,2560,5888,2304,-1536,512,12800,8192,5632,9216,9472,12288,4608,6912,11264,13824,5888,-1024,3328,6656,8192,6656,1024,1792,-256,-1024,5120,1280,-3328,-3328,-8448,-9728,-4608,-7168,-8960,-7936,-4352,-4608,-4352,-11520,-15616,-5888,-1792,-1024,768,-5120,-16128,-16128,-12032,-4608,1024,3840,-6400,-10496,-5888,-4864,0,-256,0,-4608,-9472,-9728,-2304,9216,8192,-4864,-9472,-5888,3840,13568,9728,0,-1792,8448,11776,11776,11520,8704,10496,16896,13056,8192,9728,12544,22016,19712,11520,6912,10752,15104,10752,8448,6144,1536,1280,4096,6144,3840,3584,4864,2816,1024,-3840,-5888,-7168,-6656,-4608,-4608,-8704,-17152,-18944,-10752,-11008,-15104,-17664,-18688,-17408,-16896,-15360,-19968,-19200,-15872,-12544,-5888,-6144,-11008,-11264,-5120,1024,256,4096,3584,-1536,1024,2560,6144,9216,5888,1280,1792,5888,7680,7424,9216,6400,3328,4096,11776,12544,5888,0,2560,10496,13824,11008,9728,12288,6656,7168,8192,8448,8704,11776,11264,6656,4352,768,256,4608,4096,1280,4864,4352,256,-5632,-7936,-9472,-8448,-5120,-7936,-9472,-11008,-13824,-14080,-13568,-12288,-13056,-12544,-14080,-17408,-16640,-16640,-15872,-16128,-16640,-15616,-17152,-15616,-14848,-14848,-14336,-15360,-13568,-12800,-11008,-11520,-12288,-11264,-10496,-8448,-7424,-5120,-3840,-3584,-1536,-1024,-1280,-1024,-512,1280,1280,2304,2048,2048,2304,2816,4864,5632,6912,7680,7936,7424,7680,8960,8704,9472,9984,9472,10752,10752,12032,13312,13568,13824,13824,16640,16384,18176,17664,15872,17152,17152,18432,16896,18432,19712,18688,20224,17664,17920,17152,16640,17408,15360,16128,13312,12544,11520,10496,11776,8704,8448,6912,6400,5632,2816,3072,1024,512,-768,-3072,-3072,-4096,-4352,-6144,-7424,-8704,-10752,-9472,-10496,-11264,-13824,-15872,-15360,-15616,-14592,-15872,-15104,-15360,-16384,-15616,-16128,-15872,-17152,-17664,-18176,-18688,-17920,-18944,-18688,-18944,-18432,-17408,-17920,-16896,-16640,-16640,-17664,-17152,-15360,-15360,-15872,-17152,-16384,-14848,-13568,-12544,-13056,-12544,-11776,-10496,-7936,-6912,-5888,-5120,-4864,-4352,-3072,-1536,-512,1792,2560,2816,4096,5120,6144,7168,7680,8448,7680,8192,9472,11008,12544,11520,11520,11776,12544,13824,14848,14848,14080,15616,16128,16896,16128,15616,16128,16640,17152,16640,16384,16128,15872,16896,17152,16896,16640,15616,15104,14080,15104,15360,16384,16128,14336,13824,12800,13312,12800,12288,12032,10752,9984,8704,8192,8192,7168,7680,6656,6144,5888,5120,4864,2560,2304,1024,-256,-1024,-2304,-2560,-3840,-4608,-5888,-6912,-7680,-8960,-8448,-8192,-9472,-9984,-11520,-12288,-13312,-13568,-13824,-15360,-15104,-15872,-15872,-16128,-18176,-19200,-19712,-18944,-18944,-19968,-20992,-21504,-20736,-20480,-20224,-19712,-20992,-19712,-18688,-17408,-17152,-17408,-17152,-17664,-16896,-16640,-15104,-14080,-13568,-12288,-11776,-11008,-10496,-10496,-8704,-7424,-5888,-4352,-4096,-2816,-2304,-1024,-256,768,1792,2816,4096,4864,5632,6144,6656,7680,7936,7936,7680,8192,10496,10752,12544,12544,13312,14592,14848,15360,14592,15360,15616,15360,15872,15872,16384,16384,16128,15616,14592,14592,14336,15104,15872,14848,15360,13824,13312,13056,12544,12800,11520,11776,11264,11264,10752,9472,9472,8448,7680,7168,5632,4864,4352,4608,4608,3072,2560,1280,1536,768,0,-256,-1024,-768,-1536,-2304,-2560,-2816,-2816,-3072,-3840,-3584,-4608,-5376,-5888,-5888,-5888,-5888,-5376,-6144,-6144,-6144,-6144,-6656,-7680,-7680,-7936,-7680,-7424,-7936,-7680,-8192,-8448,-8704,-10496,-9728,-8960,-7424,-7168,-7424,-7680,-8704,-8704,-8704,-8192,-8192,-8960,-9216,-9728,-9472,-8448,-8192,-7936,-8960,-8960,-8960,-9728,-9472,-9728,-8448,-7424,-6912,-6912,-8448,-8448,-7936,-7424,-7424,-8192,-6912,-6400,-5120,-4608,-5632,-5888,-6144,-4864,-4608,-4096,-2560,-2048,-768,-512,256,256,-1024,-1024,-512,1536,3072,3072,2816,2048,3328,5120,6144,6912,6912,6912,5888,6912,7936,7424,7680,8960,11008,11776,10752,9984,9984,11520,12032,11264,11008,10496,11520,12032,12288,11264,11264,11264,11008,11264,11520,11264,11264,11776,11776,11520,11008,11520,9984,9216,8704,8704,8704,7936,8192,7424,8448,8192,7168,5376,2560,3328,3840,4608,5376,4608,4096,2560,1792,2304,512,1280,0,0,512,-1536,-1280,-2816,-2560,-3072,-1792,-3072,-3328,-3328,-5120,-4608,-4608,-4096,-5632,-6144,-6912,-5120,-5888,-4864,-5632,-8192,-7936,-9216,-6656,-4864,-4352,-6400,-8704,-9728,-10496,-7680,-8192,-7168,-6400,-7168,-6656,-7168,-6656,-7680,-8192,-7936,-7936,-8960,-8192,-5632,-7424,-9472,-9216,-7424,-3072,-3072,-5376,-8704,-9472,-3072,-256,-1536,-3840,-5120,-5376,-5376,-2560,-768,512,0,-1280,-2560,-4352,-2048,-2048,-2560,-4352,-9216,-9728,-13056,-10496,-5376,-768,256,5376,6912,-3840,1280,4352,10240,16896,10752,1024,-2816,-1536,5376,6912,5120,4608,3072,5888,1280,6144,5376,6400,7680,12544,768,-18432,-7424,-1536,2816,512,-5120,-512,6912,8448,12032,7680,-1024,-6144,-8448,-4352,-256,-4096,-8448,-7936,-4352,4608,2816,8960,7936,4352,2304,-1792,-7936,-20736,-17152,-14080,-5632,-8960,-10752,-10752,-1536,11008,6144,7424,1024,8960,11520,2304,-4096,-9472,-3840,2816,11008,6656,1024,0,4864,11520,9984,10240,4608,512,-2048,-512,1536,4608,5376,7168,7168,256,4864,8448,12544,13568,14592,9728,8192,5888,2816,5632,6144,13056,15872,18432,14080,11264,12544,15104,12800,14848,12544,4096,5376,6912,8448,8448,9472,4608,2816,-4352,-6144,-256,5888,7936,-1024,-6656,-18432,-20736,-16128,-15872,-12032,-11264,-10752,-12288,-10752,-12544,-12288,-6400,-1280,-3840,-7936,-7424,-12800,-11008,-8448,-3840,-10240,-14336,-16640,-13824,-8960,-7936,-4608,-9216,-12032,-19712,-13824,-16384,-12800,-4096,3072,11008,7936,6656,3584,5376,9984,17920,11264,11776,11520,7424,7168,1024,2304,4352,2816,768,-1280,-1280,3328,-512,5888,5632,-5632,-11520,-19200,-18944,-10752,-4096,0,-2560,-7680,-10752,-14080,-8448,-5888,-8448,-6656,-3584,-4608,-5120,-11776,-14080,-8960,-5120,-3584,-3328,-7936,-12544,-5120,-768,-1024,-7168,-11264,-12032,-9472,-2816,5632,5632,8192,16128,11776,17152,10240,5120,13056,18432,22528,17664,6400,2560,1536,-768,3072,-5888,-4096,-2304,-4864,2560,4864,-6400,-12800,-13824,-10496,-6912,-9728,-3584,-512,-1536,2048,3072,-2816,-256,-2048,4352,9984,10240,8960,5120,7680,11008,8704,-2560,-256,5120,9984,11520,16640,14336,1536,2816,3328,11520,11520,14080,13312,15360,20736,16896,17152,5120,7936,13824,15872,14848,9728,3840,3072,3584,-2304,-4096,-14080,-13312,-9984,-8704,1536,-256,-5376,-13568,-18688,-15104,-18176,-22016,-18688,-11008,-1792,3584,-4352,-9728,-4864,-8704,-5376,-4096,-1536,-2816,-5120,0,-1536,-5120,-13312,-15360,-16640,-12544,-6656,-2048,512,3072,6912,6144,3840,2304,-1792,0,5888,11008,17664,15360,7936,6912,11008,10752,10240,2304,4352,6144,5120,1792,-3328,-3072,-1536,-1280,-5376,0,-5376,256,768,512,4096,-3840,-9472,-13312,-7680,-2560,3840,-1536,2304,256,-3328,-4352,-4096,-3328,-1280,-1280,-7424,-7936,-14848,-15360,-19712,-13568,-7680,-6144,-8448,-4608,-2048,3840,6912,4864,4864,-1280,5120,2304,5376,7936,5376,10752,12544,11008,6656,-512,-1024,3840,3584,0,-5632,-11520,-12544,-9216,-6912,-9984,-5888,-8960,-7680,-6144,-12800,-7936,-10496,-8704,-7936,-6656,-5888,-6912,-7936,-6912,-1280,-1536,512,2304,2560,4608,3072,1280,-512,-1536,-4096,-5120,-6912,-2560,2816,1536,7680,7424,8192,6144,5888,5120,3840,7168,6144,10752,10496,8704,9216,8704,8704,7680,9728,9472,5888,8704,9984,5376,8448,7168,0,-2560,-2560,768,-1536,1792,3584,2560,2048,512,-3584,-3840,-6400,-4608,-5888,-8448,256,-6912,-1280,-3840,-1280,-3584,-4864,-512,-7936,-5888,-768,-3072,-6144,1536,-7168,-5120,-1536,-2304,-1280,-1280,-2304,-256,-2816,1792,-4864,-4096,-1536,-5632,-5120,-7424,-1280,-5120,1280,0,4096,2816,0,1024,3072,256,256,2560,-5120,-4096,-4096,-3328,-1024,1792,256,1280,256,1024,1280,4352,3328,2816,4096,256,512,2304,256,2304,2816,3328,3328,1792,5120,512,8448,512,3328,3072,-6144,1536,768,2304,4352,7936,3584,4096,1792,5632,1536,1536,4864,512,-1536,-1792,-3328,-7424,1536,-6400,-768,512,-5376,1536,-2304,3584,2816,0,1792,-2816,-2304,-1280,-2816,1792,-768,-1280,512,-2048,-256,-2560,-2560,0,-768,-5120,-768,-2048,-3840,-1024,0,2048,-3584,-2048,768,-1280,1536,256,512,512,-1024,1024,-768,-256,-1024,-768,768,3584,768,1536,2304,-768,4608,2304,-256,2560,-768,256,0,-256,2816,0,768,-1792,1280,-2048,-512,256,-4352,1536,-1792,-1024,3840,-1792,2816,2560,-3584,3584,-1280,768,3584,1792,1792,2304,1024,-256,-4864,-2304,-2048,-3584,-1280,-3840,-5120,2048,-256,-5632,1792,-4864,512,-4864,-2048,4608,-3328,1024,2560,-1536,3840,-2816,512,2560,-3328,4608,-512,1536,1536,768,1792,-1280,-2304,512,-5376,2048,-1792,-768,1536,-2816,2304,-768,256,-1536,256,-1792,-2816,1792,1280,-3072,2304,256,-768,1536,4096,2048,-1536,4864,1280,-1024,4864,768,-2816,2816,-1536,-2304,-3072,-2816,-2304,-3840,-1792,256,-1536,256,-1024,-2304,1792,-2304,5632,0,3072,2048,1280,7168,-1024,5120,3328,1792,-2560,-2048,-3584,-3328,0,-4608,-5120,-7168,-8448,-10240,-8960,-2048,256,-1024,4352,2304,768,-768,-256,5120,1280,1280,4864,3840,2560,1024,6656,8192,5120,6400,5632,7936,768,-2816,-5632,-7680,-17152,-22784,-14080,-8704,-5888,-8448,-6912,-9728,-11776,-11776,-8192,-2560,5888,6656,5376,7424,8960,6400,2816,6656,8192,13056,19200,21760,19456,17664,21760,12800,5632,3072,512,11008,16128,17664,16128,16896,13056,7168,1536,1280,2048,-1792,-7168,-8448,-9984,-14848,-15360,-15360,-9984,-11264,-11264,-13824,-15104,-15104,-16128,-16128,-14080,-14592,-17408,-18688,-9984,-6912,-7680,-512,-1536,-3328,-2816,11776,12544,14592,14848,14336,11776,6656,6912,10240,14592,12288,14848,12800,12544,3072,768,2816,768,-7168,-6912,-11264,-13312,-2560,-2816,512,-5632,-9984,-13056,-17152,-14848,-8448,-4608,-5888,-4608,-8704,-16384,-18432,-17408,-14592,-14336,-14592,-10752,-7936,-3328,1280,768,3584,4864,1536,-1536,256,9472,17408,17408,20736,20480,17920,19456,18688,17664,16896,17152,13056,13568,14592,18176,15360,12544,13568,8448,1280,-3584,-768,1536,512,2816,1536,0,-9728,-13056,-5888,-5376,-5632,-12288,-10240,-10240,-6656,-8704,-5376,-6912,-10752,-14080,-16384,-18176,-19712,-14592,-11776,-6912,-8704,-7168,-12544,-10240,-15872,-12800,-10496,-10496,-7936,-5632,3328,7168,15360,16384,12032,7680,7680,4608,11008,15872,18432,20992,19456,17664,8960,7680,5120,3072,4352,2816,768,768,768,1280,1024,-1792,-3584,-7936,-12544,-11008,-2560,-2304,1280,-3584,-4864,-9216,-11776,-13312,-18176,-13568,-18432,-16384,-18176,-10752,-8192,-4352,-5632,-6912,-7424,-10752,-8960,-10496,-3584,-2304,2048,1792,2560,-2816,1280,8704,5632,7936,6400,11520,12544,17664,17920,21248,22272,16128,12544,8960,13312,10496,21248,22784,20992,16640,13824,9984,5376,7424,7680,6400,3072,5632,1536,8704,9728,10752,4096,1536,-1280,-4352,-768,1024,5120,2048,1280,-6144,-11520,-17408,-15872,-15616,-16640,-15872,-19200,-19712,-19456,-16640,-17408,-16384,-19200,-19968,-22272,-20224,-11264,-5888,-3328,-4352,-5632,-7680,-7168,-4352,512,3840,3328,1536,2048,3584,7680,11264,13568,11264,9216,5888,5632,8448,12288,18432,17664,16384,13056,11008,10752,15872,17152,16128,11264,7936,7680,12544,17664,18688,18176,14080,10240,5632,5376,6656,13312,15616,14848,9984,3840,2304,2560,3840,2048,-256,-4864,-3840,-1024,4608,5376,3072,-1792,-7168,-10240,-11520,-5376,-1024,5632,5120,2816,-4608,-9216,-10240,-8960,-5376,-5632,-6144,-9728,-10240,-9472,-7424,-10496,-13312,-18432,-20224,-19456,-15360,-10496,-6656,-6144,-11264,-17664,-23808,-22784,-17408,-12288,-8704,-8192,-11520,-14848,-16128,-13824,-12288,-8448,-7936,-6400,-6912,-7936,-6400,-5376,-2560,-3840,-5120,-9216,-7936,-4352,-256,256,-1536,-4608,-6656,-4608,-1280,2560,2304,5376,6144,7680,4608,2816,3584,7680,13568,14848,14080,9216,8448,10240,12544,11520,9472,7680,9472,13312,18432,18944,16128,12800,10496,9728,8448,10240,14848,20224,23040,21760,17664,11008,8448,8960,10752,14592,14336,15616,14848,14336,12544,8448,5888,3072,3584,2048,4864,7936,9728,8192,3328,-3584,-8704,-9216,-7424,-4352,-4864,-3072,-3584,-2560,-6400,-9472,-14336,-14336,-9984,-7168,-5120,-9984,-12032,-11776,-8448,-10240,-14592,-19968,-20480,-14592,-9216,-8960,-14848,-19456,-22528,-19200,-17664,-17152,-17664,-17664,-11264,-7936,-9216,-17152,-20736,-17664,-11520,-6912,-8704,-11008,-12800,-11008,-10240,-12544,-15872,-16384,-12032,-8192,-3328,-2304,-2816,-4864,-5376,-6400,-7168,-6656,-3584,2816,5376,8960,6912,5632,2048,512,1536,3328,8960,11008,15104,13056,11776,10240,9472,8448,7936,8448,9216,15872,21504,23552,17408,11520,5888,7168,7936,9472,9984,11264,19200,20224,20736,11520,6912,5376,11776,19968,19712,17408,12544,15616,17408,15872,8448,2816,4352,11264,14848,13568,7936,4608,4096,4352,3584,-1280,-1792,0,6144,9728,7936,2816,-1792,-2048,1280,4096,3072,768,1280,1792,0,-3584,-5888,-7168,-8704,-5888,-6144,-5120,-6656,-8192,-8960,-10752,-14080,-17664,-17408,-14336,-9216,-10496,-8704,-9984,-12544,-19200,-21760,-21504,-18176,-12544,-12288,-11008,-15872,-15360,-16640,-17920,-19200,-20480,-18688,-14336,-9472,-6144,-6144,-12032,-14336,-13568,-12288,-13056,-13312,-11520,-7424,-2048,512,-1024,-4608,-6400,-1792,-256,4864,3328,2816,5888,7168,7680,7936,2304,1792,8192,6400,11520,5376,9472,9728,10240,10496,9472,7936,8960,13056,10496,16896,15104,14848,15616,10496,14592,10240,11776,8960,4096,13312,3584,12800,4608,2304,5888,7936,7936,7424,13568,12288,16896,13312,16640,12800,13056,9472,8704,6144,11776,6656,7936,8448,-2048,5888,-3328,-3328,-1024,-4864,-2816,-512,-3072,2048,0,-2560,-1280,4352,512,-256,7168,-2816,8192,-1536,-1536,512,-7680,-6912,-11520,-5376,-8960,-5120,-7936,-9728,-5120,-6656,-6656,-7168,-8704,-8448,-5632,-5376,-7424,-7424,-8192,-7424,-5376,-6144,-9216,-7936,-6912,-7168,-5120,-5888,-7424,-9728,-10752,-11776,-6400,-7936,-8704,-5888,-6144,-8448,-6656,-5632,-12288,-7936,-11008,-13056,-6400,-14336,-14336,-11520,-13824,-10496,-9984,-10752,-11776,0,-6656,-5120,4352,-8192,-4608,-2304,-8960,-8192,-5120,-9984,-4608,-2816,-11776,-4608,-7680,-12288,-2304,-9216,-8704,-768,-5888,-5888,4608,-2560,-1792,9216,3072,3328,11776,9216,10752,15616,5888,11008,7680,6656,6656,2304,9216,1536,6400,9216,6656,9728,8704,12800,4864,10240,7936,7424,19456,9472,8960,15360,13568,9728,19200,15104,10496,20480,13312,9472,17408,14336,9728,14592,16384,8192,10496,13056,2560,8448,17408,8704,4096,8960,6912,1536,5120,7680,-3584,-256,7936,-1024,2304,10752,7680,4352,12288,8448,-512,3328,-2816,-4352,1280,3840,-4608,-2560,-4096,-9984,-7168,-9216,-12032,-15872,-10496,-11776,-7168,-5120,-5888,-3328,-5120,-6400,-4352,768,-6656,0,6400,3072,7424,4352,-3840,-3072,-2048,-7680,-10240,-11008,-3584,-6144,-8448,-3840,-3328,-3840,-6912,-4352,-4608,-3328,-4864,-3328,-2304,2816,-2304,-5888,-4608,-5376,-6912,-8704,-6656,-11008,-7936,-12288,-15360,-18432,-13824,-19712,-25600,-22528,-19456,-20992,-27392,-18688,-18688,-13056,-12544,-16896,-17152,-7680,-4864,-11008,-7680,-4096,1536,2048,4352,2816,8448,3840,3584,8192,5632,8704,1536,2048,1792,2560,2560,4864,7168,6912,9728,13312,11264,9984,15616,12800,14848,19200,21760,16896,13056,12544,10240,2048,-2048,1280,3328,5376,-2048,-1280,-1024,-3072,-4352,-3072,-4864,-7168,-1536,1024,7424,3072,3072,1024,-4096,1024,6656,11776,20224,22784,23040,19200,14336,11776,3328,12032,14080,17152,18688,10752,12544,6144,2816,2048,-4608,-13312,-16896,-11264,1024,16640,18432,23552,18688,11008,8704,1536,6656,11264,10752,12288,14848,14592,7936,-3840,-4096,-4608,-1280,-2048,-6400,-7424,-15104,-16640,-18944,-15616,-10240,-8960,-11776,-9728,-4864,-11264,-6656,-13568,-16896,-14592,-17152,-9984,-1792,3328,2816,3584,-4352,-11264,-17920,-14080,-15360,-9472,-11008,-12288,-13568,-18432,-17664,-23296,-25088,-29440,-19968,-19968,-8448,-1280,2816,7680,4864,9984,2560,-5888,1280,6912,8960,17664,17664,6400,-13568,-20224,-14336,-10752,-10752,-6400,-6912,-8448,-10496,-13312,-14080,-17664,-17152,-15872,-13056,-4608,-2048,-3328,3840,7168,12800,4864,-4096,1280,6400,10496,17920,20736,15104,5632,768,9984,9728,15360,9984,5632,8960,7424,3584,-2560,0,-3584,-2304,256,12288,17664,19456,23552,26624,27392,10496,7424,15104,14336,15872,21248,19456,12800,-2816,512,2304,0,2304,1280,3072,1536,256,-3840,-1792,-1280,1792,-5888,-5120,-1792,0,1024,1280,5376,1792,-6656,-12800,-4608,-2816,3072,3840,10752,5888,-6656,-6400,-5376,-3328,-1280,-1536,-7168,-8192,-18432,-20480,-22272,-20480,-16128,-15360,-6400,768,9984,14592,15872,16640,15104,7168,6144,8960,8448,9216,8960,14336,10752,-4352,-7168,-6144,-12288,-9728,-8704,-6144,-7936,-9984,-6144,-11264,-11008,-13312,-16384,-12032,-5888,0,1024,1792,4096,-768,-4352,256,2816,-1280,512,5376,11520,10240,2560,6912,9728,9728,11008,9472,2560,256,-1536,-2816,-6144,-7168,-10752,-11008,256,5632,14336,16640,19712,17408,12800,7424,7424,13568,9984,11520,9216,7936,-2048,-9472,-6144,-6912,-7424,-2816,-3072,-4096,-2816,-4608,-1024,-4608,-8448,-16128,-17664,-14336,-11520,-9728,-7936,-3584,-3072,-6144,-7936,-5888,-3072,-1280,-1792,256,-2048,-2560,-11264,-10240,-5376,-8704,-9728,-13568,-10496,-12032,-12032,-12288,-8448,-8448,-10752,-7680,-7424,-1280,512,4608,8192,7936,7936,8704,11008,11264,11008,12288,11520,10240,1792,-3328,512,3584,-512,-3584,-4864,-5632,-512,-3072,-2560,-7680,-9728,-11008,-8192,-3840,-6912,-7680,-11776,-5376,-3840,-5376,-5376,-5120,-2048,-2560,1024,768,2048,512,-5120,1280,6656,5376,2304,4608,10496,13568,9216,8960,8704,5376,7168,7936,7680,4864,8960,13824,12800,11264,12544,20992,19456,14848,16640,18944,20224,12032,11520,8192,8192,7936,2816,3328,-1536,1280,-768,-3584,-9728,-8192,-8448,-10752,-8704,-10240,-12544,-16896,-11264,-13312,-12800,-14080,-12544,-13312,-15872,-11776,-10496,-8448,-9472,-12800,-17152,-14848,-15104,-16128,-12800,-10240,-10752,-11264,-9984,-12032,-11008,-9472,-3584,-1280,-1024,2048,6144,9216,6400,9984,14848,17920,10240,10496,13568,14080,9216,10496,12032,3840,768,-1536,768,-3584,-256,-1024,-2048,-3840,-4864,-8192,-10752,-5120,-6144,-7680,-8192,-6400,-9984,-8704,-4096,-5632,-4864,-2048,-4096,-5120,-3840,-2304,-1536,-256,-3840,-3840,-512,-1024,768,1024,5120,5888,6144,8960,7680,8704,10496,12800,14336,15104,16128,15616,15616,12288,16640,16640,17920,15360,12288,17152,8960,16128,12032,7424,7680,7424,7424,768,2304,2816,-512,-3584,-4096,-9984,-9216,-11264,-11776,-13824,-11776,-14336,-19712,-17152,-20224,-15616,-16640,-15872,-18688,-19712,-15616,-19200,-13056,-16896,-17408,-15360,-13312,-11776,-12544,-4096,-6400,-256,-1280,-256,-768,1024,5120,3584,9728,6912,8960,7680,9472,8704,11520,12288,12544,11520,8192,9216,8192,12032,6912,3584,0,3840,-1280,-1536,-512,256,-1024,-5632,-1792,-8704,-5376,-10240,-6144,-5888,-8704,-9728,-12032,-7936,-12544,-6912,-8192,-5120,-7424,-6400,-6400,-4608,1280,-3584,512,512,5632,1792,7680,6656,8704,13312,8192,14336,6912,12288,9216,13056,11776,9216,14080,5632,12032,6400,12288,13824,11264,14592,9472,13568,9728,12288,11776,4864,7168,5376,3840,1280,256,1280,-4608,-2816,-8704,-8192,-8960,-12800,-11264,-11264,-9216,-15360,-12032,-13824,-12544,-9216,-12032,-10240,-10240,-10240,-11520,-11776,-13312,-9472,-7168,-11520,-6912,-7680,-4352,-4608,0,3072,-512,1024,512,3840,-4608,-2560,-2816,-1536,-4608,-7424,-1024,1792,7168,3328,2816,7168,10752,7936,5632,5632,5120,1024,512,3328,4352,-2816,-8960,-2816,2560,4352,-4864,-6144,-2304,-256,12032,13568,9216,9728,7936,10496,6656,3584,512,-2048,-1024,-4096,-8192,-9472,2560,8448,5120,2304,6400,17408,14080,1024,0,-512,4352,-256,-9728,-6912,-2560,4096,-3584,-7936,-4608,2304,9728,11776,1280,-2560,768,-6656,256,19200,16640,-1792,-7168,-12032,-9472,-9216,-9472,-4864,-8448,-9216,5376,16128,15872,5632,-4096,9216,19968,17920,8704,2560,-4608,-15360,-28672,-20480,-5632,5376,8192,-5632,-7168,2560,256,-512,16128,15104,10240,512,-7936,-13824,-8448,-6912,-4352,-7680,-13056,-9984,-9728,-6912,-15616,-16384,-15360,-10240,768,25088,23040,14080,12544,2304,-3840,-5120,1536,2048,-3072,-15872,-7680,13056,512,-13312,6656,23040,20992,10240,7168,7680,5632,1280,-6400,1792,6656,-1280,-9216,-6400,-1280,-9472,-24576,-2816,13056,-5888,-7168,-512,2560,512,3328,256,8960,15360,7680,-3328,-7424,-3328,-9472,-29696,-26624,-10240,1280,7424,-6144,-3584,-256,16640,28416,32512,22528,3840,6656,4608,-4352,-9216,-14848,-12800,-2048,-6656,-13056,-11776,-2048,-256,-7936,-9728,768,16384,20480,17920,15104,10240,4864,-5632,-9472,-5376,-6144,-15616,-17408,-2304,9216,15360,13312,2816,2304,9984,23040,32512,31232,10496,-8192,-10496,-13824,-14080,-18944,-18432,-16128,-19968,-23296,-15616,-14336,-17664,-13824,-8960,7424,12288,11264,12288,8704,5632,-256,-3840,-1024,-11264,-12800,-11776,-14592,-5632,9472,26624,32000,25600,12032,256,13824,29952,31744,27904,8704,-1536,-10496,-5376,-3840,-6656,-3072,-6656,-5632,-5376,-5120,-17152,-16128,-9472,-1536,3072,256,5120,17664,9728,-4864,-17664,-27648,-18432,-23040,-25856,-27136,-20992,-10496,-7168,2048,5888,6400,9472,8192,23040,31744,32512,16896,-1536,-5376,-16640,3328,4864,-2560,-1024,-13568,-4864,5888,-2816,-8960,-1792,17408,16896,5120,8448,17152,22784,5376,-10240,-19200,-24064,-17920,-20992,-22528,-18944,-19968,-12544,-5888,-512,-5632,-8960,-3328,512,10752,11264,6912,-4352,-12544,-16128,-15872,0,1024,-3584,-9728,-19968,-14848,-12800,-7936,1024,6912,9984,6144,2304,2048,3840,8704,4608,-256,768,4608,15872,13312,11264,-1024,-5120,3584,11264,20480,22528,20992,14336,11776,8704,8960,15104,19200,14592,14080,12544,15872,13568,9472,7680,-1024,1536,1280,5376,11008,11264,10496,6144,4864,3584,4096,7168,512,-3072,-3072,0,6144,1536,-2048,-13056,-18176,-13568,-6656,1024,3840,7936,6400,3840,-1280,-4608,-5888,-6144,-4096,-1536,-1536,512,-1536,-5888,-9984,-19456,-19456,-19968,-15360,-4608,-3328,-4864,-10496,-22528,-25344,-20224,-13824,-14592,-19456,-16896,-14080,-7168,-8448,-12544,-17152,-19712,-16384,-13568,-7680,-6400,-5888,-3328,1024,-1280,-3584,-7424,-6912,-3328,-1280,256,7936,8960,8960,9984,1536,2304,-1280,1536,9472,18944,20992,14080,7936,4608,6912,8960,5376,3840,3328,12032,20480,18944,14592,1536,1280,2560,13824,17920,20224,20992,16128,15616,7936,8192,9472,11008,11008,8704,11008,12800,10752,13568,8704,3840,1024,-3584,2048,4096,9216,6656,1280,1024,-768,4864,3072,-2304,-8192,-11264,-2560,6144,7936,4608,-7424,-14848,-14592,-12800,-4096,-2048,768,-3328,-5120,-5632,-14336,-16384,-18688,-19200,-14848,-13568,-10240,-8448,-15872,-18432,-24832,-25600,-19712,-15616,-10752,-6400,-7936,-12544,-15104,-17664,-9728,-11008,-9984,-13056,-13312,-2048,-768,3328,-1536,-8192,-9728,-8704,-1024,1024,768,1536,1024,5632,4864,2304,-768,-3072,-2048,-1280,6912,9984,14336,14592,7680,1792,-4352,-3840,1280,7936,17408,17408,11008,11008,5120,8704,8448,3840,5632,5632,16640,19456,22272,14592,7424,4864,5376,15104,13568,20480,15616,18688,19200,17664,16896,10496,11776,7680,7936,11520,13056,16896,16128,10240,5888,-2560,-3584,-6144,2048,4608,7168,5888,2048,1536,-3072,-3072,-13056,-9728,-12544,-4096,1536,512,768,-12800,-16128,-17408,-12544,-9728,-8960,-6144,-4864,-4864,-8192,-13312,-16128,-19712,-18432,-15872,-11520,-8704,-9984,-8448,-13056,-12544,-16384,-16128,-15616,-14848,-10240,-10240,-9472,-11008,-12032,-14592,-15616,-15872,-16128,-14336,-10752,-7168,-6656,-8192,-8704,-10752,-10240,-11008,-10496,-8448,-6912,-5376,-5376,-5376,-6400,-5120,-5632,-5120,-3328,-1792,-1280,-256,-256,512,256,-768,-256,-1024,1280,1792,3072,2304,1280,2048,2304,3328,2304,3584,3584,5888,6400,6656,7424,7680,8960,8192,8960,7936,9472,10496,10496,10240,9472,9984,8448,8960,8192,9984,10496,10240,10240,9472,11776,10496,10240,8960,9984,11008,12032,12032,11008,12544,12032,12544,10496,10240,9216,9728,9728,9216,9216,8448,8704,6400,5888,4096,4864,6144,5888,5888,5376,5376,3072,3072,1280,2304,1280,1280,768,1024,2816,1536,2304,-1280,-256,-1024,768,768,-768,-768,-1792,-2048,-5632,-5888,-6144,-3584,-4864,-5888,-5888,-5888,-5376,-5632,-7424,-7168,-6656,-6400,-6656,-6144,-5120,-5888,-4864,-7424,-8192,-7936,-6912,-6144,-7424,-8192,-7936,-6400,-7168,-9472,-10240,-10240,-8960,-8704,-8192,-8448,-8192,-7168,-9216,-9216,-10496,-9216,-9216,-9984,-8448,-8960,-5888,-7168,-7936,-10240,-8960,-7936,-8960,-6912,-7680,-6400,-7424,-6656,-8960,-8192,-8192,-7680,-6656,-8192,-6400,-5632,-3584,-4864,-4352,-6656,-4608,-4352,-3328,-2304,-2048,-256,-1792,512,-1536,1536,768,2304,2048,3072,3584,3584,5888,4864,5632,3840,6912,4864,6656,5888,6912,8448,8192,9216,8192,10496,10752,10752,10752,12032,14592,14848,14848,14080,13824,14592,12032,12800,9984,10496,10240,9984,9728,7168,7680,6144,7680,6656,7424,10240,10496,11776,11008,10496,10240,8960,8448,7936,10752,11520,11520,9728,9216,9984,10240,8960,6912,5888,4864,6144,4352,2560,-1792,-4096,-5888,-6912,-4864,-5888,-6144,-7424,-5632,-5120,-4864,-5120,-6144,-5120,-4864,-6656,-8192,-8192,-9216,-7936,-7936,-4352,-4352,-2816,-2560,-3072,0,-1536,768,-3584,-2560,0,-2304,-1536,-7936,-11008,-11520,-9472,-9984,-15104,-12544,-12800,-10240,-9728,-14848,-11776,-11008,-7680,-7168,-8192,-6144,-8704,-8192,-10240,-6144,-2560,-4608,-4608,-4096,-2048,-1024,-2560,-4096,-3072,512,2048,-768,2560,4096,9728,11264,10496,13824,9984,7680,8448,12544,5376,-6144,-10752,-16128,-12032,-4352,-5632,-6144,-768,8448,15616,15616,7936,6656,12800,11520,11008,5888,7168,5888,4864,3584,-1792,768,-512,5888,3072,6144,9984,12032,6400,4864,9984,18432,23552,8960,9216,8448,12288,2304,-3840,-11008,-22016,-13824,-6144,-3072,-4864,0,8960,10240,9472,7936,3584,6912,6144,8448,3072,4608,1024,1280,256,-4864,-13056,-12800,2816,-1536,9984,3584,1024,1024,4096,12544,14848,14080,3584,0,-2560,-512,-11520,-21760,-24576,-17664,-9984,-7168,-8448,-3584,-1024,-2048,-1536,-5888,-9728,-8960,-6912,-6400,-3840,-2048,1792,-3072,-10752,-8192,-6144,-15616,-9472,-6656,-5120,-3328,-7936,-2048,-768,12544,16128,12032,12288,1792,5376,3584,-4096,-14080,-28928,-24320,-15872,-9728,-6144,-5632,256,3840,-4864,-9984,-17408,-17152,-4864,-768,-5120,-4096,3072,6912,256,-3072,-2048,-6656,-10240,-10496,-5888,-4096,7168,-1536,-4096,3328,15872,21760,6656,-2816,-4864,8960,5376,3584,-19456,-25088,-16384,-15360,-4096,-6912,4352,7936,6400,-1536,-6144,-8704,0,5888,8192,8704,16640,23040,11008,5632,4864,7936,2304,4352,0,4608,5888,13056,10496,15360,26368,28160,20480,6912,14848,15104,15360,3328,-6656,-17152,-6912,-5120,-2816,256,3840,14592,14848,9728,-1536,7424,11008,12800,2560,1536,12800,14592,6912,1024,-1024,5376,7168,10496,14848,4096,12288,11776,13568,20224,19968,24320,12800,9728,11520,12288,6400,-2560,-1024,-20736,-10496,-13056,-12800,-768,2304,10240,-1536,768,-10240,-12800,-13824,768,2816,-7424,-6656,-6656,-512,-2304,-2304,-7168,-9472,-13056,-5120,-12544,-17920,-14592,-7168,2304,-1792,0,-1792,-4096,-12288,-14848,-14336,-15104,-13824,-25856,-32256,-31232,-28672,-17408,-7680,-6144,-7680,-8960,-11520,-19456,-23552,-12544,256,1280,-4096,-8704,-2048,6400,3072,-2560,-8192,-7680,-4608,-256,-8192,-13056,-13056,512,11264,7680,13568,8192,5632,-256,1280,-4864,-1280,-11008,-27136,-18688,-17664,-5120,1536,6656,3328,3072,7168,768,-2816,-2560,4864,13056,13056,11008,9984,11776,11008,7680,5888,4352,4864,9728,12800,7680,8704,14848,19968,17664,15104,13056,9216,7168,6144,3840,3328,2816,-3840,-9472,-11776,-9984,-3840,3072,3584,1024,2816,1536,2560,3072,3328,4608,5376,6656,9472,13312,11520,9216,2816,-2816,-8448,-7424,-768,1024,-2560,-4352,-3840,-5632,-7168,-11520,-13056,-9216,-7680,-11008,-10752,-14848,-17664,-19456,-20480,-23040,-22272,-13312,-8704,-6400,-6400,-1024,3328,3072,3328,2048,2816,3328,2048,6144,10496,13312,12800,6144,-1792,-7680,-2560,1536,0,1280,3072,3840,256,-6912,-9216,-8704,-6400,-3072,-2560,-2816,-5376,-7680,-10752,-17664,-21760,-12288,1536,3840,6912,8192,9216,9216,7424,5888,5888,9728,11264,13312,13568,15360,15872,12800,9728,3840,4864,15104,16384,11520,7680,8704,6656,2560,2048,2816,7936,5888,-1024,-1536,-3072,-3328,-2816,-7936,-11008,-11008,-2048,4608,4608,8448,11264,13568,13568,7936,6912,4864,2816,1280,-512,4608,8192,9216,5376,-1536,-10496,-8192,-3840,-3840,-3584,-5376,-7424,-10240,-13568,-17152,-12288,-10752,-10496,-9216,-10496,-11264,-13312,-14080,-16640,-20224,-17920,-9216,-4352,-2816,-3328,-2304,-1536,256,1280,3584,5120,3072,2304,-256,2048,4096,5632,7936,4096,-1792,-4096,-4864,-5120,-4608,-5120,-4608,-4608,-3328,-2304,-3584,-6400,-7936,-6912,-5888,-2816,-3072,-1792,-4096,-8960,-7936,-3072,2048,3328,8192,9216,8192,8960,7168,8960,8960,8960,9728,9216,12544,12800,14336,13312,7424,6400,7168,7936,6400,5120,6656,4864,2560,2048,1536,3328,3072,0,-2816,-4352,-256,2048,1280,-2304,-2304,2048,2048,1792,1536,3328,5632,5632,5120,5376,3840,2304,-512,-2816,-2560,0,2560,2304,-2304,-8192,-6144,-4096,-3584,-4352,-2816,-1024,-1280,-4096,-8192,-11008,-10496,-7680,-9216,-10752,-10752,-7168,-4608,-6144,-11008,-10496,-5376,-2304,-1536,-1792,-768,256,-1024,-1792,-3584,-3072,-2304,-3072,-2816,-2304,-1792,-1792,-512,-4864,-5120,-1536,256,1536,1024,-256,0,1792,1792,256,-1792,-1280,-256,-1792,-4096,-3840,-768,5120,3072,-2048,768,8192,12032,7168,4096,5888,11520,9216,2048,3328,1792,-512,2304,4608,512,-7168,-4096,2048,-4608,-6144,-1280,-2304,-3328,4608,22528,22528,13568,8960,15104,26624,16640,-2304,-16640,-8192,1280,-12288,-20480,-14592,-6912,-6656,-2304,10240,5376,-5120,-5376,6912,12544,256,-12288,-22016,-9728,5888,-768,-6400,-5120,-5376,-2560,-256,-4864,-19200,-30208,-21760,-9472,-5632,-8448,-10752,-10240,-11264,2816,17920,10752,-5632,-12032,7424,21248,6656,-10752,-25344,-13568,18432,17664,-7424,-12288,4864,9984,3840,0,-3072,-5120,-11520,-15872,-4864,5376,-512,-7168,-3328,3072,1536,2048,16384,24832,9728,-10240,-5632,16896,17408,1024,-13824,-22272,-3584,17664,14336,1536,-7424,3328,17664,15360,3328,-7936,-11264,-5376,-1024,-1024,2048,512,2816,2048,3072,7168,8192,11776,16384,18944,13568,5376,2816,6400,10752,7936,-5120,-19456,-21248,-8192,4608,5120,-6400,-12288,-7424,9984,11520,5376,8960,4864,-5632,-14080,-12800,-18944,-17408,-22272,-22528,-16640,-15104,1792,9216,3072,-7936,-16384,-1280,7424,768,1536,3072,1792,2304,21760,8960,-2560,6912,18688,19712,7168,10240,6912,12288,19968,5632,-8448,-4608,1024,-5376,-16384,-21248,-28672,-9728,6656,-3328,-12544,-12800,-11520,-10240,-3840,-6144,-16640,-11008,-512,768,-768,-7680,1792,6400,7424,6144,5376,5120,14592,26368,24832,13568,5632,5120,1792,5376,-256,-768,3840,6144,-256,-4864,-10752,-768,19968,4096,-12288,-5888,512,-1024,1024,512,-13568,-27648,-24064,-1280,3840,-11776,-13824,1280,16640,12544,9728,1792,-5632,6912,18688,15360,-1024,4352,14080,11008,768,-13056,-17408,-5888,11008,7424,-2816,-2048,10496,8704,-10496,-23040,-17408,-4864,-2048,-2048,-9216,-12288,-21248,-15616,3072,-2304,-20736,-13056,22272,16128,-2304,4608,11520,19712,22784,23040,1792,-5888,16640,24320,9472,-10752,-4608,2048,6912,14336,8448,1280,11264,27136,15104,256,256,256,2304,9472,6912,-11264,-17152,-20224,-32000,-14848,-4864,-24064,-32512,-16896,4608,10496,1792,-13568,-11776,3584,5632,2816,-1024,-3328,-2560,5632,22528,12032,-10496,-1792,14848,16128,11008,17408,26368,12800,6912,11776,18944,17408,5888,2816,3072,4096,512,-1792,3072,5120,-6400,-7680,-3584,2560,2560,-4352,-1024,2560,2304,256,-2816,-4352,-3584,1280,256,-18432,-30464,-10240,12288,-4864,-28928,-30464,-13312,-6912,-14592,-12544,-6400,-4096,-3072,-12288,-21760,-17664,-8960,-2048,-14080,-26368,-16896,-14336,-21248,-23808,-20480,-8448,-1792,-1280,-13312,-16128,-11264,1792,6656,-2560,-7936,-2304,19712,17408,-1792,-10752,-2304,12288,13824,5632,5632,3584,-256,4352,11008,1792,-5632,1792,18432,25600,14592,4608,-3328,3328,12800,17920,16384,2816,4352,23808,22016,-3584,-12800,7424,18176,5888,256,10496,16896,15360,18688,15872,8448,7168,14848,19968,7936,2560,4608,3328,2816,256,-5888,-5632,-2816,-8704,-15872,-11776,4352,0,-15360,-11264,6656,9472,-11008,-23040,-12544,-768,3328,-5632,-17152,-19712,-13568,-8192,-20480,-29952,-27392,-8960,1536,-9728,-23296,-18432,-512,-1792,-19456,-16128,5120,8704,-12800,-28672,-16128,3840,6912,-9728,-18432,-19712,-10752,-5120,-15616,-21760,-16640,2048,11776,5120,-6400,-7680,4352,5120,4096,7936,4864,5632,6912,11264,6400,3584,7936,5376,7168,7936,5888,6144,10496,12544,6400,5376,22784,27136,16384,6656,9472,18688,15616,6144,5376,7936,15104,24832,17664,-512,-12032,-5888,10496,23296,15360,3840,5632,19968,28416,22784,9984,3072,5376,18688,25088,11264,-7424,-8704,9216,10752,512,-14848,-18176,-7168,6912,5632,-10240,-11264,4608,8704,-8960,-17920,-1792,-256,-20736,-26624,-13568,2048,-7168,-11008,-8960,-19968,-26624,-19968,-14848,-23040,-24832,-4864,7680,-8704,-22272,-18432,-9728,-11776,-16896,-8704,-2048,-11520,-19456,-12032,-3072,-7168,-17408,-22016,-15872,-10752,-13568,-14336,-6656,1280,0,-3584,-6144,-3840,3072,5632,-4096,-3328,7936,10240,1024,-7168,-512,6656,6912,-3328,-3072,1536,3072,8192,9216,8704,9472,7680,5632,9216,20736,16384,-256,-3328,13312,25344,7424,-768,6656,22784,17920,3840,8448,9216,6912,14848,26112,22016,17152,19968,22784,19456,16128,21248,24832,9216,6144,15616,22528,13824,0,4864,6912,7936,2048,-1536,5376,15104,15360,1280,-3072,15104,23552,5120,-12544,-2304,19712,15360,-6656,-13568,1792,8448,1536,-7680,-13312,-16896,-6656,9216,3328,-9728,-10752,1280,5888,-1024,-13056,-10496,-5120,-3840,-512,-4352,-12800,-17408,-12288,-3584,-5888,-14080,-9728,256,3328,-8704,-6912,256,-1280,-5888,-3072,-3840,-7168,-8448,-15360,-14848,-12032,-8704,-13056,-17920,-18176,-12288,-11008,-18176,-18944,-7424,-4352,-10240,-14592,-15616,-7680,-2304,-6912,-22528,-24832,-12032,1024,2048,-12032,-20480,-14336,-4864,-4608,-15104,-17152,-11008,-4608,256,-3072,-8192,-15360,-12032,256,7424,-4096,-18944,-5888,11264,4864,-17152,-18944,4096,14336,-7168,-24064,-9728,4864,-1792,-10240,-5632,512,1536,4864,10496,11520,5632,768,9728,15104,2560,-3840,12288,24320,17664,2816,-7936,2304,10240,11008,13056,13568,8960,8960,17920,15872,8192,5632,10752,13056,13824,12800,3584,-3072,9984,17408,13824,1024,-6400,4096,15616,19712,8448,7680,9472,15104,17408,13312,11008,7936,8704,12544,8448,256,2816,14336,17152,12032,7168,-4096,-2304,-256,-3584,-5632,8192,13824,3072,4608,2816,-2304,-3328,9216,19712,2304,-18944,-8448,19968,19200,-11520,-19712,-4352,1536,-6400,-14848,-12032,-7168,-4608,-8960,-6144,1024,256,-1536,-5632,768,3584,-7168,-9984,-11264,-12032,-1536,1280,-12544,-25088,-17152,-5632,-11264,-15872,-14848,-8448,-2304,-768,-8704,-11264,-2304,-256,-7680,-16384,-10752,-1536,-6656,-19456,-15616,-512,3584,-14592,-30976,-18944,512,0,-10240,-13568,-11264,-1536,2560,-1536,-14080,-19712,-6400,-4352,-15872,-17152,0,11520,-1024,-12800,-13312,-16128,-11264,-11008,-10752,-10240,2048,11776,-512,-6912,-7424,512,3840,9472,7168,4352,2816,1024,3584,-1024,2816,4352,-2048,1024,3584,2048,5632,-2048,-3584,11264,31232,16384,-10240,4096,24832,22784,17152,17664,4608,-2304,11520,25344,12800,-6912,-1024,15616,16640,4864,2048,11520,20736,13824,8192,15616,22016,12544,4352,12032,18432,15104,3840,-1024,4352,14336,17920,6912,-4096,256,11776,8448,-5632,-4608,7680,8704,11520,8448,7680,9984,11264,4352,-4352,3328,8448,3840,-3840,-2304,-6656,-1536,-1280,-10240,-17408,-15616,-3584,3072,1536,1024,6656,2816,4608,3584,512,-10752,-11520,-12544,-7680,768,-7936,-14848,-12288,512,-5120,-9472,-8192,-2816,2816,8960,9728,-1024,-3328,7936,6400,-2304,-7168,-8192,-6144,2304,3072,-11264,-7680,2560,512,-13824,-11776,-9216,-10752,-12288,-10752,-11776,-14080,-15104,-14848,-9728,-10240,-4096,0,2816,2304,4096,2304,-2560,-2304,3840,256,-7424,-6144,1024,-3584,-9472,-9216,-11008,5120,2048,-768,5376,3840,6400,11008,11776,-4096,-11008,-5376,2816,768,-8960,-8192,-10496,-6400,-10496,-3584,1280,-256,7680,8704,16128,8192,-2048,-3072,7680,8448,3072,-3584,-3840,-5376,1792,13312,2816,9984,3840,1536,5632,0,256,8960,13312,9728,9216,1280,-6144,-2304,0,-3072,-512,256,2048,11776,22784,15104,10752,3584,5376,8960,4096,2304,4608,18176,15104,12800,4608,4096,2816,6400,10496,17920,16128,1536,10240,6656,5632,5888,4864,-3328,-11776,-10240,-10496,-11776,7168,7424,256,14848,14848,9984,8192,17152,7936,8192,9216,8448,4608,8704,6656,512,2560,-14848,-12288,-6912,4096,7424,10240,5120,5376,5632,4864,7680,2048,2048,-8704,-6144,-5120,-5888,-7936,-11008,-9984,-4096,-2816,-8960,-7168,-9472,-7424,-2304,-5120,-3328,-6656,-11520,-12032,-7424,-8448,-14080,-7936,-13312,-14592,-12800,-7680,-6656,-13568,-13312,-17664,-13568,-11264,-20992,-18432,-7936,-9728,-15104,-15616,-13824,-10496,-6912,-6144,-13056,-8704,-5632,-9216,-4352,-7168,-1536,2560,-6400,-8448,-11264,-8448,-6656,-3328,2304,-1280,512,-3840,2048,-3584,-256,4352,-7168,-4864,-9728,-8448,-7936,-6144,-6912,4608,4608,-2048,1024,4608,10752,8192,11520,11776,17152,16640,19200,17408,14592,7168,-1536,5120,11520,16384,12288,4352,7680,24832,18944,3840,1024,3328,11776,19968,19968,14080,6656,3840,9984,9728,9472,4864,11008,16384,14592,12544,8704,11264,-256,-3072,-1280,3840,3584,1792,14336,13312,6656,768,1280,4352,6144,10496,9472,4608,3072,6656,4864,-4352,-7936,-6912,-12032,-15360,-14592,-10496,-7424,-4864,-3584,-6656,-4352,-512,1024,3840,5376,4608,3328,-2304,-4096,-7168,-11008,-10752,-8192,-5376,-7680,-7680,-11264,-17408,-17152,-8960,-5120,-6400,-5888,-1792,4352,8960,7424,4864,-512,-3328,-2816,-2048,768,-768,-2816,-1024,0,-3840,-3072,-1024,-1792,-5376,-11264,-17152,-11264,-256,5632,5120,1792,1280,2304,9216,11008,7680,3328,-1024,-2304,-256,3072,7424,8448,8960,6656,768,1024,4352,3328,5632,3840,512,6144,11264,12544,12800,10752,4096,2304,3072,6400,7424,5632,4096,1280,-768,0,-768,-1536,-768,1536,6400,7936,6400,3840,-768,-8960,-4864,1536,3072,3328,768,-2304,-3072,-1536,-3328,-7168,-7424,-5632,-5888,-7680,-9216,-10752,-11008,-9984,-7936,-3840,-4864,-3072,-768,-1024,-3328,-7936,-3840,-768,-1536,-3840,-8192,-6656,-3584,-2304,-768,768,-1024,-6144,-6400,-7168,-5632,-512,768,-1280,-3584,2048,2816,3328,5632,4864,-3328,-8960,-4096,-4864,-5120,-2816,-2560,-5632,-5376,-4096,-1792,-1024,-1024,512,2816,5376,8960,10496,8704,9216,11008,14080,16640,17664,13312,10752,1024,3328,9728,7680,3584,-2560,-5376,-4864,-1280,1024,6912,5120,1280,-512,512,1792,4608,8192,12032,9216,9216,8192,7936,10496,7680,-256,-11776,-10496,-7680,-5376,-6144,-8192,-10240,-9216,-5888,-5376,-6656,-6400,-8192,-7680,-4096,-768,-256,-512,-256,-1280,-1792,-2048,1536,-256,-3072,-11520,-14848,-10496,-6400,-4352,-5376,-6144,-7936,-7168,-7168,-3072,-1536,-768,-512,-1024,0,2560,4608,5376,4096,2304,1280,2560,4864,4608,2048,-8192,-9984,-7424,-5632,-4096,-4096,-5376,-7680,-6144,-4608,-1280,-768,-1280,-512,768,3584,7168,8448,9984,9728,10240,9984,11264,12288,11520,6144,-2048,768,3328,4864,4864,3584,1536,2048,512,-2048,-256,-1280,-2560,-512,4864,8704,10496,9472,7936,6656,3584,5120,6400,5632,4608,-4864,-8192,-2304,512,-1280,-3072,-6656,-9984,-8192,-5120,-3072,-5120,-8704,-9984,-8192,-3328,2304,3584,1536,-2560,-3328,-3840,-1536,768,-256,-3584,-11264,-10240,-6912,-6656,-6144,-5632,-7168,-9728,-8704,-6656,-4096,-1792,-2560,-3840,-4096,-1536,2560,5632,5888,2048,-512,0,3072,5120,4352,-256,-5888,-5632,-5632,-4608,-1024,-1280,-3584,-4864,-2304,1536,4608,4352,1024,-1536,-1024,2304,5120,5888,3840,512,-512,1024,4864,6656,4608,1792,256,1792,-1024,-256,2560,0,-2304,-1536,2304,4864,5120,2816,256,0,2048,5120,5632,4352,2048,0,1024,3584,6144,5120,2304,-768,-768,-1024,-4096,-2048,-512,-3072,-4096,-2048,2048,3840,3072,-512,-3072,-1792,1024,3328,3328,1280,-1792,-3328,-512,2048,3840,2304,0,-2048,-768,-2304,-4352,-1536,-2560,-4864,-4864,-1792,1280,1280,-768,-3072,-4096,-1024,1792,2560,1024,-768,-1536,512,3072,3840,2560,-512,-1536,-512,2816,-2560,-5888,-3584,-3840,-3072,-512,1024,512,-1792,-2560,-1280,256,2048,1536,-256,-1536,0,1536,2816,2304,1792,512,512,256,1536,768,-5632,-6400,-4096,-2560,-1024,1024,768,-256,-1536,-1024,256,2560,3840,2816,256,-768,256,1536,3328,2304,1024,-768,-512,-768,2816,-1536,-7168,-5376,-3584,-2048,-1280,1024,1024,-256,-1280,-1280,0,2560,2560,1536,-768,-768,1024,1792,1792,768,-768,-1280,-256,1024,1792,-2560,-4096,-1792,-1792,-2048,-2048,-2048,-2816,-2560,-2304,-1280,768,768,256,-1024,2048,3840,2048,1536,2560,2048,1280,0,1280,3328,1792,1280,768,512,512,768,1536,-256,-3072,-2560,-3072,-1280,-4864,-4608,-2560,-1792,256,-1024,-1280,1536,3840,1792,1024,2816,-4608,-13312,1792,18944,15616,-1792,-6912,-8448,-6656,-9984,-9472,2816,-1792,0,5888,1536,6400,2048,-7680,3584,5120,7936,2304,-2816,-3584,-7680,-5120,-256,9216,9216,10240,5632,-4864,-2048,-6912,-17664,-3328,4352,9728,7424,-4864,-16128,-11520,12544,17664,9216,7168,9728,1536,-3072,-13568,-14080,-7424,-11008,-8960,7936,0,-11776,-15104,-18432,-1536,-4352,4608,10496,5632,-5120,-4096,13056,8960,9984,15360,14080,12800,9984,2304,1280,7936,10240,-1024,-3584,256,1024,1024,-3328,-9216,-16384,-19712,-5120,-512,-11776,-7424,-11008,-17152,-19456,-16640,-12544,-8192,-4352,-2048,-2048,-2048,-1280,-3328,-3584,-3840,-1280,5376,5120,-2816,-2304,256,4096,6400,2560,-2816,-1792,3072,3840,-1280,2304,3328,3072,6144,12544,16384,12800,5888,3584,12800,16384,15360,14592,18944,15360,13312,12288,10240,10496,14848,17408,11008,7168,1024,-1536,768,3328,3072,768,1536,-2304,-7168,-10240,-12800,-8192,-2304,512,-5120,-9984,-14336,-13568,-7680,-8704,-11520,-12800,-10240,-13568,-14592,-13568,-13312,-13568,-15616,-11776,-13824,-13312,-12544,-11264,-8960,-11008,-8960,-8960,-9472,-10496,-8448,-4608,-3584,-4352,-3840,256,768,-1792,-3072,-3072,0,5376,6400,5376,5632,6912,8448,10496,12288,11008,10240,12032,14080,16896,20992,20736,18688,17920,14848,14080,16128,14848,13056,10240,9472,9472,8704,10240,8448,7424,5888,3072,1024,1280,4608,6400,5632,2816,256,512,2560,2304,256,-1024,0,1024,512,-2304,-4608,-7168,-7936,-6400,-6400,-8960,-11776,-12288,-8960,-8704,-12800,-12800,-12288,-8960,-10496,-14336,-15616,-13568,-11008,-9472,-9216,-11520,-13312,-13824,-13056,-12544,-9216,-8192,-8960,-9216,-6400,-5376,-4096,-3584,-3072,-1536,-2048,-1536,-2304,512,1280,3584,4608,2304,768,768,2816,6912,10240,9216,6144,6144,7680,8960,10752,12544,10752,8704,11008,11008,12544,13056,12800,13056,13056,15872,14592,12544,12544,14848,16128,16128,14080,13056,12032,9984,10240,9216,7936,4608,5888,7680,6144,2560,-1024,-1536,-2304,-1024,-1792,-3584,-4352,-5888,-5120,-5376,-6656,-7680,-8448,-8192,-9216,-7936,-9216,-10752,-11008,-11776,-11776,-13056,-13312,-14336,-13568,-13312,-14080,-14848,-15104,-14848,-13056,-12544,-12544,-14080,-15616,-13056,-9472,-8192,-9984,-11264,-11264,-11264,-12032,-12032,-11520,-11520,-11520,-11008,-11264,-10240,-8960,-7936,-6400,-5376,-5376,-3072,-1024,-1280,-1792,-1280,1792,2816,3072,2048,3072,4608,6912,8192,7936,7168,7168,9728,12032,13824,14080,13056,13056,15360,17920,19200,19200,18944,18176,17408,15872,15104,16128,17920,18688,17920,15360,12288,11520,12800,14080,13824,12288,10496,11264,12288,12288,10496,7936,6656,6912,8192,7424,4608,2304,1792,2048,2816,2560,512,-1280,-1024,-512,-768,-1792,-3072,-3584,-3328,-3328,-4608,-6144,-6912,-6656,-5376,-5632,-6656,-7936,-8960,-9216,-8704,-8448,-9216,-9728,-9984,-10496,-11008,-11264,-11008,-11520,-12288,-13056,-13056,-12544,-12288,-12544,-13056,-13824,-14336,-14336,-14848,-15616,-15616,-15616,-15360,-14592,-15104,-15104,-15616,-15360,-14080,-13312,-13568,-14592,-14848,-14848,-13312,-12288,-12032,-12800,-13824,-13312,-12544,-11520,-11008,-10752,-9472,-7936,-6400,-6144,-5888,-5120,-3840,-2816,-2816,-3072,-3072,-2560,-512,1024,1280,512,0,768,1792,3840,4864,5376,5888,6400,7936,8704,9472,9472,9216,9472,9984,10752,11008,11776,12288,12800,13312,12800,12800,12288,12800,14080,15104,15360,15104,14848,14080,14592,15360,15872,15616,14848,14592,15360,15872,16384,15616,14848,13824,13312,13056,12544,13056,12544,12032,11520,11008,10752,9728,9472,9216,8704,7936,6656,5632,4864,4864,4864,4096,3072,1280,1024,256,-256,-256,-768,-1024,-1024,-768,-1536,-3072,-4352,-4608,-4608,-4864,-5632,-6400,-7424,-7168,-7168,-6912,-7936,-9216,-9728,-9984,-8448,-7168,-6912,-8448,-9472,-9728,-9984,-9216,-9472,-10240,-11264,-11520,-11008,-11008,-11520,-11520,-12032,-11776,-12544,-12032,-12288,-12544,-11776,-11776,-11264,-11008,-10496,-11008,-11264,-11008,-10752,-10496,-10496,-10240,-9984,-10240,-10240,-10240,-10240,-9984,-9984,-9472,-9728,-9216,-8704,-7424,-6656,-6144,-5632,-5888,-5120,-3840,-2560,-2048,-2560,-2816,-2816,-2048,-1024,0,256,0,512,1024,1536,3072,3840,4352,4096,4352,5376,5888,6400,6144,5632,5632,6912,8448,8704,8192,7680,7936,8960,9216,10240,9216,9216,9984,11008,11776,11264,11008,10496,11008,11520,12032,11520,10496,10496,11008,10752,10496,10240,10496,10240,9984,9728,8448,8960,9472,10496,10496,9728,8960,8448,8704,8960,8448,7168,5632,5120,5376,5888,5120,3328,2304,1024,1792,1792,2048,2304,2304,2560,3072,3328,2560,1280,512,256,-1024,-2048,-2560,-2816,-3584,-3072,-4096,-3840,-4352,-5376,-7424,-8448,-3840,-2304,0,-512,1024,4608,4352,3072,2048,1280,-768,-1280,-256,-3840,-5376,-10240,-13056,-13824,-13312,-6912,-9472,-8192,-7680,-1280,2816,4864,5120,2816,-512,256,1536,-768,-2816,-10240,-5632,-9216,-2304,2560,1024,0,-5120,3584,5632,3328,2048,5120,5888,-2048,-1536,-4352,-12032,-7936,-3328,4096,6912,7168,8960,11776,18432,16128,13568,8448,7424,11520,4352,-6912,-11520,-5376,-2048,-4608,4096,6144,-512,512,-768,4608,8960,11008,18944,16640,14848,13568,9216,2304,-2048,2560,1280,0,-512,12288,9472,4864,9472,12800,5632,-1024,8448,3840,3584,-2816,-2048,-15616,-12288,2304,5120,8192,7424,7168,3328,7936,2560,10752,9472,8448,6144,7168,4352,-11520,-9728,-9984,-16384,-18688,-7424,-6144,768,-512,-3840,-256,-6656,-5632,2304,3584,1536,-1280,-5888,-9984,-16128,-9728,-10240,-11264,-13568,-6144,-3840,-5120,-1024,256,2560,-5888,256,1536,-4864,-8192,-18432,-20480,-12800,-10752,-256,2816,-256,-1024,2304,-256,-5120,-3328,-2048,-1280,-9472,-9216,-7424,-12032,-14592,-6400,-7168,-15616,-14592,-4096,-4352,-6144,-7936,-5632,-2304,-4096,7424,5888,-2304,-9216,-11008,-7936,-9472,-6144,-1024,-3584,-768,-256,3584,2560,-7168,1536,2048,768,2816,4864,3072,-7680,-10496,-9216,-4096,-10752,-768,10752,3072,3328,6656,11776,2560,0,6400,8960,-1536,-6400,-3584,4608,1024,-2560,1792,-2304,2304,2560,8704,1536,-4352,-768,5120,3072,11008,14848,6656,4864,-1024,2304,-2560,-7168,-512,8704,7168,3328,8960,18432,10496,12288,17152,11264,6912,4352,6656,4864,4864,0,10496,8704,7680,11520,12288,9984,2048,11776,8448,6400,6912,11264,9216,-4096,-512,6656,4352,-1024,3072,8704,5632,5120,9472,5632,2304,5888,9728,4352,4608,11776,10240,3840,1792,5632,-1280,-1792,5888,10240,-768,-5120,11264,16896,1792,3840,15360,512,-6912,-1536,4608,-8192,-14080,-10240,-7936,-3840,-1792,256,1024,2816,-6400,-256,-2816,-7680,-6656,-5376,-6400,-15616,-5632,-6912,-9984,-10496,-14592,-12544,-12288,-11776,-11776,-8704,-10240,-11264,-11264,-13312,-12032,-11008,-12544,-15616,-16896,-12544,-15616,-13312,-4352,-6656,-10752,-4096,768,-7424,-3328,2560,-3328,-10240,-3584,-3328,-6144,-1792,-3072,-3072,-3584,2816,-4096,-1792,2560,1024,-1792,6656,9984,-5888,-5376,9728,5376,-22016,-6144,4096,-10752,-21504,-9216,-4352,-3584,-3584,-11776,1792,11264,8448,1024,9472,8960,4352,1280,4096,-512,1792,3840,0,5376,4608,1792,0,7424,4864,-2816,1536,9216,-256,-768,5120,3072,1280,7680,5888,-768,7168,9472,3072,5120,11776,4608,-1792,6400,7424,-768,5376,12288,256,-10240,10496,9472,-14592,-12288,1792,-5120,-23040,-20736,-16896,-9728,-8960,-20480,-17152,-2048,-5120,-14080,-5120,2048,-5376,-9728,-4352,3328,-3328,-10496,0,8192,0,-14592,2048,11264,-1024,-7168,5632,10752,-5888,-3328,7168,4352,-6912,-512,2560,-2048,-5120,-3328,2048,512,-2816,-512,5376,256,-512,4608,8704,13824,13312,9472,7424,19968,17408,-4096,-1536,9472,5888,-13312,-12800,5632,11520,-6144,-13824,12800,16384,-1536,-4096,11776,7680,-6400,512,6912,256,-7424,5376,9216,-4352,256,7936,4352,1280,6656,9728,2560,3328,5632,8192,3840,-10496,-7168,5632,1024,-6912,-512,2304,-9984,-8448,-5120,-8448,2816,5888,-11776,-14336,10240,12288,-3328,-6656,4608,-256,-22528,-20480,4864,11520,-17152,-26368,-8960,-11520,-11776,-1792,1536,-4096,-12288,-7168,-2304,-256,3584,16384,7168,-4096,-256,5376,4608,4608,0,-6144,-5120,-12032,1536,3328,-5120,-14080,-9984,-6400,-5888,3840,512,-6912,-2048,-3840,-5888,4864,8960,13312,11264,4608,8704,28928,25344,8448,19456,32512,8704,256,16128,20480,-6144,-19712,-768,4864,-1792,-18688,-1536,2304,-11264,-12288,-2560,9728,7168,3584,5888,8448,6400,7168,11776,9728,7936,9984,7424,6144,8704,8192,-6656,-8704,-4352,-768,-10496,-10496,-6144,-11264,-15872,-15872,-2304,-4352,-5120,-8960,-6144,-4608,-8192,-6400,-1024,-2048,-6656,-1536,6912,2304,-6656,6144,8448,-11008,-11264,8704,4608,-13056,-13824,-2304,-5888,-12800,-13568,-768,1280,-9728,-2304,-256,-3328,-768,2304,-1536,256,768,-2560,-2048,768,-4096,-4864,512,1280,2304,1792,3584,1024,3584,5376,2304,3584,7424,9472,7168,8704,12288,9472,8704,11264,12288,11776,11776,14080,13056,10752,8448,8960,8704,6912,4864,3072,2048,512,-512,-2304,-4096,-4864,-6144,-7168,-7168,-6656,-7168,-8448,-7936,-9472,-9728,-7936,-9728,-10752,-10240,-11520,-12032,-10752,-9984,-10240,-10496,-8448,-9216,-9216,-7680,-6656,-7168,-6912,-5632,-4864,-3840,-2816,-2816,-2816,-1536,-1536,-512,256,512,2048,3328,3072,5120,6400,6144,5888,6144,7424,5632,5376,6400,5888,5120,4096,4608,5120,4096,3072,2048,1024,512,256,-256,512,-256,-2304,-1280,-256,256,-2048,-2816,-2304,-3072,-3584,-3072,-2048,-3584,-4608,-4096,-4096,-4352,-4352,-4352,-5888,-5632,-4352,-3328,-2304,-512,0,256,2304,3328,5376,5632,5120,5632,5888,6656,6144,7424,7680,6656,6400,6400,6400,5632,6144,5120,4352,4608,5376,5120,5120,6912,4608,2816,2816,3584,3584,2816,768,-1792,-2304,-2560,-3328,-5376,-5120,-5888,-8704,-8704,-6656,-6144,-7424,-8192,-8192,-7424,-7424,-7936,-6912,-6400,-7168,-7680,-6144,-4352,-3584,-4096,-5888,-4864,-3072,-3584,-4096,-2304,256,768,1024,3328,5632,5632,4096,3840,5888,7424,6400,5888,8448,8704,7168,7168,8448,8960,7680,6144,6656,6656,6656,6912,5376,5376,4096,2048,-256,512,1792,-2048,-5120,-4352,-3328,-4608,-7168,-7168,-7168,-7168,-7680,-6912,-5120,-5376,-5376,-5632,-5632,-5632,-5888,-8192,-8704,-7168,-5632,-7168,-6912,-2816,-1024,-4096,-5376,-1792,512,-256,-2304,2304,6656,6400,6144,8448,12032,11520,7680,7680,9984,7680,5120,3840,5376,5888,4864,2816,3584,3328,512,-256,1536,5376,4864,3584,4096,6144,5632,3840,1536,4352,3584,-512,-1024,768,-1792,-6144,-6400,-7936,-7168,-7680,-8448,-8192,-8448,-7680,-5632,-3072,2560,4608,-1792,-5120,-3328,-1280,-1280,-4608,-6912,-3328,-3328,-12032,-7168,-3840,-1024,-512,-6400,-1024,2048,3584,-1792,512,6912,11264,11520,9984,5888,10240,18432,16128,11264,13312,18432,19712,15360,13568,19456,19200,19968,5632,-2816,-10752,-3328,-4608,-22784,-24576,-25344,-17152,-19200,-23808,-20224,-17408,-16896,-15104,-11008,-5120,-11264,-13824,-6400,0,-2304,-3072,-12288,-11264,1792,-768,-4352,-14848,-9984,2816,-512,-2560,-9216,-3072,-1792,-6400,2560,6912,12032,7680,8704,15616,21760,19712,25344,26880,28672,31744,31744,28416,27136,29952,30720,17152,-8192,-4096,12288,17408,-9472,-10240,-9984,-13824,-4096,0,4864,-1280,-10496,512,7936,5888,5888,-3840,-4352,-4096,4352,768,-13312,-24320,-10496,-5888,-18688,-27904,-27904,-15616,-8960,-5888,-17920,-26368,-16384,-4608,-1792,-7936,-14336,-2816,-5632,-4096,8192,8960,-1024,-2048,11520,18432,7680,-3072,3840,7424,-4864,-21248,-6144,1536,-9984,-9728,-9216,-14336,-5632,5376,15872,19456,16896,12544,7680,17408,27392,30720,13568,2560,7168,18432,21760,16640,7680,512,-1792,-4096,4096,3584,-1536,256,6400,5120,768,2304,6912,4096,2560,5376,2816,1792,2304,7936,11264,15104,5120,-5376,-3584,0,1280,-18688,-31744,-32768,-14336,-4608,-27392,-32768,-32768,-29696,-19200,-14080,-4352,-6144,-13568,-17152,-7168,5632,8448,1280,-18688,-15616,-12032,-1536,1280,-12800,-19456,-19456,-12288,-8704,-6400,-8448,-3072,3072,11776,12800,13056,18176,24064,23040,22784,22016,23040,27136,20992,29440,31744,32512,27392,19200,19968,26624,21248,-12288,-28160,-14848,8960,5120,-9472,-14848,-11520,4096,9216,17920,27392,24576,8704,5376,18176,29184,27648,10752,-3072,-6656,-5376,-2560,-6656,-24576,-28672,-25088,-17664,-15104,-17152,-20736,-20736,-11520,-3840,512,-12288,-13056,-9472,-6912,-2816,-2560,1536,-3584,-5888,2560,14848,7936,-7680,-15360,-7680,1024,-20992,-32768,-32512,-29696,-19968,-23808,-32512,-32768,-24320,-4608,10752,14848,4608,-1792,7936,15104,19456,16384,10240,3584,7680,13056,5888,-2560,-10496,-9728,-2560,-3840,-2048,768,-1280,3840,11264,17664,23552,20224,7680,7424,9472,16128,19456,18944,24832,30208,32512,32256,32000,21760,19456,21248,15872,2816,-16896,-19200,-6400,-768,-4608,-10496,-16384,-11264,-1536,5376,10752,12800,4096,2048,8960,11264,8960,-1280,-5888,-7424,-6144,-7680,-12032,-18688,-24832,-24064,-20736,-18688,-24320,-24320,-18944,-17152,-17408,-19968,-21504,-19200,-14080,-14336,-16384,-23296,-20480,-11520,0,4864,256,-1280,-7680,-4864,-8192,-12288,-26112,-28416,-21760,-18432,-21760,-19456,-17408,-25856,-17408,-14592,-16128,-12288,512,-768,2560,4864,6144,3072,5888,8192,1536,1024,512,7168,1280,2560,0,-5632,-7936,-768,5120,7680,7168,6656,9472,7424,14080,16128,16640,15616,19968,24576,26624,28160,27648,29440,31744,32512,29440,23808,14336,9728,4096,13056,11776,4096,12800,10752,4352,4864,9984,7168,17408,26368,19200,14080,18688,22016,22272,20736,13312,7936,10496,11776,11264,9728,4864,-2048,-4352,4608,2816,-256,-2048,-6400,-8192,-512,2816,1280,2048,-3072,-8192,-1792,3584,-1536,3072,256,-2816,-1280,2816,3328,3072,2048,-1280,-4608,-3328,768,-5376,-10240,-12032,-6400,-7680,-13312,-13312,-16896,-21760,-19968,-15872,-16640,-18944,-19456,-24064,-24064,-17920,-15104,-16128,-17664,-15360,-17408,-16128,-11264,-14592,-15360,-8704,-10240,-11520,-13568,-13568,-14848,-15104,-12800,-14848,-15360,-14848,-13312,-13824,-10752,-9728,-6912,-5120,-1280,-1536,-2048,768,-1280,-768,-4096,-768,-3584,-4096,-768,-2560,-3072,-2048,-4096,-8192,-256,2560,-768,-2048,768,-768,1792,5120,3840,5376,3328,4864,5120,7168,9216,8448,9216,9472,12288,13568,11520,12288,12544,12800,13312,12288,11008,10240,10752,9984,12288,16896,20480,19968,19200,18944,22016,23808,22016,20480,17920,18176,17408,18432,15360,14080,14336,11264,9472,10240,5376,1024,2560,2304,1792,5376,7168,1536,1536,-768,1536,-1024,1280,2304,256,4096,256,3072,1024,2304,768,768,512,-1792,-3328,-6912,-7424,-7936,-7680,-8448,-6912,-7168,-5888,-5632,-2816,-2304,-512,-768,-1792,-2304,-4608,-4608,-5376,-5632,-6912,-7424,-9472,-7680,-10240,-12288,-13568,-13824,-15616,-13312,-14080,-15872,-13312,-15616,-13568,-15872,-15360,-17408,-19712,-17664,-18432,-15616,-15360,-15872,-13312,-12800,-11008,-10752,-9216,-9472,-9472,-8448,-10240,-8960,-10496,-11008,-12288,-12032,-11264,-11008,-7936,-6912,-5888,-5120,-3072,-1792,-1024,-256,1792,2816,4864,3328,2816,3072,2560,2048,-1536,-768,-3328,-3328,-6656,-3840,-2304,-5376,-5376,-7936,-5888,-7424,-5376,-5632,-4096,-4096,-5120,-3072,-2816,-256,4864,9728,10496,11264,10496,11776,8448,10496,7680,5888,6656,3072,5888,2816,512,-512,-768,2816,8192,14592,14336,9728,10496,11776,19456,24320,28928,17920,3328,3072,3328,5376,6144,2048,4096,6912,2816,7168,5632,0,-1024,-5632,-5120,-1792,-10496,-11008,-17408,-17920,-19200,-13312,7424,13312,13568,7936,-3840,-8960,2816,2816,256,-3584,-14336,-11008,-11776,-13312,-14080,-16128,-7168,-6400,-5888,1280,8448,12544,19456,17664,15360,15872,11776,18176,10752,6656,-2304,-6144,-768,-8704,-10496,-6912,-4864,-1536,1280,0,3328,-11264,-19968,-9216,-12288,-8960,8704,11776,6912,-1536,-3584,11776,8704,6400,2048,-5632,1792,14080,17920,12544,5376,3840,-1024,-5632,-6400,-5888,-4352,-7680,-2560,-9984,-8960,-6656,8192,19200,16640,21504,23040,25600,22784,22528,10752,-768,-12288,-6400,-2560,-9216,-512,6144,7168,6144,-2048,-3072,-6912,-15872,-6656,-6400,-4608,-256,3584,1024,-5376,-9216,-5632,0,-2304,2816,-768,-11776,-19712,-9216,-1024,-4608,-10240,-11776,-10752,-11264,-7680,-9216,-11520,-9216,-5376,-1792,1536,-1024,11776,15872,12288,15872,8960,11264,6656,7424,9728,-8960,-11264,-9472,-13568,-14848,-8960,-8448,-9984,-5632,-6912,-2048,-10752,-13824,-8960,-8192,-12288,-7936,1024,-768,3328,5376,4608,-1536,-1280,-4352,-15872,-21504,-16128,-9728,-5888,-3072,-1024,-2816,-7168,-10752,-5120,-5632,-5376,3328,0,4352,4096,9216,11008,3072,6656,8448,8192,13824,10240,6144,3584,-2816,-6400,-768,-17920,-22528,-6144,-11008,-3328,16640,21248,-1024,4864,-8960,-8704,0,-10240,-2816,-3328,-4864,-3328,512,-2816,5376,5632,9216,-1024,2816,10496,6912,-256,-5632,-9728,-17408,-5120,-9216,-2304,1280,3840,12544,15872,18944,9984,25856,16384,11776,28672,1792,8448,2560,16640,20992,-2560,1536,-27648,-14592,-16640,-15616,12800,11520,17152,25344,4096,-6144,4096,-7936,-6912,-512,2816,2560,1280,-1024,3584,4352,6912,7168,9216,7680,1280,11008,2304,512,1280,-6144,512,2304,7168,13568,12288,16896,12800,11776,16128,19968,21248,15616,8448,4864,3328,4352,12544,7168,3328,-256,-3840,6912,4096,-6400,-18432,-16128,8960,6400,11264,12800,7168,14848,11008,15360,9728,-2304,-11776,-15872,-15104,-12544,-4096,-2560,-9728,-9984,-9216,-10496,-10240,-8448,-12544,-13824,-15872,-16384,-7680,-7936,-2816,-8448,-3072,-512,256,2304,256,3584,768,-512,-2560,-3072,-5376,0,2560,1024,-6144,-8960,-2048,7680,5888,-5632,-29184,-17920,3072,3840,6144,-2048,256,-4096,-1280,2048,-2560,-11008,-16640,-19712,-14080,-9472,-512,-512,-3072,-2304,-1536,6144,2304,9728,-256,-4608,-2048,3328,8960,8448,4608,-2560,2048,12800,16896,7680,6144,3072,4608,7168,11776,11008,768,-4096,8192,8192,768,6656,4096,5120,0,-1536,-13568,-11776,13312,13056,8448,6656,7936,7168,1280,3840,1280,-6912,-11264,-10496,-8192,-4096,-6656,-6656,-12544,-13056,-5888,-6400,-6912,-11008,-10240,-11264,-6400,-7936,-6400,-3328,-5888,-4864,-2816,5888,5376,1280,1280,-2048,512,1792,4608,2816,-8448,-4352,4096,3840,-768,256,-4352,-3584,1280,-2560,-16640,-11008,9472,4352,4096,1280,256,512,3328,5632,-3840,-7936,-8704,-4608,-1792,-7680,-13312,-12544,-6912,3584,7680,5632,4096,10496,14592,12800,12032,6400,5632,7936,8704,4864,6912,10496,11264,9216,9728,7680,5888,8960,5120,2816,-256,-768,4096,8704,5120,3840,3328,4096,8448,9984,-1536,2048,14848,4608,-2560,-4352,-2560,-512,1536,2560,-4352,-7424,-3328,-2304,-6400,-12032,-14080,-17920,-13312,-9984,-8448,-5632,-6400,-2816,-512,-2048,-4352,-2048,-5888,-10240,-13056,-14592,-11520,-6144,-2048,-768,3328,5120,6144,3584,512,1536,-3328,-4096,256,256,1024,768,2816,7168,6912,2048,-9984,-3840,2304,-2048,-4096,-7936,-3840,-1280,512,1280,-4096,-3584,1280,-4608,-8960,-6400,-4096,-3840,-2304,-512,-1024,2048,7680,12032,8960,9216,9984,8448,8960,7936,4864,4096,5120,4096,4608,5632,8448,9472,5888,2048,2816,4352,1536,2560,3584,4352,7424,8704,8448,10496,11520,6144,5632,9728,4608,768,768,768,-256,-2048,-3328,-5888,-6400,-5376,-8448,-10496,-7936,-7424,-7680,-6912,-5632,-3840,-2816,-3072,0,1024,-1536,-3072,-3840,-4352,-5376,-5888,-5632,-4096,-5376,-5376,-6656,-7424,-7936,-8192,-8704,-7424,-6144,-6400,-4352,-3328,-2048,-1280,-768,1280,4096,3584,1792,2304,1792,512,-2048,-2816,-1536,-2048,-2816,-3584,-4352,-4608,-4608,-5120,-3328,-1536,-768,0,2304,4096,5376,5632,6656,9984,10240,9216,9472,9728,9728,7680,6656,8704,8192,6912,6144,5120,2816,2048,-768,-1536,1024,0,256,2048,3840,6144,6400,7168,10496,11264,9728,8704,6912,6144,5120,768,-768,-256,-1536,-3328,-5376,-7168,-7680,-9216,-10496,-7424,-6144,-6912,-5376,-4096,-2304,-768,-1536,0,2048,768,0,0,-1792,-2560,-3584,-4864,-4096,-4864,-5376,-6144,-7680,-8192,-8448,-11264,-10240,-7680,-7424,-6400,-5888,-3584,-1536,-2304,-512,3072,2560,2304,2816,1792,1280,0,-1280,-1024,-1280,-2816,-2816,-4096,-4096,-4096,-6400,-5376,-2048,-768,-256,0,1792,4864,4608,5632,9728,10240,9216,9472,9984,9984,8704,6400,6400,6656,4608,4096,2816,2048,512,-2304,-2560,-1536,-768,768,1280,2304,5632,7424,8192,10240,12544,11776,10752,9216,7680,5888,2560,512,-1280,-3328,-4864,-6656,-8192,-8704,-10752,-10752,-9984,-7936,-5120,-4352,-3840,-1280,1024,2560,3328,2816,3328,2560,256,-2816,-4096,-4864,-5632,-5120,-7680,-8960,-9216,-8448,-8960,-9472,-9216,-8704,-7424,-6400,-5120,-3840,-3072,-1792,768,1536,2816,4352,3328,2560,1024,0,-256,0,0,-1536,-3328,-3584,-2816,-4096,-4096,-4096,-3584,-3584,-2560,-512,256,1280,3072,6656,7424,7680,8704,9472,8704,7168,5120,4864,4096,1792,0,-1792,-2560,-4608,-5632,-5120,-4352,-4352,-3072,-1536,-256,1792,4352,6656,7936,9984,11008,12800,11520,8448,7424,6656,3072,512,-4352,-5120,-4608,-5888,-5632,-6400,-7936,-6912,-3584,-3072,-512,-256,3840,1024,3072,4096,3072,4352,3328,1024,-3840,1024,2048,2048,-256,-7680,-10752,-4864,-4864,-6400,-4352,-5376,-4608,-5632,-1536,-1280,-4096,6656,7936,7680,5376,5888,8960,-4864,-3840,4096,4352,-1024,-3328,-1280,-1024,-10752,-8448,-2304,-3072,2560,-1536,2048,-11264,-17152,0,12032,14592,4352,0,-7936,-10752,8960,20736,5632,-11776,-17664,-6656,768,1536,-1536,-12544,-6400,-4864,-9728,-3072,1792,5376,-4096,-3840,11008,13568,-3328,-7424,5120,1792,-1536,-1792,1792,9984,12032,3584,7168,10752,11264,5632,8448,7680,-5120,2304,-2304,12032,25856,17408,13056,3584,6400,3072,3328,17920,18688,12288,-3072,-8960,1024,4864,6400,3584,-8704,-14336,-18176,-14336,-7168,-11776,-14592,-14080,-11264,-12544,-23040,-28416,-18944,-9984,-7424,-11520,-15616,-4864,4352,3072,-2560,-4352,3328,3840,7680,4864,5376,13568,7680,7936,11264,18176,16384,7680,13568,14848,13568,11264,9984,20480,16128,11008,-1536,-12032,1792,3840,-5888,-11264,-11520,-9984,-13312,-16896,-6144,-12544,-24064,-27392,-23296,-14336,-18944,-22784,-20224,-2048,7168,-1280,-12032,-14848,-12544,-5888,5888,12800,-512,-11776,-4864,4864,21760,14592,1024,-512,-1280,6912,14336,12032,8448,3840,-1280,-2048,2816,11008,2560,-6144,-768,12800,13056,-3584,-768,1280,1792,9984,3328,-4096,-8960,2304,15872,11776,13312,11008,9216,13056,15104,19968,7168,-1792,3584,9472,11520,-1280,4096,11776,5632,10496,3328,768,-4096,-5376,2304,2560,3584,-11264,-15872,-16128,-12800,-8192,-17408,-25088,-24576,-15360,-13568,-26112,-24576,-15360,-22016,-14336,-17152,-15616,-14080,-19712,-9728,-2304,6144,512,-3584,1024,3840,5888,6400,4864,6400,5376,6144,2816,8448,19968,7424,9984,13056,19968,20480,6656,13056,20224,16896,11776,7936,5376,7424,3840,3584,1792,8448,8960,3072,-1536,-4352,-1024,-12032,-12032,-5632,-5120,-5120,-8960,2304,13312,1280,-7680,-9472,-4096,2560,1280,-2560,-6656,-7936,-9728,-6912,-4608,-6656,-3072,-7936,-4352,5632,-1024,-7936,-17152,-6144,4608,-4352,-8704,-16896,-18432,-12288,-6656,-9728,-14848,-12288,-16384,-17152,-16128,-17152,-19456,-23040,-13312,-6400,-10240,-9472,-9728,-768,9728,12544,10496,5376,13312,20480,21248,18432,16128,14592,11264,13824,18944,18432,14336,15104,20480,17920,14592,13056,10752,11264,13056,16640,12288,9216,12288,12288,7168,6912,10496,5120,-2048,256,6144,2048,-2304,4096,8704,6912,10240,14336,14080,13312,15360,15872,18432,23040,22528,19968,18176,19712,16128,11008,5376,3072,8192,6656,5376,7680,4864,1536,-1536,-768,-3328,-8704,-10496,-13312,-14080,-15104,-15104,-15872,-23296,-24064,-20736,-26880,-29952,-29440,-29184,-32000,-30976,-23808,-23808,-25600,-20480,-15104,-11264,-8448,-9984,-9984,-7680,-3840,-5888,-5632,-2560,-3584,-9984,-14080,-9984,-7680,-10240,-12288,-9984,-7168,-9728,-8192,-6912,-10496,-8704,-9216,-10240,-10240,-7936,-9984,-11008,-8448,-7168,-9216,-9472,-7936,-6912,-4352,-2816,-768,-3072,-2816,-256,2048,3328,6400,9472,8704,12800,19200,21248,18944,18688,20736,22528,23296,24832,22272,21248,22784,22784,22528,20480,18688,16640,14336,14080,16896,13056,9216,11776,11776,10496,9984,12288,10752,8704,10752,11264,11264,13824,12032,9216,11776,13056,12032,7680,4608,5120,6656,2560,2304,4352,4096,4608,5632,6912,5120,6144,5888,6400,6912,6144,4864,3584,2816,768,-1536,-2560,-4608,-8192,-10752,-13056,-13568,-13312,-15616,-19200,-20224,-18176,-17408,-20736,-22272,-19968,-17920,-17408,-17664,-17664,-17664,-18432,-18688,-20736,-22272,-20736,-22784,-25344,-23296,-21504,-21504,-21248,-18688,-17408,-17408,-14848,-13312,-12032,-11264,-11008,-8960,-7680,-7680,-8960,-9216,-7936,-7424,-8704,-9472,-8704,-7680,-6912,-5888,-4864,-3840,-3584,-3072,-1536,-256,-256,1024,2048,2304,4352,4864,5120,6144,7168,6656,6656,7936,10240,9216,9216,12288,12032,10240,11264,13056,13056,13568,13312,15104,15360,15616,15360,15104,16128,17408,18176,17408,17152,18176,19968,19200,21248,20736,18432,19456,20480,20224,17664,16128,15872,14336,11776,12032,10496,8448,7424,6656,6144,5888,5376,3328,4096,4864,3584,1792,2304,2816,1280,768,1792,512,-1536,-1792,-1024,-1280,-2304,-1536,-3072,-3328,-3328,-4096,-4352,-4352,-4096,-3840,-4352,-4608,-3584,-5376,-6400,-5632,-6656,-7680,-9216,-9728,-9728,-11264,-11008,-11264,-12032,-11776,-11776,-11520,-11776,-10240,-9984,-11264,-11008,-10240,-9472,-11520,-10752,-9728,-10496,-9472,-9984,-8960,-8704,-8960,-8960,-7168,-7424,-6912,-6400,-7680,-5120,-5120,-4608,-5376,-5120,-5120,-5120,-5888,-5632,-5632,-5376,-5120,-5632,-4608,-5376,-5632,-5632,-4352,-4864,-4352,-4864,-4608,-3840,-2304,-1024,-2816,-1792,-1280,-256,256,1536,2048,2560,4352,5120,7168,8192,7936,9472,9216,9984,11008,9984,10496,10240,11264,11520,11520,11776,11264,11264,11520,13312,13056,12288,10496,10752,12032,11520,10496,9728,10240,11008,9984,8704,8448,8192,9472,8704,8448,7936,7424,7424,7168,8448,8704,7936,6400,7936,7936,8448,7168,6400,7168,5888,6912,5888,5632,4352,3584,3584,2560,1280,-256,-1024,-256,-256,-2048,-1280,-1792,-1792,-1280,-1280,-2048,-2560,-2560,-3584,-4352,-4864,-5120,-6400,-5888,-5632,-5120,-5376,-6400,-6912,-7168,-6144,-6144,-7936,-8448,-7680,-7680,-7680,-8448,-9216,-9728,-9728,-10240,-10240,-9984,-9728,-9728,-7680,-5888,-5120,-4864,-6656,-4864,-3584,-1280,-2304,-3072,-4352,-6400,-6656,-8704,-8960,-6656,-4864,-1280,1280,2560,4352,2560,1024,1280,2304,2560,3584,4096,5376,3584,-3328,-11264,-14848,-16128,-20736,-26368,-20736,-10240,-6912,-7168,-6912,-4096,-2304,0,-2816,-768,3584,8192,5632,-1280,-1024,1536,8960,6656,2816,2816,11520,17664,12800,13824,12800,18944,16640,14080,7680,8192,15360,8960,2048,-11264,-10752,-10752,-14336,-23040,-29440,-20224,-9728,-7424,-5632,256,5888,9984,7936,1024,4608,4352,-4864,-9728,-17664,-12032,-8192,-2048,-2816,-2816,3072,7424,13824,11264,12800,14080,12544,7680,5632,5632,11008,14592,12544,10496,7680,2304,-2048,-6144,-11776,-11520,-12800,-14336,-12800,-9216,-5120,-5120,-10496,-11776,-8448,-3584,1280,-512,-2560,2048,8704,9984,10496,8704,9728,11008,7936,7424,11008,13312,10240,9216,10752,12544,15104,19200,17920,19712,25344,23040,17408,11008,768,-5632,-13568,-19968,-18432,-11520,-5376,-1792,-1024,1280,8448,7936,9472,9216,15104,12288,10240,1280,-7168,-8704,-13056,-16384,-22528,-11520,-5376,-2048,-3840,2304,6400,12288,15872,13312,14592,16128,13824,8192,9728,7168,4864,-2816,-15360,-28672,-28416,-16896,-5376,-512,-5376,-5120,-5376,-6144,-2304,-3840,2560,5888,2048,-6912,-15616,-20736,-20992,-17152,-16128,-15616,-13312,-7168,-7424,-6656,256,11008,12544,16896,12544,7424,6400,5120,8704,7936,9728,6144,-3840,-19456,-22784,-18944,-2560,6656,1536,2304,0,-2560,-2560,2816,9728,15616,11520,3840,-4096,-10240,-14336,-14848,-13824,-13824,-12288,-11520,-12288,-12032,-6912,4864,13312,12544,11264,8704,5632,5376,8192,7168,8192,5120,1280,-11776,-27392,-30976,-25344,-8704,-768,-4608,-12288,-11520,-11776,-4608,256,7936,19456,18176,8448,-6144,-9216,-10240,-8704,-7680,-8192,-10752,-8960,-14080,-14848,-5632,8960,21760,25600,23552,10496,8960,8704,15872,24064,18432,9728,3584,-13824,-26368,-23552,-14336,6144,9728,5632,-1792,-7168,-3072,11776,18432,27392,28672,18432,10752,-6912,-9216,-5632,8704,5888,-3328,-10752,-13056,-8960,-2816,15616,25856,32512,27136,14848,6400,9472,18432,30720,30464,24064,7168,-14336,-23296,-25088,-16128,2816,12544,4096,-5120,-15360,-17152,-4096,15616,27904,30976,14080,-3072,-17408,-25856,-16384,-9216,-2816,-6400,-21248,-30208,-32256,-30464,-13312,10496,18688,15616,3584,-10752,-13568,-4096,11008,22272,17408,4352,-12288,-32256,-32768,-25344,-7168,10240,2816,-9984,-19968,-24832,-12800,7168,26624,32512,25600,10752,-9216,-23296,-22528,-7168,-1536,1536,-16384,-30464,-32256,-29696,-21760,-4608,12288,17408,18688,-256,-4608,-5120,12032,30464,32512,26880,12544,-7680,-24576,-21248,-10496,11008,16128,6144,-12288,-23552,-22528,-6144,16128,30720,32512,26880,8448,-6400,-12800,-5376,13056,15872,14336,-8192,-24832,-29696,-23040,-4864,15616,24320,18688,8704,-6912,-7424,5888,25344,32512,30464,13824,-1536,-15872,-25856,-13056,-3328,8704,5888,-11520,-24320,-32768,-20736,6144,19968,23552,15360,-6656,-17408,-19712,-17664,-5376,256,-2048,-14080,-27392,-24832,-23808,-12800,6144,12032,7424,2048,-2304,-768,9728,17408,23296,23296,17664,6400,-4096,-10752,-11776,-6656,-2304,-1536,-9216,-18432,-20480,-16896,-6656,3584,5376,4096,-256,-3584,-2816,0,3328,4352,4608,4096,-256,-3584,-3584,-1792,1792,4352,5120,3072,3328,3840,5120,5888,6656,6656,7168,8192,7680,8192,7936,8192,8704,8192,6656,6144,4864,5120,4608,4864,4608,3584,3072,1536,1792,1536,1024,1280,0,-1024,-512,0,-256,-1024,-512,-512,-768,-1024,-1536,-1280,-1792,-2816,-2560,-3840,-4864,-5376,-6400,-6656,-6912,-7936,-8448,-8192,-8448,-7168,-6400,-5632,-5120,-5120,-4352,-2816,-2048,-2048,-1536,-1280,-512,-1536,-2816,-2560,-1024,-1280,-1280,-1792,-2304,-2816,-4352,-4352,-5376,-6912,-6656,-6400,-6400,-5632,-5888,-4864,-3328,-768,512,1536,2048,4352,4864,6912,9728,10752,12544,11520,12288,13056,11776,11776,11008,9216,6656,2560,1280,-256,-1792,-2304,-3328,-3584,-4608,-4096,-3072,-1536,512,2304,2816,3328,4096,5888,7424,7168,7168,7424,7168,7680,8448,8704,9984,10496,11008,9728,9984,10240,7168,5888,4352,1024,-2560,-4864,-7424,-10240,-12800,-15360,-17920,-19712,-20224,-19712,-19968,-18944,-17152,-16128,-14080,-11520,-9472,-6656,-3840,-1024,1024,3584,6144,6144,8704,10240,8704,7680,9728,9472,6400,4864,3328,1024,-768,-1536,-4864,-8192,-9216,-10240,-12032,-14336,-15104,-14592,-14848,-15360,-14336,-13056,-10496,-7936,-6144,-4096,-1280,2304,3584,5376,9216,10496,11008,13568,15616,14592,15104,16640,14848,13056,12032,10240,7168,6144,4608,1024,-256,-1024,-3328,-4608,-5632,-7680,-6912,-6144,-6400,-6400,-4608,-3584,-2816,-256,2048,3328,3840,6400,8448,9728,10752,12544,14336,14336,15104,15104,13568,11520,9472,7168,4096,2560,512,-3072,-5120,-6912,-10752,-12800,-14592,-18176,-18944,-18944,-20736,-22272,-19712,-17920,-18688,-17664,-14592,-12032,-10752,-7424,-4352,-2560,256,3840,5888,7680,10496,11776,11776,10496,9728,9216,6400,4864,4608,1792,-256,-1024,-3072,-5120,-7424,-8192,-11008,-11520,-9728,-6656,-5376,-7168,-6912,-5120,1024,-512,-7168,-5632,1792,2816,4864,3328,3840,9216,16128,18176,15104,12800,8704,10752,8704,6656,3584,-3584,-11008,-5888,-6912,-13056,-9984,-8704,-6400,-3072,-3840,2816,4096,-4352,-5120,-6656,-1280,3328,-18944,-23040,-3328,-2304,4608,2816,3584,9728,21760,27904,24064,18176,2560,14592,19968,13568,7424,-6912,-3840,1536,1024,-5376,-6144,11520,6144,4096,9216,16640,14592,-6144,-11008,-10752,-3072,-13312,-29440,-30208,-11008,-9216,-9472,-8448,-17920,-13568,-2560,7424,5376,-4608,-18688,-10240,-2304,6656,4608,-7168,-1024,12288,6144,8960,6912,8448,13312,6144,15872,19456,21248,6912,4608,5120,14336,11520,-12032,-10752,2560,2816,8448,6144,-6912,-11008,1536,6656,-3584,-6656,-20992,-17152,-11008,-9472,-10752,-21760,-25600,-17920,-11776,-9984,-11264,-10752,-7424,-5120,256,2560,-1280,0,256,256,14336,7168,-14336,-3072,5888,2560,12288,4352,512,8704,13824,20992,17920,9984,4096,7680,13312,19968,18688,6656,5120,12032,17664,8704,11776,11008,6400,3328,3584,10496,6400,5376,-3072,-8704,512,4608,-17152,-12800,2304,-9472,2304,256,-17920,-15360,-8192,-6400,-9984,-9984,-17152,-16384,-16640,-14848,-13056,-23552,-15872,-11264,-8960,-512,-1280,2816,2560,-1024,7168,10752,12032,8448,1792,-3328,5376,9728,-11008,-18688,-5888,14336,23040,10240,-1024,768,16640,16384,4608,8448,7168,6400,-3328,1280,7680,2048,-3840,-6912,-512,-2816,-2816,-7936,-2560,3072,-7936,-3840,3328,-7424,-14848,-19712,-18944,-4608,-6144,-22528,-11776,-256,-6912,-11264,-10496,-8448,-4352,2816,3840,-1024,-7168,-5376,-13312,-8192,1024,2304,1792,7424,9216,512,2560,9984,15104,15360,19712,17408,22528,23296,9216,2304,6400,12032,16384,5120,2048,15616,19968,14336,13568,9216,7424,13568,6912,9216,5888,6144,4864,-1024,0,1792,-2816,-9472,-6656,-7936,-6400,6656,12544,4864,2048,-8704,-6656,-9216,-13312,-10496,-14336,-11008,-3840,-17152,-32768,-15872,-17664,-11008,2048,-6144,-12800,-3840,-7168,-13312,-17408,-23552,-13056,-11776,2048,8960,3840,-1536,-1024,-7680,-2816,9984,11264,15360,16384,15104,11776,13056,7168,-3584,-5376,2560,13568,20480,2304,6912,22784,17408,19200,15872,5376,768,13056,18432,16896,16640,10752,4096,512,2560,-7680,-16128,-2560,10496,10496,12544,1792,-12800,-9216,-4608,-6400,-5120,-4096,-13824,-16128,-6400,-5120,-14592,-18688,-19456,-14336,-7168,-1536,-256,-5888,-15872,-19712,-17664,-9472,-7936,-11008,-16128,-11008,2304,-18688,-32768,-25600,-7936,-1280,-1024,1024,-14592,-19712,-14080,-10240,-7680,-13824,-16896,-14848,-8192,-9472,-9216,-1280,-3584,-10240,-10496,1536,6144,1280,3584,5120,5888,3072,1792,2560,-1280,768,9984,-1536,-21504,-3328,13568,16640,17664,13056,-1024,-5632,8448,16640,14336,10752,8448,1024,1024,6400,13056,13312,8192,15360,18688,19200,19712,13824,16384,15872,15360,22528,26368,18432,10496,13824,14336,2304,-10752,256,12800,13824,28416,24064,256,-10496,768,11008,5376,4864,-2560,-4608,512,-2048,-6400,-5376,-2560,-3840,-4096,-1536,8192,7168,-3584,-13824,-10240,1536,-4352,-7168,-3328,-5632,-4864,-14592,-30976,-25856,-12544,-768,2304,-5120,-9472,-16896,-23040,-23040,-10752,-7680,-23296,-21248,-9984,-11520,-17920,-17920,-9216,-16640,-23296,-11264,256,-2304,-8448,-11008,-16896,-9984,-5632,-9472,-8448,-7168,2304,-1792,-24576,-20736,-10496,-3328,3840,13312,8448,-12544,-6400,5376,8192,-768,-4608,2304,768,0,6912,6912,3328,6912,5888,512,5120,22528,17920,4608,10496,23808,19456,768,6656,22016,22016,11520,5120,4608,3072,8448,21504,23808,14336,13568,8448,7168,18432,22528,9728,-512,2816,6912,11776,8704,11776,16640,8704,6656,16640,13056,6144,9472,9984,12032,11520,11264,2560,1280,9472,7936,-2816,-8448,1280,6400,3584,2560,7936,-1280,-11008,-4096,2560,-1280,-6656,-2560,-8960,-19200,-12032,-2048,-7168,-5376,512,-3584,-8960,-5632,-7680,-17152,-12800,-5120,-2560,-4864,-8960,-13312,-15360,-19200,-12800,-4352,-13312,-19968,-19456,-19456,-15872,-6400,-13824,-21760,-13312,-8192,-14592,-15616,-11520,-22272,-30208,-22528,-5632,-5120,-7680,-6400,-7168,-12800,-11776,-1280,-13312,-13824,-512,1280,-2816,7936,6912,-6656,-3584,7168,11008,-768,-3328,-3328,2816,4608,13056,15616,8704,9728,8192,8192,7168,5632,-6400,-12032,-4096,15104,20224,15616,9472,3584,3328,7424,13312,9728,11776,12032,13312,10240,7680,3328,2048,8704,16128,13824,9216,7680,3840,2048,3584,10496,7680,5376,6656,10496,8192,4608,-3584,-7680,-2816,1024,2048,2816,7936,2816,-7424,-14592,-10240,-6912,-4608,-2816,0,-512,-3328,-10240,-15616,-12288,-7168,-6400,-4608,512,-4864,-7424,-12288,-9472,-6144,-3840,1792,2816,1024,-2816,-9728,-12800,-12800,-9472,-9472,-8960,-512,768,-2816,-8192,-3840,-3584,-8448,-8192,-6912,-9984,-13568,-16384,-17152,-14848,-8704,-9216,-13568,-8704,-4352,-6912,-13568,-13568,-11008,-10496,-8960,-7168,-7424,-7680,-12800,-14336,-12544,-5888,-2816,-5888,-5376,-5632,-6400,-6912,-3328,-3328,-1024,4096,6400,3072,-2048,-4608,-5120,-3840,2048,4096,1280,1792,2560,2560,-512,-768,1792,4608,3840,5376,8448,7424,4864,1024,512,4352,9216,5888,3072,6656,9728,8704,5632,5632,11776,13568,12288,12800,14080,14592,10752,9984,12800,18688,15360,10240,12288,12288,12288,11520,11776,17152,16640,14080,13568,14336,13056,8704,9728,10240,12288,8192,5376,7936,7680,7936,6656,5376,8960,9472,7936,5888,6912,6656,2816,2560,1024,3072,0,-3584,-2304,-768,-1280,-1024,-3072,-2048,256,768,-2560,-6656,-5888,-5120,-2816,-6400,-4096,-4864,-7680,-5632,-6912,-5376,-2816,-2816,-3072,-3584,-4096,-6144,-7424,-7424,-4864,-3584,-7424,-7424,-7936,-9472,-11520,-10496,-7936,-7680,-9984,-9984,-7424,-7936,-11520,-12032,-9216,-7424,-6912,-9472,-8960,-8704,-8960,-11520,-9984,-8960,-9984,-7424,-5632,-3584,-4608,-7680,-8448,-5376,-3584,-4864,-5376,-4608,-5888,-6656,-7424,-6912,-6400,-6656,-4608,-3584,-2048,-4352,-6656,-6912,-3328,-3072,-6912,-4864,-2560,-2816,-1024,-1280,-1024,-2048,-4096,-2816,256,2304,768,1024,1536,2048,1280,256,512,2048,4096,5632,6912,6144,5120,4096,4096,5120,8960,8448,7168,6656,7936,6400,2048,6400,9216,9728,9472,11520,11264,10240,8704,8192,8704,6912,9472,7424,8448,10496,9472,5888,3584,7424,8704,8960,4608,5376,5120,7424,10240,-512,0,2048,2048,0,512,512,-1024,-256,5632,13824,4352,3840,5376,3840,1024,-1024,-4864,-4864,-5120,-6912,-1536,-4864,-7936,-7936,-3840,-3840,-2560,4352,4864,3584,7424,9216,5888,4864,2816,1536,1024,1024,2048,-2304,-1536,-2816,-3584,-1792,-4096,-5888,-1280,2048,-256,4096,-2048,-2816,-3840,-5632,-5888,-9472,-5376,-7168,-6400,-9216,-3840,-4352,-7936,-6912,-4864,-1024,-1792,-256,-6656,-6400,-4352,256,-2816,-3840,-4352,-256,1280,-2048,256,-1792,768,-1280,1792,-2816,-2304,-3584,-3584,-2304,-1280,0,-1536,2304,1280,1536,-1536,0,-3072,-4352,-1536,-2560,-4096,-7168,-5632,-1792,-768,-3072,-6144,-5120,-6400,-4096,-512,-2560,-3072,-768,1792,-1024,512,4352,1792,-1024,1280,4864,7680,2304,256,-768,-1792,1792,-1536,-2560,-4608,-4864,-3328,512,-5632,-9728,-6656,-7168,-6656,-12544,-12032,-12288,-11776,-9216,-9216,-12544,-11264,-15616,-17152,-11264,-10752,-8704,-10496,-3584,-2304,3584,4608,2304,4864,8192,10496,11264,15872,13312,10240,10496,14592,6400,12288,10240,7680,7680,8192,10752,8704,5888,7424,10752,4096,9472,768,2304,-3328,-3328,-8960,-8704,-3328,-7936,-5632,-8448,-4096,-6144,-1792,-7424,-1792,1536,2048,2304,4352,8960,6912,10752,10752,13056,14336,16128,16640,16896,15616,14080,11776,15104,10752,9984,10496,11776,14848,12800,14592,11008,12288,10496,8448,2048,-1792,-3584,-6400,-6656,-9984,-7936,-9472,-9216,-7936,-5632,-2816,-5632,-6400,-4864,-512,-512,-1536,-1024,-1024,0,2816,6144,3840,4608,3584,3328,6400,6400,3072,-1280,512,2304,768,-1280,-2816,-256,-3584,-7168,-9472,-6400,-9984,-16384,-15616,-17664,-18176,-23040,-22016,-23552,-20224,-21504,-18432,-15360,-18944,-18944,-18176,-13824,-15104,-11520,-11520,-7168,-3072,1792,256,1792,4096,4864,6656,6144,10496,7424,6656,6656,6656,4096,4096,4352,6912,4608,2560,4352,5376,2560,0,-1536,-4352,-4608,-10496,-8448,-9984,-13056,-14848,-14080,-9984,-11776,-12800,-12032,-10240,-6912,-1280,-1280,-768,2048,5120,7936,8448,10240,12288,11264,12800,16384,14592,9728,7936,12288,14336,16640,19456,15104,11776,13568,16896,13568,6656,5376,6912,9984,7936,3584,-3328,-4864,-6912,-4096,-4864,-11776,-8960,-7680,0,768,-1024,-7936,-5120,1792,6400,6656,3328,-1024,-1792,6400,2816,4864,4864,13568,14592,14080,7680,1536,4864,2304,11520,9216,5888,-1792,256,-1792,-5632,-10496,-18432,-7680,-1024,2816,-8192,-9472,-9472,-8960,-12800,-19200,-25344,-27136,-18432,-21248,-15104,-23040,-20736,-20224,-16896,-4608,-1024,1792,-4352,5376,7424,10752,3840,5632,9984,9728,12032,-1280,-2048,-6656,-3072,-2560,256,4864,7168,11776,8960,8960,5376,5376,512,512,2304,-256,-2816,-8192,-8960,-15616,-18432,-26880,-24832,-13056,-8192,512,-2560,-768,-1280,1280,768,2816,9728,5120,6400,5376,13568,10496,7936,8704,5120,14080,16128,15616,13056,13056,14080,18432,14592,9728,8448,6400,7936,7424,12288,4096,-4096,-2816,-2048,2048,512,-256,1792,-256,-9216,-9728,-9728,-10752,-6144,-2304,2560,1792,5632,4096,2304,1536,-3328,-2304,4096,15360,19968,15104,12288,12288,12032,2048,-6400,-3072,3840,5632,8448,11008,5376,-6144,-12288,-13824,-11520,-1792,-1792,-1792,-3584,1792,-5632,-17920,-25600,-24832,-20736,-29184,-22528,-13568,-10240,-15872,-18944,-17408,-17408,-13312,-4608,5120,7936,8704,2816,0,1280,512,1536,3072,10752,12544,11520,3584,-1280,-3328,-5376,-2816,2560,9216,9984,7424,1536,3584,256,-7680,-13824,-5888,5632,3072,-1024,-3584,-4608,-12544,-25856,-28416,-22784,-9984,-768,5120,6656,4096,1536,-5888,-1024,512,4864,11008,19712,25088,23808,17408,9216,2560,2304,6912,1280,9728,17920,23552,17664,10752,7680,-1280,-5376,-1024,13056,16640,13312,10752,14080,8448,-3072,-14848,-16128,-8960,-2560,768,-4608,0,0,-4096,-6144,-7936,-2048,2560,7424,16128,18944,18432,11776,3840,1280,256,5376,4352,10752,16384,16896,11776,-1024,-512,-5120,-3584,0,4096,5376,1280,1280,2048,-3072,-14336,-20736,-20480,-14080,-15104,-11520,-9216,-9728,-12544,-21248,-26880,-25600,-18432,-17152,-11008,-5632,-1024,-2048,-6912,-5376,-4864,-4352,-6912,-3584,768,4864,7936,8448,6912,3840,3328,-2304,-1792,2048,1792,2560,12800,18176,7424,-3328,-7168,-6144,-9216,-11520,256,4352,-2304,-512,768,-3072,-12288,-20736,-21248,-14592,-7168,-5888,-3072,-2048,-6912,-14080,-13056,2816,11264,16128,17152,9728,11264,13312,3072,-5888,1280,11008,17408,9472,-6912,-13056,-1024,15360,15104,13312,11008,7168,-3840,-14336,-10496,-5632,-2048,-4352,1024,7936,1536,2048,-5888,-16384,-12288,-6400,0,-256,2560,-6400,2304,12544,2048,11520,11008,10752,13824,10496,2048,7424,15872,18432,5120,-4608,1024,1536,11520,3072,-768,-7424,-4096,15616,5120,-3584,6912,768,-19712,-24576,-13568,-7168,-2816,-1024,-1792,512,256,768,-11520,-17152,-16128,-17408,-8704,-9472,-4352,-9472,-7424,8960,13568,4096,-10496,2048,12544,9728,2304,256,3840,8448,2816,0,-2560,-2560,3328,-768,-2816,-6400,768,2048,5888,3840,1280,-1792,-14848,-8192,1792,6400,-1280,-6656,-512,-4352,-6144,-5120,-2304,-2816,-6656,-5376,-5632,2560,6400,3328,5632,4352,512,-5376,-10496,-768,0,256,3584,5376,768,-8192,-5888,512,5120,3072,4096,-7680,-10752,-6400,-7168,2560,7936,1536,4352,-2816,-12288,-11776,-5376,11520,11776,9472,512,-8448,-3584,5632,7936,6400,7424,7680,5888,5376,3584,5888,6912,4096,6400,6656,2304,2304,8448,4352,5376,3584,-512,3840,-2048,-10240,-11264,-9984,-6400,-10496,-7680,-768,-3072,-4096,-4096,-6400,-6144,-512,7680,1536,-4352,4096,4608,4096,-7936,-3072,-7168,-8704,4096,-1280,-5120,-14080,-17152,-9216,5376,3584,-2304,-5120,-1536,-6912,-13824,3072,18944,16384,2304,-5120,-3584,-5120,768,7680,6656,4352,-15104,-12800,2560,6144,2048,-6400,-7168,-9728,-11520,-2816,1792,-1536,7424,1024,-768,2560,1280,7680,-2816,-5376,-4096,-5376,-5888,8192,15872,8192,11520,13824,22272,18688,23040,16896,4864,14592,12800,22784,24320,16128,12544,-3840,-7424,-4096,-2560,2560,3328,3584,-5376,-16384,-16384,-10496,-5376,-6656,-17408,-21504,-20992,-11776,-8448,-16128,-15872,-11776,-8704,-19200,-19968,-12544,-11776,-10496,-3584,-3072,-4608,2816,6144,5376,-1024,-768,4864,9472,16896,16128,15104,13824,9728,9216,5888,8448,12032,10496,4096,2560,7424,7168,9728,11264,7936,3840,4608,6912,7680,8704,9984,11776,10240,10240,11008,9984,7680,6400,9216,11520,11520,11520,12288,10240,7424,7936,9984,10752,11520,12800,12032,10240,7424,7424,4096,2304,3072,2816,1280,-2048,-4352,-5888,-6400,-9728,-10496,-11264,-13568,-17664,-18944,-14080,-12544,-15616,-18944,-18432,-15360,-14848,-12800,-10240,-10752,-15616,-18432,-15104,-13568,-13568,-14592,-13056,-12032,-11008,-7424,-7168,-7680,-7168,-8192,-9216,-8960,-4352,-1280,-3328,-5632,-6912,-7680,-10496,-9984,-7680,-4864,-5632,-9984,-7680,-3584,-6144,-6912,-5632,-1024,1024,256,2048,3328,6144,5120,4864,7424,9216,8448,8704,11520,13056,14080,14080,12544,14592,16384,17408,18176,20224,19968,14592,12032,13824,16384,16896,17152,17408,17920,14336,13568,15360,15360,15616,15616,15104,14336,14080,11008,11776,12544,9728,7168,5376,5376,5376,4352,4096,3328,5888,6144,2048,-1536,-1792,-1792,-3072,-4096,-4608,-4096,-5888,-8960,-9984,-10240,-12800,-15104,-13312,-9984,-9984,-11264,-13824,-17152,-16384,-15616,-17664,-17408,-15104,-15104,-18176,-19200,-18944,-19456,-19200,-17152,-14336,-14080,-15616,-15360,-13568,-13824,-16128,-14848,-11520,-9472,-8704,-9728,-9728,-7936,-7424,-6400,-5120,-5120,-4096,-3328,-2560,-2304,-256,1024,-256,0,1024,1024,1536,3840,5888,6144,7424,6912,5888,5376,6144,7424,7168,8192,9728,11520,9984,8704,9216,11008,11520,13056,16128,16128,16896,18176,18176,17152,16384,16896,16896,17920,18176,18688,18432,15872,13824,14336,15872,15360,15104,15872,16128,14336,12032,11520,12544,11776,10240,9472,8448,7936,7424,6144,4608,2816,1280,-512,-768,-768,-1536,-2560,-3584,-4352,-7168,-9472,-8704,-6656,-6912,-9984,-10496,-11008,-13824,-16640,-16384,-14080,-13824,-16384,-17152,-16128,-16128,-19200,-20992,-20224,-18944,-17920,-19200,-19968,-19712,-18176,-18688,-19712,-19200,-17408,-16128,-16640,-15104,-13568,-14080,-16384,-16384,-13824,-12544,-13056,-11520,-9728,-9728,-9728,-8960,-7424,-6400,-5376,-4864,-3840,-2048,-1792,-2048,-1536,0,512,-512,0,2048,3328,2560,3328,4864,4864,4096,4608,7168,7680,7936,7936,7680,7168,7680,8192,8704,10496,11520,11264,10240,10240,10496,9984,9216,10496,11520,11264,10240,10240,9728,9472,9728,9728,11264,11776,12032,11520,11264,10752,9728,8960,9728,10240,9984,10496,10496,9728,9216,9216,8960,10240,10496,9984,9216,9216,8704,6656,5120,6144,6912,5888,5120,5376,4864,3072,3072,2816,2816,3328,2816,2560,2304,2304,256,-1536,-2048,-1280,-1280,-1536,-1280,-2048,-3328,-3328,-3328,-3840,-3584,-2816,-2304,-2816,-3584,-5376,-6912,-6912,-5376,-5632,-6144,-5888,-6144,-7424,-8704,-8192,-8192,-7424,-6400,-5376,-4864,-5376,-6656,-8448,-9216,-8448,-8192,-8448,-8192,-6912,-6912,-8704,-9728,-11008,-10752,-9216,-7680,-6656,-6400,-6912,-8192,-9728,-10240,-10240,-10496,-9472,-8192,-7424,-8192,-8960,-9472,-9472,-8960,-8448,-7936,-7424,-7680,-7424,-8192,-8192,-7936,-7936,-6656,-5632,-4864,-4864,-4608,-4864,-4864,-4352,-3328,-2560,-1280,-512,-768,-1536,-768,-512,-1280,-1024,768,2560,2816,3584,3328,4096,4864,5632,5632,5888,7168,7936,7680,8192,9728,8960,7936,7936,8704,8960,9472,10240,10752,11264,11776,12288,12032,12288,11520,10496,11008,11520,11008,10496,11264,11776,10496,9216,8960,9984,10240,10496,10752,10496,10496,9472,8704,8960,8704,7936,6656,6656,7424,6656,6144,5120,4608,4608,4608,3584,3072,3328,2048,768,256,1024,0,-1024,-256,0,0,-512,-256,-1280,-2560,-2048,-1024,-1280,-3072,-3072,-3584,-5376,-5376,-6400,-6656,-6912,-6144,-5632,-6144,-6400,-6144,-6144,-6400,-5888,-6656,-7936,-7168,-6912,-6656,-7168,-7168,-7424,-8192,-7424,-6912,-7424,-7680,-7424,-8448,-6912,-6144,-6912,-7168,-5376,-5888,-7168,-7168,-6912,-5376,-6656,-5632,-4608,-4096,-4352,-4608,-4864,-5120,-5376,-3840,-4352,-4864,-3328,-3584,-4352,-4352,-3072,-4864,-5376,-4096,-2816,-3328,-2304,-2816,-1536,-2048,-2560,-3328,-2816,-1792,-512,768,2048,3840,5632,7680,6912,8192,6400,12288,12544,10496,10752,15104,14592,14848,14080,12288,10752,9728,13568,5888,9984,5888,5888,2048,-2304,768,-3328,-3840,-7936,-2816,0,1280,-256,-2560,2304,4608,3840,5888,9984,6912,6144,7168,7680,9984,8192,1792,5888,9984,9216,7424,3328,2560,3840,6144,4096,3584,-3584,-256,-3584,-11776,-12800,-16896,-17664,-13824,-19712,-25344,-21760,-25856,-18432,-19712,-13312,-15616,-12544,-6656,-9216,-1024,-4096,-4352,-3328,1536,768,5888,-2304,-3840,-1280,-7168,-2560,-8192,-6912,-3584,-6656,-12800,-14336,-13568,-11520,-13568,-10752,-8704,-10240,-15872,-16640,-16896,-17920,-12288,-14848,-9728,-21760,-22272,-18944,-19712,-15104,-14848,-9728,-5632,-5888,-5376,-1792,-6400,2304,4096,13312,16384,13312,9984,8704,6912,6400,6656,2048,3328,0,1536,-2304,-7680,-13312,-6656,-4864,1536,-4608,-7168,-3072,256,-256,-768,512,0,7680,4608,10496,5632,13312,7680,14080,24832,24576,26624,10752,8960,21248,26112,17152,17664,9728,14336,10496,5888,1792,-4096,1280,-1280,-4352,-8448,-7936,-12288,-13312,-16640,-3584,-5888,-4864,-1024,2304,6144,3840,12544,17920,16640,15104,26880,15104,14848,8448,6400,11776,7168,5632,256,-4608,-7936,-3840,-2304,-7168,-12800,-7680,-11264,-11776,-9984,-6656,-6912,-9728,2560,5376,1280,1280,-256,3072,6400,8704,7424,7168,7936,4352,0,4608,7680,1536,8448,8704,10496,8448,-3072,-1280,3840,-768,-7168,-8960,-16384,-17152,-20736,-16640,-14080,-18432,-13056,-15872,-9216,-9984,-8960,-7424,-6144,512,6400,4864,4352,5888,-1280,5888,5888,12544,10496,6912,5632,8448,6400,3328,-1280,-1536,4352,-2816,-1792,-10240,-9728,-9472,-9216,-6912,-5376,-12032,-14080,-12032,-8192,-8448,-9728,-6912,-6144,1024,1792,1536,-6912,-6912,2048,13824,16384,16896,8960,8960,17152,12800,16384,6656,-3072,1280,-1536,-6656,-9984,-22016,-21504,-19712,-16896,-15104,-21760,-23296,-22528,-17152,-10240,-10240,-11264,-5888,-6656,1536,-5376,-6656,1024,2560,7680,11520,14080,12288,11008,7680,12288,8192,10496,4096,-768,-768,-5376,-1280,-4864,-7680,-6144,-8448,-9728,-7424,-12032,-10752,-11264,-9728,-4608,-5376,-4352,-6912,-4608,-7680,-3072,6656,10752,16384,17664,16384,14848,19456,15616,14080,15872,12800,4096,-3328,-5376,-8448,-9728,-11264,-13056,-17152,-18944,-22016,-18944,-15872,-17920,-14080,-11520,-14080,-7168,-6144,-2304,-4096,-8192,2048,768,7168,9472,5888,5632,7424,-2560,0,11264,8448,2816,-1536,4608,4864,2304,6656,8704,2816,3840,1280,256,-4608,-1280,512,-2816,-3840,-4864,-5888,-7680,-8448,-13312,-7168,-5888,-2048,-5120,2816,6400,1024,11264,17152,12032,11520,13824,6912,15360,14336,13312,13312,13056,9216,1536,11008,9728,6144,13056,8192,7424,7936,3328,5888,-2048,1792,-3328,-5120,-2560,3328,2048,-3840,-3584,512,6656,1792,13056,5888,1024,4352,3584,2816,9216,7936,7680,12544,10496,2816,2304,7168,2816,768,256,1536,-5632,-9728,-15616,-12544,-21248,-19456,-13056,-11520,-12032,-20224,-15616,-8192,-12288,-12288,256,-5376,-3840,-6400,-8960,-7936,-7680,0,-1024,-2048,256,-512,-6144,-6144,1024,2304,2304,3584,1536,-4864,-768,-2816,-7680,-2816,-6912,-5888,-5888,-2304,-4352,-11264,-10752,-4096,-7424,-9472,2048,-6912,-2048,-8192,-6400,2048,2816,7168,3328,11520,3072,3328,8704,9472,3072,11520,9728,4864,9216,3584,5632,2816,-256,5376,6912,512,3584,1536,2560,2816,3072,2560,-1280,7168,-4864,-8448,5120,-1536,0,5888,8448,-2816,2816,4608,1792,10240,9728,12032,12544,8960,10240,14592,11520,13568,11264,12544,11008,11776,11520,8192,7936,4096,7424,4864,4096,768,-2304,-6912,-13568,768,-768,-6912,-3328,2048,-2816,-9984,-2048,-1024,-8704,-1024,-512,-9984,512,-6912,-8448,-4352,-10240,-5120,-4352,-4096,1536,-1024,-3072,-256,-3072,-256,-4352,0,-8192,-12800,-6144,-17408,-5120,-11264,-13312,-5888,-10752,-10240,-8704,-6656,-5888,-3584,-7168,-512,-6144,-3840,1536,-4864,1024,256,-2304,3584,256,-512,4864,2304,5120,0,2816,768,768,-1792,-7936,-256,1280,-2560,1792,2560,-1792,2816,-3584,-1280,-1280,2048,-3072,3072,-1280,-256,5376,-3072,2816,-768,512,3840,4864,3328,4608,4096,9216,512,8192,4864,3072,6400,0,4096,2304,1024,5376,512,4096,1536,-512,7680,0,8704,3584,7168,3328,5888,512,9472,7168,5632,7424,2048,7168,2560,4864,-512,11264,-256,14336,3584,5632,13056,-1792,13312,3072,7936,8704,9216,768,7936,5888,-2816,10240,2560,10752,3072,4864,2048,2048,4864,5888,7424,-2560,4352,-5888,1792,1536,-1024,-256,1536,768,-1536,1536,-9216,768,-6912,-4352,-5120,-7168,-768,-7424,-6912,-1792,-3584,-8448,2816,-2816,2048,-3328,-512,-8704,-10496,-1792,-9216,2048,-12800,-3840,-512,-13568,-7680,-4864,256,-4352,-2304,-1792,-7424,-8960,-6656,11008,3328,8704,8704,2560,5120,-11520,-14080,-15104,-12288,-23296,-16640,-14592,1280,8448,-8448,-8960,0,6144,-3840,512,-3328,8448,3840,-6912,-2304,4864,-4864,-15104,-2560,5632,10496,256,4864,16128,17664,16128,11264,8192,9984,5376,-4864,-5376,-1536,-1536,-2560,-6656,256,1792,-11776,-9728,-4096,-2304,-3840,-1536,2816,4352,9472,6912,7424,12800,18176,13056,3328,9472,21248,6400,-256,7936,7680,4864,-2048,4864,2304,-1024,-6400,-256,3328,-1536,512,4864,6400,256,-7936,-13312,-11008,-13824,-13056,-12800,-14080,-8704,-10496,-11776,-9728,1792,12544,7424,13312,11264,21760,9984,6400,14336,7936,-768,-1024,-3584,-10240,-5888,-8960,512,-8448,-2560,3072,2560,3072,2304,-1536,-7936,-7936,-6912,-6400,-7168,-15616,-15872,-20224,-24320,-23040,-15360,-10240,-10240,-2816,1280,7936,1024,4864,14080,19456,3584,14080,23808,18432,1024,8192,12032,3584,3840,4096,15360,6912,7168,13824,11776,3584,9728,6144,6656,1792,1024,-3584,-3072,-6144,-8448,-14336,-7424,-11776,-5376,-2816,-10240,-6400,-14080,-2560,-9216,-3328,-8192,-768,0,-4096,-11776,-2048,7424,-7936,-6656,-1024,1792,-1280,-512,2304,-768,2304,6912,-1024,256,1792,7168,7936,3840,1536,8448,9728,8704,5120,4864,3584,3328,256,-6400,768,1792,-5120,-5376,-1280,-3072,-9984,-12288,-8960,-9216,-8704,-10240,-9984,-9728,-7680,-10240,-9216,-4352,1024,-2048,-8448,-2304,5888,256,-3840,-512,4352,3072,-1024,1792,5888,6912,6144,11008,13056,11264,12288,21248,17920,13056,13824,15616,8960,8960,14336,12544,10752,6656,10240,10496,8192,9472,11008,9984,7936,11008,16640,11264,8704,7168,8448,4352,-768,5632,6144,4352,-3328,-1024,3072,-3328,-4096,256,3328,-2304,-6400,3840,2816,-3840,-5376,-3328,-256,-9984,-7936,-7168,-8704,-15360,-15104,-4864,-10240,-9984,-8704,-11008,-14848,-18176,-6400,-5888,-12288,-7168,-5376,-9216,-17408,-14848,-11520,-10752,-13312,-14080,-5376,-7168,-16640,-15104,-14080,-14080,-18944,-11264,1536,-7168,-10496,-11264,-7936,-14336,-11520,-3072,-1792,-1280,-5376,1024,1024,-2560,1280,1792,2816,6656,7936,13312,9472,5376,6912,10240,9472,7168,13824,13824,13312,7424,13568,20480,12288,15872,18432,16128,12288,12288,18944,17920,14848,14848,16896,14848,11008,13056,13312,18176,13568,12032,18176,15104,7424,4864,7424,3328,2048,10752,12544,6400,768,3072,768,-7168,-3840,-2560,2304,-768,-2048,768,-3328,-11008,-15872,-7168,-5632,-7424,-2816,-3072,-7168,-16640,-13824,-12288,-20736,-18432,-9728,-6656,-17664,-15616,-11520,-15360,-20480,-19200,-8448,-11776,-16384,-10496,-8960,-12288,-20992,-17408,-11008,-13568,-19456,-13824,-6656,-14336,-12288,-6144,-4352,-9728,-13824,-4608,-5888,-8192,-1024,-256,-2048,-6400,-2304,-5120,-6912,-8448,-4096,768,512,5376,4864,2048,-4608,-2816,4608,4608,4352,11264,16384,8960,1024,6400,5632,3328,3072,14080,19968,17152,17408,13568,11776,5632,9984,15616,19200,23552,22016,22528,14336,8448,9728,12800,14848,13312,19200,19200,19456,16384,12032,8704,8192,14848,12032,12288,14848,14336,8704,2816,5632,5376,5376,768,2048,3584,1792,3584,-1280,-1792,-8192,-7936,-7424,-9728,-5888,-5632,-4608,-8704,-8960,-11008,-14080,-16128,-17152,-12544,-14848,-6912,-3840,-9472,-17152,-22272,-15360,-20992,-19456,-10752,-4608,-7936,-16384,-15872,-18432,-20736,-24832,-17408,-9472,-9984,-5888,-7168,-9728,-19968,-20224,-14848,-15872,-10240,-4352,-1280,-8960,-13568,-13312,-14080,-14336,-12032,-4608,-4352,-3328,-1280,-1024,-2560,-5888,-1536,1024,1536,4352,8192,7424,2816,3584,6656,5120,2304,6656,10240,8960,8448,12800,15616,12032,9472,11520,13312,11776,12288,15104,15872,14592,13312,13568,12544,12032,12800,13824,14848,15872,17920,16640,15360,15360,15104,14592,13056,13824,15104,15360,14592,12032,12032,12288,12800,11776,11520,13568,12544,11776,10752,10240,10240,7168,6400,6144,7424,7424,3072,2560,2304,4608,512,768,1024,2816,1536,-1536,-256,0,-768,-3584,-3328,-2304,-3840,-8704,-3072,-7424,-2048,-9216,-9216,-4096,-9728,-2304,-12544,-9216,-6144,-7168,-6144,-13568,-6400,-10496,-9216,-10752,-13568,-6912,-12288,-8448,-13568,-9216,-11520,-12032,-9728,-12032,-8192,-13568,-8704,-9216,-12288,-9984,-12800,-12800,-11520,-15872,-12288,-11520,-10752,-9728,-12032,-13056,-12032,-8704,-9984,-9472,-13568,-9728,-9472,-7936,-8960,-11520,-6400,-11008,-9472,-3328,-7680,-4608,-5120,-11264,768,-7680,-5888,-2304,-3072,-512,-1280,-1792,-2048,-1536,-3584,2048,2560,2048,-1024,7936,-1792,3840,6144,-1280,4096,6400,4608,5120,9216,2816,12800,5888,8448,9472,9728,11776,7680,10496,8192,9984,9984,7168,10496,12800,5120,13312,13056,8960,14848,9216,10496,14080,11776,10752,11264,12032,10240,9984,12800,6912,7936,12544,4864,9728,9216,7424,11520,7680,7936,10496,11008,6144,6144,10496,3072,5376,6912,1024,6912,3328,-768,3840,2560,1792,2816,768,256,4352,1280,-256,5376,0,-1024,0,256,-2816,-4096,-4864,-2048,-5376,-4864,-768,-10496,256,-5376,-8448,-2048,-6144,-7168,-4352,-5376,-7680,-4096,-10496,-5376,-5120,-11008,-4864,-9216,-11776,-4096,-10752,-10240,-2560,-10240,-11520,-4864,-9728,-8704,-7168,-9728,-6400,-9728,-8448,-5632,-10752,-9984,-6400,-14592,-2816,-9216,-12800,-2304,-13056,-9216,-8192,-11264,-10240,-8704,-8704,-8704,-8704,-8704,-8960,-9984,-9472,-5632,-8704,-6912,-7680,-3072,-13312,-4096,-5888,-12800,4864,-10496,-512,-2816,-2816,-3584,-1536,-1792,-3584,2304,-4096,2304,3840,-3584,-768,4096,-4352,3840,3584,6144,2816,7936,10496,-2304,7168,6400,6400,9728,2560,3328,12032,7424,7936,8192,13568,10752,15104,19200,1536,5888,15104,15616,5888,5888,4096,9216,12544,7936,4352,3584,10240,10752,7424,5632,10240,16128,12288,7936,12032,7424,15616,11776,512,4608,15872,17664,7936,1280,5888,12800,14080,17664,-3840,-8192,20224,22784,-768,-11776,-13824,7168,6144,-6912,-14080,-22528,512,4352,-768,-11520,-12032,7168,12800,8960,3584,2560,21248,16640,-5120,3072,4096,7936,12288,14592,7936,512,17920,29184,8704,-23040,-8192,10240,8192,-6144,-27648,-18944,-8192,-4864,-13824,-27136,-19712,-9728,4096,13312,-7424,-6912,4864,5632,6912,-9216,-5376,-6656,-7680,6144,-4352,-13056,-4096,6912,5120,2560,10496,16640,1024,-12800,-3840,256,-6144,-14336,-22784,-27136,-22528,-12544,-11008,-24064,-22272,-4096,2816,2816,-2304,768,11264,3328,5120,1280,-5120,-6912,-14336,-12032,-4864,-8704,-12288,-4096,1024,8448,13824,17920,5120,-4096,-3840,-5376,-4864,-2304,-15360,-26112,-27648,-18432,-14336,-26112,-22784,-14336,5120,6912,7168,2816,7168,3072,-256,-1024,-1536,4352,-14592,-14080,-8448,-1280,-4864,-6144,-1792,11776,19200,23296,20480,7680,14592,7936,3584,6400,4864,-5120,-13568,-12544,2816,-3328,-6912,3072,3072,7168,9472,16128,21760,20224,3328,4096,2816,8704,1792,-8960,-3328,2048,11520,4352,9728,15360,23808,28672,25344,11008,11008,11008,1792,3072,3328,1536,-7680,-11008,768,4096,-5376,5120,10496,15616,16128,13568,15104,6912,7168,6400,-2560,2816,6144,2304,-2560,3584,19968,13568,6912,16128,21248,31488,24064,2304,6656,-2304,-9472,-8448,-7936,-6656,-19456,-22784,-14592,-10496,-8960,-4608,-5632,-5888,512,6656,7424,-512,-3328,-9216,-19456,-24832,-16384,-11520,-17152,-13568,-7424,-5632,-11776,-5120,3072,13312,15872,3840,-11520,-18432,-24832,-19968,-17408,-24320,-27648,-32768,-29440,-31232,-17152,-3328,-6912,-7680,0,3840,9216,1536,3840,4096,-6656,-7936,-18432,-13312,-11264,-4352,5376,-3328,-3840,6656,7168,14592,20480,18688,6656,-13056,-18688,-17664,-11264,-12032,-13056,-15616,-24064,-18944,-10752,-2304,9472,7680,11520,9984,15616,19712,6912,8960,2048,2816,-3328,-7936,0,6144,13056,13056,11264,15872,17152,17152,28416,26624,24320,9472,1280,3328,0,-256,-5888,-2304,2304,-512,-2560,512,8704,16128,9216,4096,4608,8960,7936,2304,0,-7936,-8704,-8704,-5120,512,7680,9216,10752,14336,15360,15360,13056,17920,14080,1792,-3328,512,-768,-7680,-15360,-19968,-19456,-13824,-9984,-13568,-10240,-5120,-5632,-15360,-19968,-11776,-9472,-12288,-15360,-17664,-19456,-16384,-8960,-8192,-6656,-4096,-2048,8448,17152,17408,12032,13824,16640,8960,3584,5888,8192,1024,-8192,-13056,-14336,-10240,-1280,-7424,-17152,-13824,-3584,-4352,-10240,-4352,-5376,-8704,-7168,-2816,-5120,-9472,-5120,-768,768,4608,9216,12032,12288,16896,17920,17920,26368,20992,11520,5632,8704,7168,-1536,-6912,-8960,-6144,2304,5376,-2816,-7168,-1024,6144,1536,1280,2560,512,2048,8960,8192,-4352,-8704,4352,8960,11520,13824,15360,16896,16128,26112,19712,15104,13568,11520,9728,5632,6144,-2816,-13056,-12800,-7168,-6656,-7424,-7680,-12032,-11776,-6656,-7680,-12800,-11520,-7680,-10752,-10240,-8960,-7680,-14336,-10496,-2816,-2304,-1792,-1792,2816,-256,12288,14592,5632,-4096,-1280,9728,2048,-4096,-10496,-12032,-11520,-8704,-11520,-17920,-17152,-9216,-9984,-18176,-14080,-8960,-5376,-7680,-9216,-8448,-7680,-512,-4864,-6144,-4352,768,7168,6656,14336,8192,12800,19712,22016,14592,8192,19968,15872,6400,-1792,-1024,-9728,-14336,-8960,-6912,-10240,-13056,-8192,-10752,-5888,-2304,-512,-3584,-1536,3072,512,0,1536,768,1280,3328,10752,17664,22272,23296,18944,29184,30720,29952,26112,27136,25088,9984,8704,10752,512,-12288,-11776,-7168,-8704,-12032,-5376,-11008,-11520,-5888,-4352,-6656,-7680,-768,-7936,-8192,-5632,-4096,-8448,-7680,-3840,3840,8192,8192,10752,7936,17920,16640,17408,11776,14080,11008,-2816,-1280,-4352,-12800,-19200,-16896,-18944,-19456,-19968,-17920,-18944,-18688,-16128,-14080,-9984,-8960,-7168,-11008,-7168,-4864,-5376,-4864,-3072,2816,1024,9472,11520,17664,19200,13312,16640,17408,22272,11008,8704,7424,-512,-3840,-6656,-9728,-14848,-13312,-14336,-14336,-14336,-14080,-9728,-12288,-8192,-5632,-6144,-1024,0,3584,2048,7424,5632,8704,13056,13824,16896,16128,20224,17408,20224,18688,18432,17664,12288,14336,12800,7168,3840,-512,1024,-6144,-9984,-2048,-11008,-6656,-7936,-10496,-8192,-9728,-2816,-11520,-3328,-2560,-2816,3584,-2304,5120,1792,3840,2560,1536,7680,6144,7936,3072,4864,4864,2048,-1536,-1536,1280,-6400,-5632,-6912,-10240,-11264,-13568,-16128,-16640,-15616,-16384,-18944,-15360,-13056,-13056,-10752,-12032,-8192,-5376,-5632,-4352,-256,-768,512,2560,-1280,6144,7424,4864,5888,3840,12544,7168,9728,7168,3072,11008,-512,-256,-2048,-5376,-5376,-12544,-9728,-7168,-17152,-13056,-6144,-14848,-13568,-4096,-3072,-4096,1024,5888,5376,4608,7936,12032,8192,7424,13568,9728,11776,12032,12544,16640,13312,17664,9984,14080,18944,5888,7680,4352,1792,1024,-2048,-5376,-6400,-7936,-10240,-8448,-9472,-8192,-5632,-4864,-4352,-512,1024,3328,5632,4864,4864,5888,9728,7680,3840,8192,6912,4096,4608,4608,8192,7168,8448,7680,-512,9728,4096,-6912,-512,-5888,-8448,-13056,-15104,-18688,-19712,-20224,-23552,-17152,-15104,-17664,-14080,-7680,-8960,-8448,-4352,-3328,-1536,-1536,512,256,-3584,-1024,1280,6400,3328,256,13056,9472,8704,5888,-2048,14336,5376,-8704,-5376,2048,-768,-12288,-11520,-9472,-6400,-9216,-13568,-9728,-4864,-6912,-7936,-6656,2304,-2048,-4864,1280,1792,512,-2304,1536,3840,2560,5632,11264,9216,6656,11264,14848,16128,9984,3840,16384,10240,0,-2304,-1280,3840,-768,-3840,-3328,-2048,-2048,-4352,-8704,1024,3072,-768,0,1280,4352,-2560,-2048,0,1280,3584,3584,3072,1280,5888,11776,512,-18688,3584,29440,24832,4096,-12032,-4352,3072,-4352,-3328,1280,-4352,-512,5376,-512,-3584,-8192,-12032,-5888,-6144,-256,5120,-6912,-14080,-3584,1536,-256,-4352,-1280,6912,-4608,-10240,512,-14336,-21760,-1280,6144,2048,-8448,-11264,-1536,768,-1536,6912,6144,3840,3584,-3072,-12032,-18176,-9216,3840,256,-11264,-5376,2816,2816,-4096,-8192,4352,8448,11008,15104,16640,3840,-3840,6912,-3072,-8704,-5888,1792,-512,-8960,-10752,-5888,2816,5888,8192,15616,12544,6912,9472,5632,6912,-5120,-19456,-16128,-8448,-8192,-2816,-12800,-26624,-30464,-20992,768,9216,4608,-4864,-5120,768,6400,12032,7680,-8448,-16640,-16128,-15104,-26368,-31744,-22528,-7680,-11776,-17152,-12288,-11776,-4352,12288,27648,12032,-7680,-2560,11008,13056,8960,-8192,-10240,-6144,1024,19456,0,-28416,-22784,12032,29952,23808,17664,14336,13568,20224,31744,29696,9984,4096,11008,11264,1280,-9984,-4608,3840,15360,19968,18432,4096,2304,21248,29440,23552,6656,2560,9728,18688,18688,-2304,-21248,-19200,-7936,2304,-1280,-16128,-31744,-24576,2560,14848,10752,-4608,-15616,-12544,-2048,3328,1280,-14848,-24832,-22528,-18176,-17408,-28416,-24320,-11520,-7680,-8704,-14592,-18944,-14848,-6144,6656,-2560,-19968,-9216,8960,11008,-4864,-21760,-13056,-768,1536,7424,-2304,-20736,-18944,5120,22016,14080,2560,1024,2560,9216,17920,14848,10752,768,-8192,3584,3840,-1792,2304,7680,10496,4864,3840,12544,16128,13312,11008,8704,17152,29184,29952,25088,15872,8704,9472,5888,6912,5376,768,3840,1792,-2560,-1024,2048,13568,17920,9984,8960,11008,7168,2816,0,-3328,-11008,-18944,-8448,1024,-1792,-5632,-4864,-2048,-3328,-6912,-512,-5888,-17152,-6144,7936,5120,-9216,-14592,-8192,-6656,-18432,-17408,-16640,-19456,-20480,-20480,-16896,-22016,-26368,-17920,-11520,-14592,-12032,-11520,-9472,-12544,-17408,-16128,-20480,-20736,-15360,-15360,-10240,-8192,-13312,-11520,-9472,-6656,-3072,-5376,-3328,3840,3584,5632,5632,5632,7424,768,2304,7424,7936,13056,11264,8704,8960,6144,9472,13824,11008,9728,15872,14848,14592,11776,12288,15104,8192,9984,13312,12544,16640,20224,23808,20480,15616,16896,14592,13568,13824,15616,12544,13312,13312,13568,11776,5888,3584,4352,6656,6912,10496,7424,2048,2304,3072,1280,1024,-768,1536,0,-2816,-3584,-8448,-8960,-10240,-9984,-6400,-6400,-5888,-3840,-3584,-5120,-7168,-8448,-10240,-9472,-14336,-13824,-8704,-12800,-15360,-14080,-16384,-17664,-19712,-19456,-15104,-14592,-16128,-15616,-12032,-14592,-16384,-17920,-18176,-16384,-15104,-11264,-12032,-12800,-13056,-10496,-8448,-8704,-10496,-9216,-4352,-4096,-4864,-5632,-2048,-4352,-5376,-3840,-2048,2816,2560,5376,7168,6912,8192,10240,12800,11776,11264,13056,11264,12032,10752,10496,10496,9216,8448,10496,13568,14336,13824,16640,19456,18688,20992,21504,22016,18944,18432,17664,17408,14080,12288,13568,10496,11520,11264,12032,13056,14080,16384,16384,17408,16896,16640,14592,14336,14080,10496,9728,7424,5120,3840,1792,768,1792,2560,2048,2304,1792,4608,4608,2048,2816,1792,1280,-2048,-4096,-3328,-4864,-5376,-6912,-6912,-8960,-8448,-7936,-7936,-6400,-7168,-7680,-6912,-6656,-7424,-7936,-9728,-8704,-11008,-12288,-11520,-11776,-14592,-14592,-15616,-14080,-14336,-14080,-12288,-13824,-12544,-13312,-11008,-12288,-10496,-11264,-11776,-12288,-13568,-13056,-14592,-14848,-16128,-17664,-18176,-17152,-16128,-15360,-15104,-14848,-12800,-11520,-9216,-7936,-9472,-8960,-8448,-8704,-8448,-8192,-10496,-10240,-10752,-7936,-6400,-5888,-4864,-4352,-2560,256,2816,2304,4096,4608,4352,4864,4608,5120,5376,3840,3072,3072,3584,6144,7168,8192,9984,11008,12288,13056,15360,14848,16384,14592,15360,16384,14080,14592,11264,12288,11520,12288,11776,12544,13312,14080,13824,14848,18688,17152,17920,16896,17152,16384,16384,15360,14080,12544,10752,10496,8704,10240,9472,8448,9216,9728,9472,8704,8960,9472,8704,7680,6912,6912,5888,3840,3584,768,512,1024,-256,-1280,-1792,-1280,-1536,-2304,0,256,-1024,-1792,-2560,-2304,-3840,-2560,-5120,-5888,-8192,-7936,-7936,-10752,-8960,-10752,-9728,-9984,-8704,-8448,-8192,-7424,-7936,-7936,-9728,-8448,-10240,-9472,-11520,-13056,-12800,-14080,-13312,-15104,-13056,-12800,-11776,-10752,-9728,-9216,-9216,-8960,-9472,-9216,-9216,-9472,-11008,-12032,-12544,-13568,-14080,-12032,-11264,-10496,-11520,-9728,-7680,-8192,-6400,-4352,-4352,-5376,-5632,-4608,-3584,-5888,-5632,-5888,-6400,-5120,-4096,-3328,-4352,-3840,-1280,-256,1280,1280,2304,3328,3584,4608,3328,4096,3072,4352,5888,4352,3072,2048,5376,4352,4864,3840,5888,9472,10752,12032,8448,9472,9472,13056,12032,11776,11264,10240,9728,6144,6400,3072,-768,1024,2560,5376,7936,6144,7168,6400,9472,8448,11008,8192,9472,8704,6912,2304,-1536,256,-1792,6144,-3840,4096,9472,18944,17664,8704,14592,14080,15872,14080,8960,-2560,2816,3584,-9216,-20480,-13824,-11776,-12800,-14080,-13312,-1024,4608,8960,1536,-768,-5376,-4096,5888,-512,4352,3072,3840,-4096,-17408,-5376,2560,5888,-8192,-10240,3584,17152,22272,8704,-9472,-14848,2816,8960,-14080,-20224,-13568,-8192,-10496,-21504,-19968,-19968,-13824,-12800,-8192,-18432,-8192,-1536,-512,0,-11776,-2816,-12544,2304,-2304,-7936,0,-8448,-12032,-17152,1536,5888,-7424,-11008,-4352,16384,14592,6400,-3328,-14848,-2816,3328,-4864,-16384,-15872,-11776,-18176,-19456,-12288,-7424,-10496,-10496,-7936,-14592,-3072,-4096,2304,-4608,-3072,1280,-1792,9216,2816,-3584,-20736,7168,10240,19456,3072,-2816,7680,8192,27136,3328,-256,-12800,10752,13824,-6400,-11264,-2816,22784,22528,13824,2816,-5376,256,13568,11520,-4096,-11008,3840,12288,15104,13568,14336,3840,3328,13824,7936,4864,9216,27136,19200,8704,2816,9984,26112,17408,11520,-7680,-16384,2048,16384,512,-6912,-6400,-5120,6400,8448,18432,3328,-4864,-3328,-512,3840,1536,-1536,-11008,-1536,6912,12800,3584,2304,2816,-1536,5120,3072,3328,11776,24064,24576,12288,-1792,-2048,12032,21760,5632,-11008,-22528,-13312,5120,-1792,-16896,-15872,1792,6144,5120,10240,4096,-11008,-12288,-11264,-3328,-5632,-7168,-12544,-7936,0,-4864,2560,-5888,-3584,-11776,-8192,-5888,-3328,12800,13312,13824,-10752,-10752,-256,4352,7424,-16896,-23296,-20480,-11776,-1024,-11264,-13824,-13056,1280,8192,9984,2816,-4096,-3072,-13312,-10752,-15872,-15360,-8960,-11008,-9728,-7424,-2048,-1280,-5120,6912,-768,-12544,-12800,-2816,6656,6400,3072,-3328,-3328,-4096,4352,256,-6144,-18176,-15360,-12544,1024,-7168,-21760,-11520,-10752,3072,-4864,-2816,1280,256,-14080,-22272,-11264,-9216,-1792,3840,5888,-2304,-2560,6656,7168,8960,-2560,-8192,-3072,1536,9728,12800,21760,14592,8960,10240,14080,15616,8192,2304,1792,-8704,-9984,-256,2048,-2304,-9472,768,9728,8960,3328,4608,256,-5632,-6400,-512,2304,2048,768,4864,7680,12800,10496,3840,2816,-2560,1536,1536,12800,14336,19712,25856,20736,11520,6400,5632,5120,8704,5120,-9728,-12032,-512,-3584,-3328,-2816,4096,3072,3072,7424,8960,7936,-2304,-2304,7680,6400,2816,256,8448,11520,1024,9216,12032,11264,1536,-3072,512,-512,2560,11264,20480,19968,4864,0,4352,1024,-9728,-15616,-7424,-18688,-17408,-10496,-7680,-6656,-14336,-13312,-10496,-5888,-13312,-12544,-4352,-8192,-12544,-8448,-5632,-4608,-5888,-5888,0,-512,768,2816,4096,512,-7168,-9728,-1792,8448,7424,14080,18176,11776,7936,7168,512,-5632,-11520,-20992,-17408,-8448,-4864,-2816,-512,-1792,-8192,-11264,-14848,-16896,-8960,-7424,-3840,3840,6912,4608,5888,7168,-768,256,3584,9728,14336,9472,4352,3840,7936,7936,3840,7424,12288,12544,11264,17408,19456,8960,4608,-6400,-13056,-11264,-10240,-4352,4352,9216,6912,6912,8704,2304,-6912,-512,3840,-256,3328,12032,16640,15616,4352,-1280,6400,7168,3840,7424,5376,2816,5888,9728,12288,4608,1280,-256,-2816,-6912,-4608,-4352,-5376,-5120,-11264,-16640,-16128,-13568,-16128,-12032,-9728,-7168,-7680,-10752,-9984,-6144,-5888,-12544,-16128,-8704,-1792,-2560,-256,-4864,-4096,-512,3584,3072,-3072,-5888,-1536,6400,6144,3072,5120,9728,4352,-2304,-2816,-1536,-4864,-4096,-4352,-12288,-14592,-13312,-11520,-7168,-8448,-10496,-2816,256,-2048,-1792,2816,2560,-5376,-4608,1024,1280,1536,4352,6144,7936,9216,12032,8448,5120,3072,6144,10752,9472,9728,12544,12800,5632,1024,512,4608,0,-512,768,-2048,-5888,-4096,1792,-256,256,2304,7680,10240,6400,11776,16384,11520,8448,6656,8192,7936,6656,5376,6656,7168,7168,6400,5120,3328,1536,2304,4864,2816,-512,3584,3584,-3328,-6656,-2816,-4096,-8704,-14848,-17408,-17920,-18944,-16128,-13824,-13824,-12544,-7424,-4864,-4352,-5120,-1280,2304,0,-5632,-7168,-4608,-3584,-2304,-3584,-3840,-4864,-2048,-1536,-5888,-6912,-4352,-2560,-2048,-1792,-1792,-1280,-2048,-2560,-3584,-4608,-6400,-5888,-8448,-13056,-15616,-14848,-11264,-10496,-10240,-7680,-3840,-2048,256,1536,2816,3328,4096,5376,5376,5632,5888,5888,5376,4096,3584,3840,4096,3072,2304,2560,1792,1280,0,-256,-1024,-2048,-3072,-4352,-4864,-5888,-6656,-7680,-7680,-7680,-6912,-5888,-4352,-3328,-2304,-768,768,3328,3840,4864,5120,5376,5632,7168,8448,8960,9472,11008,11776,11520,11776,11776,12032,12288,13568,13312,12288,11520,12032,10752,9216,7424,6656,4608,3072,2816,768,-1024,-1280,-1280,-4096,-6144,-6912,-7680,-8704,-8448,-8192,-6912,-6400,-5632,-5376,-5376,-4096,-3584,-2816,-1792,-256,512,2048,3584,3840,3328,3328,2816,3072,2048,2816,2560,1536,1024,-256,-1536,-3328,-4096,-5120,-5888,-5888,-4864,-5120,-5888,-6912,-9216,-11008,-11776,-12288,-13568,-14336,-14080,-13056,-12544,-12800,-13312,-12800,-11008,-7680,-6656,-5632,-3072,0,1536,2560,3072,4096,6912,7936,9216,9216,9984,10496,11008,10240,8960,8704,8192,7680,6912,7168,7168,5376,3840,2560,0,-768,-1792,-2560,-3840,-4864,-4608,-4096,-5376,-5888,-4608,-3072,-1280,-768,0,1536,3840,5888,5888,4352,6656,8960,9728,9728,9984,11520,12288,12544,12800,13056,12544,13568,14080,12800,11264,12800,12800,11264,8960,6912,5120,2304,1536,-1024,-3840,-5376,-5376,-6400,-8448,-9472,-9728,-9216,-8960,-8704,-8448,-7936,-6912,-6144,-3840,-2048,-2304,-2816,-768,3328,4864,6144,4352,5888,9728,13312,14592,10496,12032,14080,16384,16384,11008,4096,3584,6912,1792,-5888,-8704,-5376,-5120,-10752,-13568,-7936,-3072,-5888,-5888,-3328,-2560,-2560,-2560,-1536,-6144,-10496,-1792,11520,8704,-2048,-1024,11008,19712,13056,3072,-1280,2560,7424,-2048,-14848,-5120,768,-8704,-11264,-1792,7424,-5376,-14592,-7936,4352,-3072,-19712,-17920,-5120,1280,-10752,-11520,8960,27648,19968,9984,9728,19968,28416,12544,-3072,-17664,-5120,6912,-9472,-21760,-11008,10496,4096,-9216,-7168,8704,15104,1792,-4096,-1792,9728,9984,-2048,-7680,-13312,-1280,8192,-1024,-9472,2560,13568,2816,-5376,-9728,-5888,-4608,-8448,-6144,-4352,-5120,-2816,1536,3840,-768,-9984,-512,18432,15360,-768,-8448,2304,12800,3328,-8448,-19456,-5120,13056,2816,-9216,256,12032,5888,-6400,-13824,-7424,3072,1024,-7168,-7680,-768,4096,-2560,-1280,1024,-1024,3072,6400,1024,-9472,-3328,9472,4608,-3328,7936,11776,-1792,-11264,-9216,-1280,2816,1536,-4608,-11264,-6144,4864,5376,-4096,-9472,-2304,8960,9728,-2048,-7936,-2560,5376,6656,-1024,-6912,256,10240,7936,1024,-1280,1024,1792,-1536,-8192,-4352,9728,15872,9216,-5632,-14592,-6144,4352,512,-11520,-11776,5888,13312,3840,-4608,-9216,-7680,2560,7936,3072,-8192,-7936,7168,8704,768,-12032,-11264,2048,8448,4352,-9472,-9216,4352,9984,-1024,-12288,-3072,5632,3840,7424,6144,-1536,-9216,512,11520,-1536,-16384,-8960,9984,4096,-10752,-12800,1536,8448,-3840,-5376,-768,0,2048,0,512,-2304,-3328,1792,6144,2304,-2304,3840,6912,6400,-2560,-1536,3584,1280,3072,3328,2048,1280,256,-6656,-8960,-5632,-4352,-768,-6400,-9728,-1792,512,2816,-5632,-5888,4608,4352,1792,-3328,-2560,0,768,2304,-1536,768,8192,9984,6656,-768,1536,7424,4096,-4352,-8192,3072,12032,11008,-2304,-15872,-8192,5120,5632,-8192,-12288,0,17152,10240,-14592,-20480,-1024,19712,8704,-14592,-14848,1792,15872,3328,-15104,-11520,2048,10240,-1280,-10240,-10496,2560,15360,6144,-5376,-9472,1024,7168,-4352,-5120,6656,13312,3584,-8448,-1536,7424,3328,-5632,-4096,3328,4352,-4864,-9472,-2304,3840,1792,-3328,-768,5376,512,-5888,-6656,-1536,-256,-768,2048,512,-768,512,8960,1024,-6656,-3584,7680,9216,-4352,-4608,1792,3584,768,-4096,-4096,-1792,-3328,1536,1024,-1024,-6656,-6400,3584,7168,1280,-3584,-1792,-7424,-3072,8704,5376,-9216,-12800,768,10496,768,-1536,4608,4608,4096,-768,2304,4096,-2560,-768,1536,1280,6400,-1280,-8704,-3840,1280,2048,-2816,1024,4864,-5632,-13568,-3840,10496,7168,-11008,-14592,1280,8448,2048,-4096,-7168,-2816,4608,8960,-512,-14336,-5888,16384,15872,-8192,-15872,1024,13824,4608,-7424,-5376,3328,11520,3584,-13824,-10496,4096,10240,512,-10240,-5120,2816,4096,1024,-6400,-6656,4608,10496,1280,-10496,-6400,2048,6144,8192,2560,-5376,-4608,7168,8960,0,-2048,-768,-1024,-2048,2560,768,-11008,-8704,6656,5120,-11008,-7680,12032,11008,-7424,-11264,4096,10496,-3328,-12288,-3840,8192,7168,1024,-3584,-4608,-4608,5632,17920,9216,-12544,-14336,11008,13824,-2560,-17408,-6144,10752,1536,-4864,-6656,-1024,2304,-2048,-1280,1536,-4096,-3584,2304,2560,-1536,-4352,768,4352,-5376,-6400,6400,9728,768,-6400,-256,6656,6656,-5376,-7680,3328,6144,4096,-2560,-9216,-4608,3840,5888,-3072,-6656,5120,11520,2304,-12032,-10496,3072,8960,768,-11008,-10752,2048,11520,0,-15104,-7168,8960,11264,3840,-5632,-11264,2560,16640,6656,-11520,-12800,8704,18432,7680,-3840,-6656,2048,6400,5120,-5632,-6656,6144,11008,-512,-14080,-8960,-1792,-1536,-256,-1536,-3840,-4096,1024,4352,-8192,-17664,-5632,14080,9472,-7936,-10752,1792,13568,6912,-5376,-9216,-4352,5632,8704,10496,2816,-6144,256,9728,6400,-12288,-15872,-1536,13568,11520,-7424,-16128,-6656,7168,11264,-5376,-13824,1792,11776,3072,-8704,-8192,2048,7936,3072,-2048,-8192,-3840,7168,7936,2304,-3584,-1024,4608,3328,5376,-512,-6144,-1536,4864,2048,-5376,-4352,-2304,3328,3840,9216,-2048,-18688,-8192,5376,9984,-4096,-13312,256,11520,-3072,-22784,-12800,8960,12288,0,-14336,-6912,0,3840,2304,-10240,-11008,-10496,7936,15360,-1280,-6912,2048,17408,11264,-7424,-4864,9984,14592,7168,6912,8192,-3072,-11008,-4608,5632,6400,256,-9216,-7168,2048,-1024,-13056,-19200,-3328,16384,5120,-14080,-16640,2560,21504,13312,-4096,-9984,4608,16384,9728,-4608,256,9472,11264,7168,-6656,-10752,-512,10240,8704,-10240,-24320,-7680,9984,7424,-11264,-16384,-1792,5376,-3840,-12032,-10496,-4608,3072,11264,3328,-18176,-16384,4096,18432,6656,-7680,-5888,8704,13824,7168,-512,-3328,9216,9984,-6912,-12288,768,7424,3328,-5120,-512,2560,4608,2048,-9728,-13312,-1024,16128,9216,-8192,-10752,2304,5376,-768,-8448,-4864,3840,5120,-1024,-3840,-256,4864,2048,-8448,-9472,2560,13312,2816,-10240,-4608,10496,11776,-6912,-14848,1280,10752,3840,-3840,-768,2560,2048,2560,-1536,-6656,-1024,7936,5120,-2816,-6400,-3328,4608,7424,-3328,-8448,-2816,2048,-2560,-3584,2048,-2048,2560,9472,6912,-2304,-8960,-8960,512,10752,512,-7936,3072,12032,5888,-8448,-8704,3840,1792,-2048,2560,3840,0,3584,5632,-1536,-5120,-1024,2048,-4096,-8448,256,3840,-2560,-3840,-2304,-3072,-6656,-1536,2816,-3328,-4608,-512,768,1024,2304,1536,-768,768,2048,3584,4096,-1024,-6400,-4608,6656,3840,-4608,-768,4352,6656,8960,1536,-6912,-5888,0,3840,-2048,-8704,-4096,8192,7936,-5632,-9984,-6656,-2304,3328,3584,-3584,-10496,-3072,5376,5376,-1024,-7168,-1280,4608,3072,4096,-1536,-6144,512,6656,9984,3072,-6656,-3584,7424,9216,-256,-5888,1792,6656,6144,3584,-4096,-1792,4864,-512,-8192,-5376,512,-2816,2560,12544,-1536,-14080,-4096,2304,-6912,-11520,-1792,5376,1536,256,2048,-1280,-8192,-7168,-1280,-3584,-4352,6656,10496,1024,-3328,256,5888,1536,-3328,512,2816,6400,6400,-1024,-1536,512,4864,8192,512,-4608,-1536,4352,-2048,-13568,-4096,3840,-3072,-6912,-2816,2816,1024,1024,256,-6144,-3584,4352,1024,-5632,-3072,1280,1792,2304,-512,-6656,-3840,512,1024,2816,2048,512,512,-1024,3328,5120,-2560,256,6912,1792,-3840,2816,6400,512,2048,4608,1280,256,768,0,256,768,-1536,-2816,-6912,-3072,6144,0,-4352,-1792,-7424,-3584,5632,-6912,-14848,256,9472,1536,-1792,-4352,-8960,-512,6144,1280,512,1536,1792,4864,3328,-1792,-1536,2560,1024,3328,6144,-1792,256,3328,768,5120,1024,-5120,4608,8448,-5376,-6144,8448,6656,-10752,-12288,-1280,-4352,2816,7424,-6400,-7936,-3840,-1024,256,-3328,-3840,512,3072,-1280,512,1536,-6912,-5632,1024,4608,9216,3328,-6656,-2816,5888,5632,0,-4096,-3328,3328,11776,6144,-9472,-6144,7424,6912,0,-4608,-6144,-1280,5632,4608,-5120,-5120,3072,-768,-6656,-5376,-1792,512,3584,2304,-5120,-4608,-1792,-2816,-2304,-512,2304,256,-3072,1536,5632,2560,-3328,-5376,-2304,-1024,-1792,-1280,1024,2048,2560,4864,3328,-512,-1792,2560,3584,1280,512,768,4352,3840,4352,6144,4096,4096,256,-3840,-3840,-4864,3840,3584,-7424,-4864,-2560,-2048,0,-2816,-5632,-6912,512,4352,-4608,-6912,-5120,-3840,-1280,1536,1280,-256,0,-256,-1024,-1536,1024,2816,-1024,-2816,0,3328,4608,256,-2304,-768,2560,768,-512,1792,0,-512,3328,9472,7168,-3328,-2560,3840,3840,768,-2560,-4096,-512,5120,5120,1024,-5120,-2816,-256,-1536,-1536,-6400,-6912,768,3072,-1280,-1280,256,-1792,-5632,-3840,-3072,-4864,-2816,-768,512,3840,6400,1536,-5632,-1792,2048,2048,-256,-4864,1536,6144,5888,1280,-3328,4352,6144,1536,1024,512,3072,3840,1536,-512,-1024,-512,2304,3072,768,3328,4096,3840,-4096,-11776,-5120,512,2816,3072,1024,2304,-2304,-6144,-6144,-6400,-2560,-2048,-3584,-1792,-2048,-4352,-1536,-1024,-5120,-7168,-5376,-2304,-512,2816,5888,3072,-768,-768,-2560,-2816,2816,3072,3328,4864,1536,3328,3584,3328,2048,512,4096,-512,-5120,1280,6400,5376,-768,-4864,-1280,4352,1280,-4352,-1792,1024,768,-768,-512,-2304,-2304,3072,1792,-2304,-1024,512,2048,-1024,-5632,-4608,-2816,0,512,2304,3072,-2560,-4864,-1792,-3584,-3584,256,3072,4608,2816,1792,-2816,-4352,-2816,-3840,-2816,-1280,1536,3584,5632,3840,-2560,-256,1792,512,-1536,-3328,1536,2304,4352,5632,2560,3840,0,-2816,1280,4352,768,-4864,-256,4096,1024,-2048,1280,3072,-512,-1536,-6656,-7936,-3584,0,1280,-1024,-3840,-2304,512,-1024,-768,-2048,-2560,0,-2816,-4096,-2816,512,6144,2304,-2304,-1792,-1536,1280,-256,-1792,3072,7168,2304,-2816,-1024,1280,0,-3584,0,1792,1024,1280,-1536,512,1024,-512,-3072,-4096,-1792,-768,2816,3584,1280,512,1024,2304,512,1280,3328,1024,-1280,-512,-512,-1536,-256,512,1536,1024,768,0,-1280,512,0,-3072,-2816,-768,3072,1792,-2304,-1792,0,512,-2048,-3072,-1792,512,256,-768,-768,512,2048,0,-1280,-256,256,0,256,1792,2560,256,-1536,-256,2048,2304,-256,-2560,-1280,1024,1280,256,-1024,-256,1024,512,-768,-2304,-1792,1024,1280,-768,-2560,-2048,-512,0,512,256,-1280,-2304,-512,1536,1792,-512,-1536,0,1536,256,-1792,-1536,768,1792,256,-1280,-1280,-256,1024,1536,-1024,-2816,-1024,1536,-768,-3072,-256,3328,2560,-1280,-3072,-1792,256,2048,1792,512,-1024,256,3584,3584,256,-1792,256,2048,1280,256,0,0,1280,1280,-1280,-3072,-1280,-512,-1536,-1792,-2048,-1792,-1792,-1024,-1792,-2560,-1024,-256,-768,-1280,-768,512,512,-1792,-1280,1280,1792,256,-1536,0,3584,3840,1280,-512,256,512,1024,2304,768,-768,0,768,-256,-1024,768,2304,768,-2560,-2816,512,1280,-256,-2816,-3584,-1536,512,768,-1024,-2304,-1792,256,1280,-256,-2816,-2816,256,2560,2048,-1280,-3328,256,3328,1536,-2048,-1792,2560,3072,-256,-2048,-512,1024,-768,-1024,-768,-256,768,256,-1280,-2304,-768,1024,1792,512,-1024,-512,1536,2304,-1024,-2048,512,1280,-768,-2048,1024,2816,0,-1792,512,2048,256,-1024,-512,1792,2048,-1024,-2048,-1024,-256,0,256,-1024,-2304,-256,1792,0,-3072,-2048,1280,512,-2560,-2304,-256,-768,-2048,-1536,-512,256,-256,-1280,256,1536,512,-1280,-512,1024,1024,1280,1280,1280,1536,2304,1280,-1536,-768,2048,1536,-512,-1024,768,1536,512,-1792,-4096,-3072,256,1536,-1536,-2304,0,1024,768,-256,-1792,-4096,-2304,768,512,768,-512,-768,2048,2816,-256,-2816,-768,2048,2560,512,-256,1024,1280,0,-1792,-2048,-768,256,256,-1024,-1536,-1024,768,2560,1024,-1536,-1536,0,256,0,-256,-1792,-1536,0,768,1024,-256,-768,-256,0,-512,-1024,-512,768,1536,1280,512,-256,-256,256,0,-768,-1536,-512,768,1280,256,-512,0,512,-512,-2048,-2048,-1024,0,256,1024,256,-1024,-512,256,512,768,-256,0,512,0,-768,-768,256,768,768,256,-512,-1024,-1024,-512,0,-512,-256,-256,-1792,-2048,-256,768,-256,-1536,-1536,-1024,-1024,-768,512,1792,512,0,768,1024,256,768,1280,512,256,256,256,1024,1024,256,-768,-512,1024,1024,-1280,-2304,0,512,-1536,-1792,-256,0,-512,256,256,-1280,-768,-256,-256,-512,-1536,256,2304,1792,-256,-1536,-1536,0,1280,512,-1280,-1024,256,1280,512,-1536,-1024,768,512,-1024,-256,256,-768,256,1792,256,-1792,-1280,-512,-512,512,1536,-256,-2816,-2560,768,1024,-1024,-512,1024,512,-768,-768,256,1280,1024,256,-512,-256,512,1024,512,-256,256,1536,768,-512,-256,0,-256,256,768,0,-1280,-1792,256,1536,-512,-2560,-2048,-1024,-512,-768,-2304,-1792,1024,2048,-256,-1536,-256,768,512,-512,-1024,0,1792,1280,256,0,0,-512,0,1024,512,256,512,768,256,-1024,-768,-512,-1536,-768,768,512,-256,-256,-256,-512,-1024,-1280,-512,512,512,-512,-512,768,768,0,-768,-768,0,0,0,0,-512,0,1792,1280,-512,-1536,-1536,-768,0,0,-768,-512,512,0,-512,-512,-512,-512,-512,-256,-768,-768,-256,512,256,-256,0,256,256,256,256,0,0,256,768,768,-512,-768,512,1024,0,-512,0,256,-768,-1280,-256,512,768,256,-1024,-1536,-512,768,-256,-1536,-1280,-1024,-256,512,1024,256,-1280,-768,768,768,-768,-1280,256,1280,512,-1024,-768,768,1280,512,256,256,-768,-1024,-256,512,256,-512,-256,0,-768,-1280,-768,-256,-512,-1024,-768,-768,-1024,-256,0,256,256,256,768,768,256,0,512,1024,256,-256,-512,-512,256,1024,768,-256,-512,256,256,-512,-1024,-768,0,256,-256,-256,-768,-1024,-256,512,-256,-1536,-1280,0,512,-256,-1792,-1536,256,512,-512,-512,256,1024,1280,256,-768,0,1024,1280,512,-256,-256,768,1024,256,-512,-256,768,0,-512,-1024,-1024,-1024,-1280,-1024,-512,0,-512,-768,-256,0,0,-512,-256,-512,-768,256,1280,256,-256,256,0,-256,0,768,256,0,256,-256,0,0,0,-256,-512,-256,512,256,-512,-512,-512,0,256,-512,-1024,-768,-256,-256,-1024,-1024,0,1024,768,-768,-1024,0,512,768,768,256,-512,-768,0,0,-512,0,768,512,0,0,256,512,256,0,-512,-1024,-1792,-768,1024,1024,-256,-256,512,-256,-768,-256,-512,-1024,-768,0,-256,0,1024,1024,-512,-1024,-512,256,768,0,-512,0,256,0,0,-768,-1280,-256,768,768,-512,-1280,256,256,-1280,-1280,-256,-256,0,512,256,0,0,-768,-256,512,512,0,-256,1024,512,-512,-256,-512,-768,0,512,512,0,-256,-512,-512,0,256,-256,256,512,256,0,-768,-768,-768,-512,-256,-256,0,512,-512,-1024,-512,256,-256,-1536,-1792,-1024,256,1280,1024,-512,-768,512,1024,-512,-1024,768,1536,1280,512,-512,-256,0,-512,-256,0,512,-256,-1024,-1024,0,256,-768,-1280,-1280,-256,768,0,-1024,-768,0,0,-1024,-1024,256,1024,512,256,1024,1536,512,-1024,-1280,-256,1280,768,-1024,-512,0,768,1024,-768,-2304,-2304,-768,256,-512,-1280,-512,768,1024,0,-1536,-1280,0,768,512,512,768,256,256,512,256,-256,-512,-256,768,512,0,0,-256,0,0,-256,256,512,-512,-1280,-256,512,-768,-1536,-768,-256,-256,-768,-256,256,-256,-256,0,256,-256,-512,-256,-512,-512,-256,0,512,256,512,1280,1024,-256,-1280,-1024,0,1024,1024,0,-1024,-256,1280,1024,-256,-1024,-1536,-768,256,256,-768,-1280,0,768,-768,-2304,-1280,512,768,-256,-1024,-1024,-512,0,256,256,512,512,256,-256,-512,0,512,768,0,-768,-256,768,768,-256,-512,256,512,0,-512,0,256,-256,-512,-512,-256,256,-256,0,1024,512,-1024,-1792,-1024,0,0,-768,-1280,-256,768,512,-512,-1280,-1024,0,512,0,-768,0,1536,1280,-768,-1280,256,768,256,0,0,-256,0,512,-256,-768,-256,512,256,-256,-512,-256,-512,-1024,-1024,-256,-256,-1280,-512,512,512,-256,-768,-512,256,512,256,0,0,256,512,512,-512,-1024,256,1536,768,-768,-768,768,1280,0,-1792,-1536,512,1024,-768,-1536,-512,512,0,-1024,-512,0,256,-256,-256,-512,-768,-512,256,0,-768,-512,256,512,512,256,-512,-256,0,256,-256,-512,-256,512,768,0,-512,-768,-256,512,768,256,-768,-768,-256,0,256,0,-256,0,0,0,-256,-768,0,512,256,-512,-512,0,256,0,-768,-768,0,512,0,-768,-1280,-768,512,768,-256,-768,0,1024,0,-1280,-1280,0,768,256,-512,-768,-512,512,768,-256,-1024,0,768,0,-512,-512,0,0,-256,-512,-256,768,1280,512,-256,-256,0,-256,-512,-256,512,1024,512,-512,-1024,-768,-512,-768,-768,-512,-256,256,0,-256,-768,-768,-256,0,-768,-768,768,1024,0,-256,256,256,0,-512,-512,768,1280,0,-768,-512,0,0,0,-512,-512,512,1024,256,-1024,-1280,0,256,-768,-1024,-512,256,512,256,-512,-1024,-768,-256,256,256,-1024,-768,768,1280,0,-768,0,0,-256,-512,-1024,-768,-256,512,768,256,-512,-256,256,-512,-1536,-768,768,1280,256,-256,-256,512,0,-1280,-1024,-512,256,768,256,-256,-256,256,256,-256,-512,-256,-256,256,768,512,-256,-512,-768,-512,-256,256,256,-512,-512,0,0,-512,-1024,-768,0,256,-256,-768,-256,256,0,-512,-256,256,0,-256,0,256,0,256,256,0,-256,0,512,768,512,-256,-512,-256,0,0,-768,-768,-256,256,0,-768,-1536,-768,256,256,-512,-1280,-1280,-512,256,-512,-1280,-512,1024,1280,512,0,0,512,256,-256,-768,-256,256,768,256,0,256,512,256,0,-512,-512,0,512,0,-768,-512,-256,-256,-512,-512,-512,0,512,512,256,-512,-768,-256,0,-512,-1024,-256,512,512,0,0,256,-256,-768,0,256,0,0,256,256,-256,0,512,512,-256,-768,0,0,-512,-256,256,256,-256,-768,-768,-256,-768,-1280,-768,-256,0,-256,-256,0,256,0,0,-256,-256,-256,0,256,256,0,-256,0,512,256,0,-256,0,512,256,-512,-768,0,512,0,-768,-768,-512,512,512,-256,-768,-512,256,256,0,-768,-512,512,768,-512,-1280,-512,768,512,-256,-256,0,256,256,0,-256,-256,0,0,-512,-1280,-1024,0,256,-512,-1024,-512,256,256,0,-512,-512,0,512,256,-256,-512,-256,0,256,256,512,768,256,-256,-512,0,0,-512,-512,256,0,-512,0,512,0,-768,-512,0,-512,-512,0,256,0,-256,-512,-512,-512,-512,0,256,0,-512,-256,256,-512,-768,-256,256,-512,-1024,-256,512,0,-256,-256,-256,0,256,0,-256,256,512,0,-768,-768,256,768,256,-768,-768,512,768,0,-256,0,256,256,256,0,-1024,-768,512,768,0,-512,-512,-256,-256,0,0,0,0,-256,-512,-256,0,-256,-256,-256,-768,-768,-256,0,-256,-512,-256,256,256,-256,-1024,-512,512,768,-256,-768,-256,0,256,256,0,0,512,512,-256,-256,0,0,0,256,256,0,-512,-256,0,-256,-256,0,-256,-256,0,256,0,-512,-256,-256,-512,-256,-256,-256,0,0,0,-512,-768,-256,512,256,-256,-256,0,0,0,0,-256,-256,-256,0,-256,-512,-256,256,512,0,-512,-512,-256,256,256,0,-256,0,0,0,-256,-512,-512,-256,0,-256,-512,-256,256,256,0,-256,-512,-256,-256,0,0,0,-256,-512,-256,0,-256,-512,-256,256,256,-256,-512,-512,0,512,256,-256,-512,0,512,0,-512,-512,256,256,0,-256,0,0,0,-256,-512,-512,-512,-512,-256,-256,-256,0,256,256,0,-512,-512,256,0,-512,-512,0,256,256,0,0,0,0,-256,-512,-512,0,0,-256,-256,0,0,-512,-256,0,0,256,0,-256,-256,512,512,-256,-512,-512,-256,0,0,0,0,0,-256,-256,0,0,-256,-256,-256,0,-256,-256,-256,-256,-256,-256,-512,-512,0,256,256,0,0,-256,-256,-256,-256,0,256,0,0,256,256,0,-256,256,0,-256,256,256,-256,-768,-512,0,0,-256,-256,-256,-256,256,256,-256,-512,-512,-256,-256,-256,-768,-512,512,512,-256,-512,-256,0,-256,-512,-512,0,256,0,0,256,256,0,-512,-768,-512,256,512,256,0,512,768,0,-512,-512,-256,-256,0,256,256,-256,-512,-256,-256,-256,-256,-256,-256,-256,256,256,-512,-768,0,256,-256,-1024,-512,512,256,-512,-768,-256,256,256,512,256,-256,-256,-256,-256,-256,0,256,256,0,0,0,-256,-256,0,-256,-768,-768,-256,256,-256,-256,-256,0,0,-256,-512,-256,256,256,-256,-768,-256,512,512,-256,-512,-256,0,0,-512,-256,256,256,256,-256,-256,256,256,-512,-512,0,256,0,-512,-512,0,0,-256,-256,-256,0,0,-512,-512,0,0,-256,-256,-256,0,256,256,0,0,0,0,0,0,-256,-256,0,0,-256,-256,0,0,0,-256,-256,-256,-256,-256,-512,-256,0,0,0,-256,-256,0,256,0,0,-256,-256,0,256,0,-256,-256,256,256,0,-256,0,256,256,0,-256,-256,-512,-256,0,0,-256,-512,-512,-256,-256,-512,-512,-256,-256,-256,-256,-256,0,256,0,-256,-256,0,256,256,-256,-512,0,512,0,-512,0,512,256,-256,-512,-512,-256,0,-256,-256,-256,256,256,-512,-768,-256,256,0,-512,-256,256,0,-256,-256,256,0,-256,-256,0,0,0,256,0,-512,-256,0,0,-256,-512,0,256,0,-256,-256,0,0,-256,-256,0,0,-256,-256,0,-256,-256,-256,0,0,0,0,0,256,0,0,0,-256,-256,-256,0,0,0,0,-256,0,256,256,0,-256,-256,0,-256,-512,-256,0,-512,-768,-512,-256,0,0,0,0,-512,-768,-512,-256,-256,-256,0,0,-256,0,256,-256,-512,0,256,256,-256,0,256,256,0,-256,-512,-256,256,256,-256,-256,256,256,-256,-768,-512,0,0,-256,-256,-256,-256,-256,-512,-512,-256,256,0,0,0,0,-512,-256,0,-256,-512,0,512,256,-256,-256,256,0,-512,-256,0,256,0,-256,0,-256,-512,-256,0,0,-256,-256,0,-256,-512,-256,256,0,-512,-768,-256,0,0,0,0,0,256,256,0,0,0,-256,-256,-256,0,0,-256,0,256,256,-256,-512,-256,-256,-512,-512,-256,0,256,-256,-512,-512,0,512,0,-256,-512,0,256,0,-256,-256,0,0,-256,-256,0,512,256,-256,-256,-256,0,-256,-256,0,0,-256,-512,-256,0,0,-256,-512,-256,-256,-256,-256,-256,0,256,0,-512,-512,0,256,0,-256,-256,0,0,0,0,-256,0,0,0,-256,-256,0,0,0,-256,-256,0,0,-256,-256,0,0,0,0,-256,-256,-256,0,0,0,-256,-256,0,0,0,-256,-256,-256,-256,0,0,-256,0,0,0,0,-256,-256,0,0,-256,0,0,-256,0,-256,0,-256,0,0,-256,0,-256,0,-256,0,-256,-256,0,-256,0,-256,0,-256,0,-256,0,-256,0,-256,0,-256,-256,0,-256,0,-256,0,-256,0,-256,0,0,-256,0,-256,-256,0,-256,0,-256,0,-256,0,-256,0,0,-256,0,-256,0,0,-256,0,-256,0,-256,-256,0,-256,0,-256,0,-256,0,0,-256,0,-256,-256,0,-256,0,-256,0,-256,-256,0,-256,0,-256,0,-256,0,-256,0,-256,0,-256,0,-256,0,0,-256,0,-256,0,0,-256,0,0,-256,0,-256,0,-256,0};
  uint16_t size = 57971;
 80004ec:	f24e 2373 	movw	r3, #57971	@ 0xe273
 80004f0:	80fb      	strh	r3, [r7, #6]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f2:	bf00      	nop
 80004f4:	e7fd      	b.n	80004f2 <main+0x2e>
 80004f6:	bf00      	nop
 80004f8:	2000e348 	.word	0x2000e348

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b094      	sub	sp, #80	@ 0x50
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0320 	add.w	r3, r7, #32
 8000506:	2230      	movs	r2, #48	@ 0x30
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f003 fc80 	bl	8003e10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	f107 030c 	add.w	r3, r7, #12
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000520:	2300      	movs	r3, #0
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	4b28      	ldr	r3, [pc, #160]	@ (80005c8 <SystemClock_Config+0xcc>)
 8000526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000528:	4a27      	ldr	r2, [pc, #156]	@ (80005c8 <SystemClock_Config+0xcc>)
 800052a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800052e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000530:	4b25      	ldr	r3, [pc, #148]	@ (80005c8 <SystemClock_Config+0xcc>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800053c:	2300      	movs	r3, #0
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	4b22      	ldr	r3, [pc, #136]	@ (80005cc <SystemClock_Config+0xd0>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000548:	4a20      	ldr	r2, [pc, #128]	@ (80005cc <SystemClock_Config+0xd0>)
 800054a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	4b1e      	ldr	r3, [pc, #120]	@ (80005cc <SystemClock_Config+0xd0>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800055c:	2302      	movs	r3, #2
 800055e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000560:	2301      	movs	r3, #1
 8000562:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000564:	2310      	movs	r3, #16
 8000566:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000568:	2302      	movs	r3, #2
 800056a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800056c:	2300      	movs	r3, #0
 800056e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000570:	2308      	movs	r3, #8
 8000572:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000574:	2350      	movs	r3, #80	@ 0x50
 8000576:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000578:	2302      	movs	r3, #2
 800057a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800057c:	2307      	movs	r3, #7
 800057e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	f107 0320 	add.w	r3, r7, #32
 8000584:	4618      	mov	r0, r3
 8000586:	f001 ff55 	bl	8002434 <HAL_RCC_OscConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000590:	f000 f952 	bl	8000838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000594:	230f      	movs	r3, #15
 8000596:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000598:	2302      	movs	r3, #2
 800059a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005aa:	f107 030c 	add.w	r3, r7, #12
 80005ae:	2102      	movs	r1, #2
 80005b0:	4618      	mov	r0, r3
 80005b2:	f002 f9b7 	bl	8002924 <HAL_RCC_ClockConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005bc:	f000 f93c 	bl	8000838 <Error_Handler>
  }
}
 80005c0:	bf00      	nop
 80005c2:	3750      	adds	r7, #80	@ 0x50
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40023800 	.word	0x40023800
 80005cc:	40007000 	.word	0x40007000

080005d0 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80005d4:	4b13      	ldr	r3, [pc, #76]	@ (8000624 <MX_I2S2_Init+0x54>)
 80005d6:	4a14      	ldr	r2, [pc, #80]	@ (8000628 <MX_I2S2_Init+0x58>)
 80005d8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80005da:	4b12      	ldr	r3, [pc, #72]	@ (8000624 <MX_I2S2_Init+0x54>)
 80005dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80005e0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80005e2:	4b10      	ldr	r3, [pc, #64]	@ (8000624 <MX_I2S2_Init+0x54>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80005e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000624 <MX_I2S2_Init+0x54>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80005ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000624 <MX_I2S2_Init+0x54>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80005f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000624 <MX_I2S2_Init+0x54>)
 80005f6:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80005fa:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80005fc:	4b09      	ldr	r3, [pc, #36]	@ (8000624 <MX_I2S2_Init+0x54>)
 80005fe:	2200      	movs	r2, #0
 8000600:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000602:	4b08      	ldr	r3, [pc, #32]	@ (8000624 <MX_I2S2_Init+0x54>)
 8000604:	2200      	movs	r2, #0
 8000606:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000608:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <MX_I2S2_Init+0x54>)
 800060a:	2200      	movs	r2, #0
 800060c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800060e:	4805      	ldr	r0, [pc, #20]	@ (8000624 <MX_I2S2_Init+0x54>)
 8000610:	f001 f93e 	bl	8001890 <HAL_I2S_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800061a:	f000 f90d 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	2000e2a0 	.word	0x2000e2a0
 8000628:	40003800 	.word	0x40003800

0800062c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000632:	f107 0308 	add.w	r3, r7, #8
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000640:	463b      	mov	r3, r7
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000648:	4b1d      	ldr	r3, [pc, #116]	@ (80006c0 <MX_TIM4_Init+0x94>)
 800064a:	4a1e      	ldr	r2, [pc, #120]	@ (80006c4 <MX_TIM4_Init+0x98>)
 800064c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 5000-1;
 800064e:	4b1c      	ldr	r3, [pc, #112]	@ (80006c0 <MX_TIM4_Init+0x94>)
 8000650:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000654:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000656:	4b1a      	ldr	r3, [pc, #104]	@ (80006c0 <MX_TIM4_Init+0x94>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1;
 800065c:	4b18      	ldr	r3, [pc, #96]	@ (80006c0 <MX_TIM4_Init+0x94>)
 800065e:	2201      	movs	r2, #1
 8000660:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000662:	4b17      	ldr	r3, [pc, #92]	@ (80006c0 <MX_TIM4_Init+0x94>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000668:	4b15      	ldr	r3, [pc, #84]	@ (80006c0 <MX_TIM4_Init+0x94>)
 800066a:	2200      	movs	r2, #0
 800066c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800066e:	4814      	ldr	r0, [pc, #80]	@ (80006c0 <MX_TIM4_Init+0x94>)
 8000670:	f002 fcc6 	bl	8003000 <HAL_TIM_Base_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800067a:	f000 f8dd 	bl	8000838 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800067e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000682:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000684:	f107 0308 	add.w	r3, r7, #8
 8000688:	4619      	mov	r1, r3
 800068a:	480d      	ldr	r0, [pc, #52]	@ (80006c0 <MX_TIM4_Init+0x94>)
 800068c:	f002 fe5a 	bl	8003344 <HAL_TIM_ConfigClockSource>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000696:	f000 f8cf 	bl	8000838 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800069a:	2300      	movs	r3, #0
 800069c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800069e:	2300      	movs	r3, #0
 80006a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80006a2:	463b      	mov	r3, r7
 80006a4:	4619      	mov	r1, r3
 80006a6:	4806      	ldr	r0, [pc, #24]	@ (80006c0 <MX_TIM4_Init+0x94>)
 80006a8:	f003 f86c 	bl	8003784 <HAL_TIMEx_MasterConfigSynchronization>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80006b2:	f000 f8c1 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	3718      	adds	r7, #24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	2000e348 	.word	0x2000e348
 80006c4:	40000800 	.word	0x40000800

080006c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006cc:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006ce:	4a12      	ldr	r2, [pc, #72]	@ (8000718 <MX_USART2_UART_Init+0x50>)
 80006d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006d2:	4b10      	ldr	r3, [pc, #64]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006da:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006ec:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f2:	4b08      	ldr	r3, [pc, #32]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f8:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	@ (8000714 <MX_USART2_UART_Init+0x4c>)
 8000700:	f003 f8c2 	bl	8003888 <HAL_UART_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800070a:	f000 f895 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	2000e390 	.word	0x2000e390
 8000718:	40004400 	.word	0x40004400

0800071c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <MX_DMA_Init+0x3c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	4a0b      	ldr	r2, [pc, #44]	@ (8000758 <MX_DMA_Init+0x3c>)
 800072c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000730:	6313      	str	r3, [r2, #48]	@ 0x30
 8000732:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <MX_DMA_Init+0x3c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2100      	movs	r1, #0
 8000742:	200f      	movs	r0, #15
 8000744:	f000 fbe5 	bl	8000f12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000748:	200f      	movs	r0, #15
 800074a:	f000 fbfe 	bl	8000f4a <HAL_NVIC_EnableIRQ>

}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	@ 0x28
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b2d      	ldr	r3, [pc, #180]	@ (800082c <MX_GPIO_Init+0xd0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a2c      	ldr	r2, [pc, #176]	@ (800082c <MX_GPIO_Init+0xd0>)
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b2a      	ldr	r3, [pc, #168]	@ (800082c <MX_GPIO_Init+0xd0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b26      	ldr	r3, [pc, #152]	@ (800082c <MX_GPIO_Init+0xd0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a25      	ldr	r2, [pc, #148]	@ (800082c <MX_GPIO_Init+0xd0>)
 8000798:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b23      	ldr	r3, [pc, #140]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b1f      	ldr	r3, [pc, #124]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	4a1e      	ldr	r2, [pc, #120]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ba:	4b1c      	ldr	r3, [pc, #112]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b18      	ldr	r3, [pc, #96]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	4a17      	ldr	r2, [pc, #92]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007d0:	f043 0302 	orr.w	r3, r3, #2
 80007d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d6:	4b15      	ldr	r3, [pc, #84]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f003 0302 	and.w	r3, r3, #2
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2120      	movs	r1, #32
 80007e6:	4812      	ldr	r0, [pc, #72]	@ (8000830 <MX_GPIO_Init+0xd4>)
 80007e8:	f001 f838 	bl	800185c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4619      	mov	r1, r3
 8000802:	480c      	ldr	r0, [pc, #48]	@ (8000834 <MX_GPIO_Init+0xd8>)
 8000804:	f000 fea6 	bl	8001554 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000808:	2320      	movs	r3, #32
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	2301      	movs	r3, #1
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4619      	mov	r1, r3
 800081e:	4804      	ldr	r0, [pc, #16]	@ (8000830 <MX_GPIO_Init+0xd4>)
 8000820:	f000 fe98 	bl	8001554 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000824:	bf00      	nop
 8000826:	3728      	adds	r7, #40	@ 0x28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40023800 	.word	0x40023800
 8000830:	40020000 	.word	0x40020000
 8000834:	40020800 	.word	0x40020800

08000838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800083c:	b672      	cpsid	i
}
 800083e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <Error_Handler+0x8>

08000844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b10      	ldr	r3, [pc, #64]	@ (8000890 <HAL_MspInit+0x4c>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000852:	4a0f      	ldr	r2, [pc, #60]	@ (8000890 <HAL_MspInit+0x4c>)
 8000854:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000858:	6453      	str	r3, [r2, #68]	@ 0x44
 800085a:	4b0d      	ldr	r3, [pc, #52]	@ (8000890 <HAL_MspInit+0x4c>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800085e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4b09      	ldr	r3, [pc, #36]	@ (8000890 <HAL_MspInit+0x4c>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086e:	4a08      	ldr	r2, [pc, #32]	@ (8000890 <HAL_MspInit+0x4c>)
 8000870:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000874:	6413      	str	r3, [r2, #64]	@ 0x40
 8000876:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <HAL_MspInit+0x4c>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000882:	2007      	movs	r0, #7
 8000884:	f000 fb3a 	bl	8000efc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40023800 	.word	0x40023800

08000894 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b090      	sub	sp, #64	@ 0x40
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008ac:	f107 0318 	add.w	r3, r7, #24
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a4c      	ldr	r2, [pc, #304]	@ (80009f4 <HAL_I2S_MspInit+0x160>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	f040 8091 	bne.w	80009ea <HAL_I2S_MspInit+0x156>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80008c8:	2301      	movs	r3, #1
 80008ca:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80008cc:	2332      	movs	r3, #50	@ 0x32
 80008ce:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80008d0:	2302      	movs	r3, #2
 80008d2:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008d4:	f107 0318 	add.w	r3, r7, #24
 80008d8:	4618      	mov	r0, r3
 80008da:	f002 fa43 	bl	8002d64 <HAL_RCCEx_PeriphCLKConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <HAL_I2S_MspInit+0x54>
    {
      Error_Handler();
 80008e4:	f7ff ffa8 	bl	8000838 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	4b42      	ldr	r3, [pc, #264]	@ (80009f8 <HAL_I2S_MspInit+0x164>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f0:	4a41      	ldr	r2, [pc, #260]	@ (80009f8 <HAL_I2S_MspInit+0x164>)
 80008f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008f8:	4b3f      	ldr	r3, [pc, #252]	@ (80009f8 <HAL_I2S_MspInit+0x164>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000900:	617b      	str	r3, [r7, #20]
 8000902:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000904:	2300      	movs	r3, #0
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	4b3b      	ldr	r3, [pc, #236]	@ (80009f8 <HAL_I2S_MspInit+0x164>)
 800090a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090c:	4a3a      	ldr	r2, [pc, #232]	@ (80009f8 <HAL_I2S_MspInit+0x164>)
 800090e:	f043 0304 	orr.w	r3, r3, #4
 8000912:	6313      	str	r3, [r2, #48]	@ 0x30
 8000914:	4b38      	ldr	r3, [pc, #224]	@ (80009f8 <HAL_I2S_MspInit+0x164>)
 8000916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000918:	f003 0304 	and.w	r3, r3, #4
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	4b34      	ldr	r3, [pc, #208]	@ (80009f8 <HAL_I2S_MspInit+0x164>)
 8000926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000928:	4a33      	ldr	r2, [pc, #204]	@ (80009f8 <HAL_I2S_MspInit+0x164>)
 800092a:	f043 0302 	orr.w	r3, r3, #2
 800092e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000930:	4b31      	ldr	r3, [pc, #196]	@ (80009f8 <HAL_I2S_MspInit+0x164>)
 8000932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000934:	f003 0302 	and.w	r3, r3, #2
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	68fb      	ldr	r3, [r7, #12]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800093c:	2308      	movs	r3, #8
 800093e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800094c:	2305      	movs	r3, #5
 800094e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000950:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000954:	4619      	mov	r1, r3
 8000956:	4829      	ldr	r0, [pc, #164]	@ (80009fc <HAL_I2S_MspInit+0x168>)
 8000958:	f000 fdfc 	bl	8001554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800095c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000960:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800096e:	2305      	movs	r3, #5
 8000970:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000972:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000976:	4619      	mov	r1, r3
 8000978:	4821      	ldr	r0, [pc, #132]	@ (8000a00 <HAL_I2S_MspInit+0x16c>)
 800097a:	f000 fdeb 	bl	8001554 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800097e:	4b21      	ldr	r3, [pc, #132]	@ (8000a04 <HAL_I2S_MspInit+0x170>)
 8000980:	4a21      	ldr	r2, [pc, #132]	@ (8000a08 <HAL_I2S_MspInit+0x174>)
 8000982:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000984:	4b1f      	ldr	r3, [pc, #124]	@ (8000a04 <HAL_I2S_MspInit+0x170>)
 8000986:	2200      	movs	r2, #0
 8000988:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800098a:	4b1e      	ldr	r3, [pc, #120]	@ (8000a04 <HAL_I2S_MspInit+0x170>)
 800098c:	2240      	movs	r2, #64	@ 0x40
 800098e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000990:	4b1c      	ldr	r3, [pc, #112]	@ (8000a04 <HAL_I2S_MspInit+0x170>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000996:	4b1b      	ldr	r3, [pc, #108]	@ (8000a04 <HAL_I2S_MspInit+0x170>)
 8000998:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800099c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800099e:	4b19      	ldr	r3, [pc, #100]	@ (8000a04 <HAL_I2S_MspInit+0x170>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009a4:	4b17      	ldr	r3, [pc, #92]	@ (8000a04 <HAL_I2S_MspInit+0x170>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80009aa:	4b16      	ldr	r3, [pc, #88]	@ (8000a04 <HAL_I2S_MspInit+0x170>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80009b0:	4b14      	ldr	r3, [pc, #80]	@ (8000a04 <HAL_I2S_MspInit+0x170>)
 80009b2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80009b6:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009b8:	4b12      	ldr	r3, [pc, #72]	@ (8000a04 <HAL_I2S_MspInit+0x170>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80009be:	4811      	ldr	r0, [pc, #68]	@ (8000a04 <HAL_I2S_MspInit+0x170>)
 80009c0:	f000 fade 	bl	8000f80 <HAL_DMA_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <HAL_I2S_MspInit+0x13a>
    {
      Error_Handler();
 80009ca:	f7ff ff35 	bl	8000838 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a0c      	ldr	r2, [pc, #48]	@ (8000a04 <HAL_I2S_MspInit+0x170>)
 80009d2:	639a      	str	r2, [r3, #56]	@ 0x38
 80009d4:	4a0b      	ldr	r2, [pc, #44]	@ (8000a04 <HAL_I2S_MspInit+0x170>)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	2100      	movs	r1, #0
 80009de:	2024      	movs	r0, #36	@ 0x24
 80009e0:	f000 fa97 	bl	8000f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80009e4:	2024      	movs	r0, #36	@ 0x24
 80009e6:	f000 fab0 	bl	8000f4a <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80009ea:	bf00      	nop
 80009ec:	3740      	adds	r7, #64	@ 0x40
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40003800 	.word	0x40003800
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40020800 	.word	0x40020800
 8000a00:	40020400 	.word	0x40020400
 8000a04:	2000e2e8 	.word	0x2000e2e8
 8000a08:	40026070 	.word	0x40026070

08000a0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a0e      	ldr	r2, [pc, #56]	@ (8000a54 <HAL_TIM_Base_MspInit+0x48>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d115      	bne.n	8000a4a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	4b0d      	ldr	r3, [pc, #52]	@ (8000a58 <HAL_TIM_Base_MspInit+0x4c>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a26:	4a0c      	ldr	r2, [pc, #48]	@ (8000a58 <HAL_TIM_Base_MspInit+0x4c>)
 8000a28:	f043 0304 	orr.w	r3, r3, #4
 8000a2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a58 <HAL_TIM_Base_MspInit+0x4c>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a32:	f003 0304 	and.w	r3, r3, #4
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	201e      	movs	r0, #30
 8000a40:	f000 fa67 	bl	8000f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000a44:	201e      	movs	r0, #30
 8000a46:	f000 fa80 	bl	8000f4a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000a4a:	bf00      	nop
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40000800 	.word	0x40000800
 8000a58:	40023800 	.word	0x40023800

08000a5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	@ 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a19      	ldr	r2, [pc, #100]	@ (8000ae0 <HAL_UART_MspInit+0x84>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d12b      	bne.n	8000ad6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b18      	ldr	r3, [pc, #96]	@ (8000ae4 <HAL_UART_MspInit+0x88>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a86:	4a17      	ldr	r2, [pc, #92]	@ (8000ae4 <HAL_UART_MspInit+0x88>)
 8000a88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <HAL_UART_MspInit+0x88>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <HAL_UART_MspInit+0x88>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	4a10      	ldr	r2, [pc, #64]	@ (8000ae4 <HAL_UART_MspInit+0x88>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <HAL_UART_MspInit+0x88>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ab6:	230c      	movs	r3, #12
 8000ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ac6:	2307      	movs	r3, #7
 8000ac8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4805      	ldr	r0, [pc, #20]	@ (8000ae8 <HAL_UART_MspInit+0x8c>)
 8000ad2:	f000 fd3f 	bl	8001554 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ad6:	bf00      	nop
 8000ad8:	3728      	adds	r7, #40	@ 0x28
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40004400 	.word	0x40004400
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020000 	.word	0x40020000

08000aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <NMI_Handler+0x4>

08000af4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <HardFault_Handler+0x4>

08000afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <MemManage_Handler+0x4>

08000b04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <BusFault_Handler+0x4>

08000b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <UsageFault_Handler+0x4>

08000b14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b42:	f000 f8eb 	bl	8000d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000b50:	4802      	ldr	r0, [pc, #8]	@ (8000b5c <DMA1_Stream4_IRQHandler+0x10>)
 8000b52:	f000 fac3 	bl	80010dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	2000e2e8 	.word	0x2000e2e8

08000b60 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000b64:	481b      	ldr	r0, [pc, #108]	@ (8000bd4 <TIM4_IRQHandler+0x74>)
 8000b66:	f002 fafd 	bl	8003164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  arr[0] = ((unsigned short int) data[i]) * 150;
 8000b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd8 <TIM4_IRQHandler+0x78>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a1b      	ldr	r2, [pc, #108]	@ (8000bdc <TIM4_IRQHandler+0x7c>)
 8000b70:	5cd3      	ldrb	r3, [r2, r3]
 8000b72:	461a      	mov	r2, r3
 8000b74:	0092      	lsls	r2, r2, #2
 8000b76:	4413      	add	r3, r2
 8000b78:	461a      	mov	r2, r3
 8000b7a:	0112      	lsls	r2, r2, #4
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	b29a      	uxth	r2, r3
 8000b82:	4b17      	ldr	r3, [pc, #92]	@ (8000be0 <TIM4_IRQHandler+0x80>)
 8000b84:	801a      	strh	r2, [r3, #0]
  arr[1] = ((unsigned short int) data[i]) * 150;
 8000b86:	4b14      	ldr	r3, [pc, #80]	@ (8000bd8 <TIM4_IRQHandler+0x78>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a14      	ldr	r2, [pc, #80]	@ (8000bdc <TIM4_IRQHandler+0x7c>)
 8000b8c:	5cd3      	ldrb	r3, [r2, r3]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	0092      	lsls	r2, r2, #2
 8000b92:	4413      	add	r3, r2
 8000b94:	461a      	mov	r2, r3
 8000b96:	0112      	lsls	r2, r2, #4
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	4b10      	ldr	r3, [pc, #64]	@ (8000be0 <TIM4_IRQHandler+0x80>)
 8000ba0:	805a      	strh	r2, [r3, #2]

  HAL_I2S_Transmit(&hi2s2, arr, 2, HAL_MAX_DELAY);
 8000ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba6:	2202      	movs	r2, #2
 8000ba8:	490d      	ldr	r1, [pc, #52]	@ (8000be0 <TIM4_IRQHandler+0x80>)
 8000baa:	480e      	ldr	r0, [pc, #56]	@ (8000be4 <TIM4_IRQHandler+0x84>)
 8000bac:	f000 ffb0 	bl	8001b10 <HAL_I2S_Transmit>

  if (i + 1 < size) {
 8000bb0:	4b09      	ldr	r3, [pc, #36]	@ (8000bd8 <TIM4_IRQHandler+0x78>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	4a0c      	ldr	r2, [pc, #48]	@ (8000be8 <TIM4_IRQHandler+0x88>)
 8000bb8:	8812      	ldrh	r2, [r2, #0]
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d205      	bcs.n	8000bca <TIM4_IRQHandler+0x6a>
	  ++i;
 8000bbe:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <TIM4_IRQHandler+0x78>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	4a04      	ldr	r2, [pc, #16]	@ (8000bd8 <TIM4_IRQHandler+0x78>)
 8000bc6:	6013      	str	r3, [r2, #0]
  else {
	  i = 0;
  }

  /* USER CODE END TIM4_IRQn 1 */
}
 8000bc8:	e002      	b.n	8000bd0 <TIM4_IRQHandler+0x70>
	  i = 0;
 8000bca:	4b03      	ldr	r3, [pc, #12]	@ (8000bd8 <TIM4_IRQHandler+0x78>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	2000e348 	.word	0x2000e348
 8000bd8:	2000e3d8 	.word	0x2000e3d8
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	2000e3dc 	.word	0x2000e3dc
 8000be4:	2000e2a0 	.word	0x2000e2a0
 8000be8:	2000e274 	.word	0x2000e274

08000bec <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8000bf0:	4802      	ldr	r0, [pc, #8]	@ (8000bfc <SPI2_IRQHandler+0x10>)
 8000bf2:	f001 f87a 	bl	8001cea <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */
  /* USER CODE END SPI2_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	2000e2a0 	.word	0x2000e2a0

08000c00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c04:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <SystemInit+0x20>)
 8000c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c0a:	4a05      	ldr	r2, [pc, #20]	@ (8000c20 <SystemInit+0x20>)
 8000c0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c28:	f7ff ffea 	bl	8000c00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c2c:	480c      	ldr	r0, [pc, #48]	@ (8000c60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c2e:	490d      	ldr	r1, [pc, #52]	@ (8000c64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c30:	4a0d      	ldr	r2, [pc, #52]	@ (8000c68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c34:	e002      	b.n	8000c3c <LoopCopyDataInit>

08000c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3a:	3304      	adds	r3, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c40:	d3f9      	bcc.n	8000c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c42:	4a0a      	ldr	r2, [pc, #40]	@ (8000c6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c44:	4c0a      	ldr	r4, [pc, #40]	@ (8000c70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c48:	e001      	b.n	8000c4e <LoopFillZerobss>

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c4c:	3204      	adds	r2, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000c52:	f003 f8e5 	bl	8003e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c56:	f7ff fc35 	bl	80004c4 <main>
  bx  lr    
 8000c5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c5c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c64:	2000e284 	.word	0x2000e284
  ldr r2, =_sidata
 8000c68:	08003eb0 	.word	0x08003eb0
  ldr r2, =_sbss
 8000c6c:	2000e284 	.word	0x2000e284
  ldr r4, =_ebss
 8000c70:	2000e3e4 	.word	0x2000e3e4

08000c74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c74:	e7fe      	b.n	8000c74 <ADC_IRQHandler>
	...

08000c78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <HAL_Init+0x40>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb8 <HAL_Init+0x40>)
 8000c82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c88:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb8 <HAL_Init+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb8 <HAL_Init+0x40>)
 8000c8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c94:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <HAL_Init+0x40>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a07      	ldr	r2, [pc, #28]	@ (8000cb8 <HAL_Init+0x40>)
 8000c9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca0:	2003      	movs	r0, #3
 8000ca2:	f000 f92b 	bl	8000efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f000 f808 	bl	8000cbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cac:	f7ff fdca 	bl	8000844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40023c00 	.word	0x40023c00

08000cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc4:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <HAL_InitTick+0x54>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4b12      	ldr	r3, [pc, #72]	@ (8000d14 <HAL_InitTick+0x58>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 f943 	bl	8000f66 <HAL_SYSTICK_Config>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e00e      	b.n	8000d08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b0f      	cmp	r3, #15
 8000cee:	d80a      	bhi.n	8000d06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf8:	f000 f90b 	bl	8000f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cfc:	4a06      	ldr	r2, [pc, #24]	@ (8000d18 <HAL_InitTick+0x5c>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d02:	2300      	movs	r3, #0
 8000d04:	e000      	b.n	8000d08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	2000e278 	.word	0x2000e278
 8000d14:	2000e280 	.word	0x2000e280
 8000d18:	2000e27c 	.word	0x2000e27c

08000d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d20:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <HAL_IncTick+0x20>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <HAL_IncTick+0x24>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	4a04      	ldr	r2, [pc, #16]	@ (8000d40 <HAL_IncTick+0x24>)
 8000d2e:	6013      	str	r3, [r2, #0]
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	2000e280 	.word	0x2000e280
 8000d40:	2000e3e0 	.word	0x2000e3e0

08000d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return uwTick;
 8000d48:	4b03      	ldr	r3, [pc, #12]	@ (8000d58 <HAL_GetTick+0x14>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	2000e3e0 	.word	0x2000e3e0

08000d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8e:	4a04      	ldr	r2, [pc, #16]	@ (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	60d3      	str	r3, [r2, #12]
}
 8000d94:	bf00      	nop
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da8:	4b04      	ldr	r3, [pc, #16]	@ (8000dbc <__NVIC_GetPriorityGrouping+0x18>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	0a1b      	lsrs	r3, r3, #8
 8000dae:	f003 0307 	and.w	r3, r3, #7
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	db0b      	blt.n	8000dea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	f003 021f 	and.w	r2, r3, #31
 8000dd8:	4907      	ldr	r1, [pc, #28]	@ (8000df8 <__NVIC_EnableIRQ+0x38>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	095b      	lsrs	r3, r3, #5
 8000de0:	2001      	movs	r0, #1
 8000de2:	fa00 f202 	lsl.w	r2, r0, r2
 8000de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000e100 	.word	0xe000e100

08000dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	db0a      	blt.n	8000e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	490c      	ldr	r1, [pc, #48]	@ (8000e48 <__NVIC_SetPriority+0x4c>)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	0112      	lsls	r2, r2, #4
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	440b      	add	r3, r1
 8000e20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e24:	e00a      	b.n	8000e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4908      	ldr	r1, [pc, #32]	@ (8000e4c <__NVIC_SetPriority+0x50>)
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	f003 030f 	and.w	r3, r3, #15
 8000e32:	3b04      	subs	r3, #4
 8000e34:	0112      	lsls	r2, r2, #4
 8000e36:	b2d2      	uxtb	r2, r2
 8000e38:	440b      	add	r3, r1
 8000e3a:	761a      	strb	r2, [r3, #24]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000e100 	.word	0xe000e100
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b089      	sub	sp, #36	@ 0x24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	f1c3 0307 	rsb	r3, r3, #7
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	bf28      	it	cs
 8000e6e:	2304      	movcs	r3, #4
 8000e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3304      	adds	r3, #4
 8000e76:	2b06      	cmp	r3, #6
 8000e78:	d902      	bls.n	8000e80 <NVIC_EncodePriority+0x30>
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3b03      	subs	r3, #3
 8000e7e:	e000      	b.n	8000e82 <NVIC_EncodePriority+0x32>
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	f04f 32ff 	mov.w	r2, #4294967295
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	401a      	ands	r2, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e98:	f04f 31ff 	mov.w	r1, #4294967295
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea2:	43d9      	mvns	r1, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	4313      	orrs	r3, r2
         );
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3724      	adds	r7, #36	@ 0x24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ec8:	d301      	bcc.n	8000ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00f      	b.n	8000eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ece:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef8 <SysTick_Config+0x40>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed6:	210f      	movs	r1, #15
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f7ff ff8e 	bl	8000dfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee0:	4b05      	ldr	r3, [pc, #20]	@ (8000ef8 <SysTick_Config+0x40>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee6:	4b04      	ldr	r3, [pc, #16]	@ (8000ef8 <SysTick_Config+0x40>)
 8000ee8:	2207      	movs	r2, #7
 8000eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	e000e010 	.word	0xe000e010

08000efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff29 	bl	8000d5c <__NVIC_SetPriorityGrouping>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f24:	f7ff ff3e 	bl	8000da4 <__NVIC_GetPriorityGrouping>
 8000f28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	68b9      	ldr	r1, [r7, #8]
 8000f2e:	6978      	ldr	r0, [r7, #20]
 8000f30:	f7ff ff8e 	bl	8000e50 <NVIC_EncodePriority>
 8000f34:	4602      	mov	r2, r0
 8000f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff5d 	bl	8000dfc <__NVIC_SetPriority>
}
 8000f42:	bf00      	nop
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	4603      	mov	r3, r0
 8000f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff31 	bl	8000dc0 <__NVIC_EnableIRQ>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ffa2 	bl	8000eb8 <SysTick_Config>
 8000f74:	4603      	mov	r3, r0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f8c:	f7ff feda 	bl	8000d44 <HAL_GetTick>
 8000f90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d101      	bne.n	8000f9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e099      	b.n	80010d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f022 0201 	bic.w	r2, r2, #1
 8000fba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fbc:	e00f      	b.n	8000fde <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fbe:	f7ff fec1 	bl	8000d44 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	2b05      	cmp	r3, #5
 8000fca:	d908      	bls.n	8000fde <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2220      	movs	r2, #32
 8000fd0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e078      	b.n	80010d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1e8      	bne.n	8000fbe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ff4:	697a      	ldr	r2, [r7, #20]
 8000ff6:	4b38      	ldr	r3, [pc, #224]	@ (80010d8 <HAL_DMA_Init+0x158>)
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685a      	ldr	r2, [r3, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800100a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001016:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001022:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6a1b      	ldr	r3, [r3, #32]
 8001028:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800102a:	697a      	ldr	r2, [r7, #20]
 800102c:	4313      	orrs	r3, r2
 800102e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001034:	2b04      	cmp	r3, #4
 8001036:	d107      	bne.n	8001048 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001040:	4313      	orrs	r3, r2
 8001042:	697a      	ldr	r2, [r7, #20]
 8001044:	4313      	orrs	r3, r2
 8001046:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	697a      	ldr	r2, [r7, #20]
 800104e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	f023 0307 	bic.w	r3, r3, #7
 800105e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	4313      	orrs	r3, r2
 8001068:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800106e:	2b04      	cmp	r3, #4
 8001070:	d117      	bne.n	80010a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	4313      	orrs	r3, r2
 800107a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001080:	2b00      	cmp	r3, #0
 8001082:	d00e      	beq.n	80010a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f9e9 	bl	800145c <DMA_CheckFifoParam>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d008      	beq.n	80010a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2240      	movs	r2, #64	@ 0x40
 8001094:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2201      	movs	r2, #1
 800109a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800109e:	2301      	movs	r3, #1
 80010a0:	e016      	b.n	80010d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f000 f9a0 	bl	80013f0 <DMA_CalcBaseAndBitshift>
 80010b0:	4603      	mov	r3, r0
 80010b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010b8:	223f      	movs	r2, #63	@ 0x3f
 80010ba:	409a      	lsls	r2, r3
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2201      	movs	r2, #1
 80010ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80010ce:	2300      	movs	r3, #0
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	f010803f 	.word	0xf010803f

080010dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80010e8:	4b8e      	ldr	r3, [pc, #568]	@ (8001324 <HAL_DMA_IRQHandler+0x248>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a8e      	ldr	r2, [pc, #568]	@ (8001328 <HAL_DMA_IRQHandler+0x24c>)
 80010ee:	fba2 2303 	umull	r2, r3, r2, r3
 80010f2:	0a9b      	lsrs	r3, r3, #10
 80010f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001106:	2208      	movs	r2, #8
 8001108:	409a      	lsls	r2, r3
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	4013      	ands	r3, r2
 800110e:	2b00      	cmp	r3, #0
 8001110:	d01a      	beq.n	8001148 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	2b00      	cmp	r3, #0
 800111e:	d013      	beq.n	8001148 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f022 0204 	bic.w	r2, r2, #4
 800112e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001134:	2208      	movs	r2, #8
 8001136:	409a      	lsls	r2, r3
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001140:	f043 0201 	orr.w	r2, r3, #1
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800114c:	2201      	movs	r2, #1
 800114e:	409a      	lsls	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4013      	ands	r3, r2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d012      	beq.n	800117e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001162:	2b00      	cmp	r3, #0
 8001164:	d00b      	beq.n	800117e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800116a:	2201      	movs	r2, #1
 800116c:	409a      	lsls	r2, r3
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001176:	f043 0202 	orr.w	r2, r3, #2
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001182:	2204      	movs	r2, #4
 8001184:	409a      	lsls	r2, r3
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4013      	ands	r3, r2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d012      	beq.n	80011b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d00b      	beq.n	80011b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011a0:	2204      	movs	r2, #4
 80011a2:	409a      	lsls	r2, r3
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011ac:	f043 0204 	orr.w	r2, r3, #4
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011b8:	2210      	movs	r2, #16
 80011ba:	409a      	lsls	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4013      	ands	r3, r2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d043      	beq.n	800124c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0308 	and.w	r3, r3, #8
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d03c      	beq.n	800124c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011d6:	2210      	movs	r2, #16
 80011d8:	409a      	lsls	r2, r3
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d018      	beq.n	800121e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d108      	bne.n	800120c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d024      	beq.n	800124c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	4798      	blx	r3
 800120a:	e01f      	b.n	800124c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001210:	2b00      	cmp	r3, #0
 8001212:	d01b      	beq.n	800124c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	4798      	blx	r3
 800121c:	e016      	b.n	800124c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001228:	2b00      	cmp	r3, #0
 800122a:	d107      	bne.n	800123c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 0208 	bic.w	r2, r2, #8
 800123a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001250:	2220      	movs	r2, #32
 8001252:	409a      	lsls	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4013      	ands	r3, r2
 8001258:	2b00      	cmp	r3, #0
 800125a:	f000 808f 	beq.w	800137c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0310 	and.w	r3, r3, #16
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 8087 	beq.w	800137c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001272:	2220      	movs	r2, #32
 8001274:	409a      	lsls	r2, r3
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b05      	cmp	r3, #5
 8001284:	d136      	bne.n	80012f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f022 0216 	bic.w	r2, r2, #22
 8001294:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	695a      	ldr	r2, [r3, #20]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d103      	bne.n	80012b6 <HAL_DMA_IRQHandler+0x1da>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d007      	beq.n	80012c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f022 0208 	bic.w	r2, r2, #8
 80012c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012ca:	223f      	movs	r2, #63	@ 0x3f
 80012cc:	409a      	lsls	r2, r3
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d07e      	beq.n	80013e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	4798      	blx	r3
        }
        return;
 80012f2:	e079      	b.n	80013e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d01d      	beq.n	800133e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d10d      	bne.n	800132c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001314:	2b00      	cmp	r3, #0
 8001316:	d031      	beq.n	800137c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	4798      	blx	r3
 8001320:	e02c      	b.n	800137c <HAL_DMA_IRQHandler+0x2a0>
 8001322:	bf00      	nop
 8001324:	2000e278 	.word	0x2000e278
 8001328:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001330:	2b00      	cmp	r3, #0
 8001332:	d023      	beq.n	800137c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	4798      	blx	r3
 800133c:	e01e      	b.n	800137c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001348:	2b00      	cmp	r3, #0
 800134a:	d10f      	bne.n	800136c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 0210 	bic.w	r2, r2, #16
 800135a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2201      	movs	r2, #1
 8001360:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001380:	2b00      	cmp	r3, #0
 8001382:	d032      	beq.n	80013ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	2b00      	cmp	r3, #0
 800138e:	d022      	beq.n	80013d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2205      	movs	r2, #5
 8001394:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 0201 	bic.w	r2, r2, #1
 80013a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	3301      	adds	r3, #1
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d307      	bcc.n	80013c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f2      	bne.n	80013a8 <HAL_DMA_IRQHandler+0x2cc>
 80013c2:	e000      	b.n	80013c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80013c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2201      	movs	r2, #1
 80013ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d005      	beq.n	80013ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	4798      	blx	r3
 80013e6:	e000      	b.n	80013ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80013e8:	bf00      	nop
    }
  }
}
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	3b10      	subs	r3, #16
 8001400:	4a14      	ldr	r2, [pc, #80]	@ (8001454 <DMA_CalcBaseAndBitshift+0x64>)
 8001402:	fba2 2303 	umull	r2, r3, r2, r3
 8001406:	091b      	lsrs	r3, r3, #4
 8001408:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800140a:	4a13      	ldr	r2, [pc, #76]	@ (8001458 <DMA_CalcBaseAndBitshift+0x68>)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4413      	add	r3, r2
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	461a      	mov	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2b03      	cmp	r3, #3
 800141c:	d909      	bls.n	8001432 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001426:	f023 0303 	bic.w	r3, r3, #3
 800142a:	1d1a      	adds	r2, r3, #4
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001430:	e007      	b.n	8001442 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800143a:	f023 0303 	bic.w	r3, r3, #3
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001446:	4618      	mov	r0, r3
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	aaaaaaab 	.word	0xaaaaaaab
 8001458:	08003e98 	.word	0x08003e98

0800145c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001464:	2300      	movs	r3, #0
 8001466:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800146c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d11f      	bne.n	80014b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	2b03      	cmp	r3, #3
 800147a:	d856      	bhi.n	800152a <DMA_CheckFifoParam+0xce>
 800147c:	a201      	add	r2, pc, #4	@ (adr r2, 8001484 <DMA_CheckFifoParam+0x28>)
 800147e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001482:	bf00      	nop
 8001484:	08001495 	.word	0x08001495
 8001488:	080014a7 	.word	0x080014a7
 800148c:	08001495 	.word	0x08001495
 8001490:	0800152b 	.word	0x0800152b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001498:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d046      	beq.n	800152e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014a4:	e043      	b.n	800152e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014aa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80014ae:	d140      	bne.n	8001532 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014b4:	e03d      	b.n	8001532 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80014be:	d121      	bne.n	8001504 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	2b03      	cmp	r3, #3
 80014c4:	d837      	bhi.n	8001536 <DMA_CheckFifoParam+0xda>
 80014c6:	a201      	add	r2, pc, #4	@ (adr r2, 80014cc <DMA_CheckFifoParam+0x70>)
 80014c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014cc:	080014dd 	.word	0x080014dd
 80014d0:	080014e3 	.word	0x080014e3
 80014d4:	080014dd 	.word	0x080014dd
 80014d8:	080014f5 	.word	0x080014f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	73fb      	strb	r3, [r7, #15]
      break;
 80014e0:	e030      	b.n	8001544 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d025      	beq.n	800153a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014f2:	e022      	b.n	800153a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014f8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80014fc:	d11f      	bne.n	800153e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001502:	e01c      	b.n	800153e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	2b02      	cmp	r3, #2
 8001508:	d903      	bls.n	8001512 <DMA_CheckFifoParam+0xb6>
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	2b03      	cmp	r3, #3
 800150e:	d003      	beq.n	8001518 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001510:	e018      	b.n	8001544 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	73fb      	strb	r3, [r7, #15]
      break;
 8001516:	e015      	b.n	8001544 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800151c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d00e      	beq.n	8001542 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	73fb      	strb	r3, [r7, #15]
      break;
 8001528:	e00b      	b.n	8001542 <DMA_CheckFifoParam+0xe6>
      break;
 800152a:	bf00      	nop
 800152c:	e00a      	b.n	8001544 <DMA_CheckFifoParam+0xe8>
      break;
 800152e:	bf00      	nop
 8001530:	e008      	b.n	8001544 <DMA_CheckFifoParam+0xe8>
      break;
 8001532:	bf00      	nop
 8001534:	e006      	b.n	8001544 <DMA_CheckFifoParam+0xe8>
      break;
 8001536:	bf00      	nop
 8001538:	e004      	b.n	8001544 <DMA_CheckFifoParam+0xe8>
      break;
 800153a:	bf00      	nop
 800153c:	e002      	b.n	8001544 <DMA_CheckFifoParam+0xe8>
      break;   
 800153e:	bf00      	nop
 8001540:	e000      	b.n	8001544 <DMA_CheckFifoParam+0xe8>
      break;
 8001542:	bf00      	nop
    }
  } 
  
  return status; 
 8001544:	7bfb      	ldrb	r3, [r7, #15]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop

08001554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001554:	b480      	push	{r7}
 8001556:	b089      	sub	sp, #36	@ 0x24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001566:	2300      	movs	r3, #0
 8001568:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
 800156e:	e159      	b.n	8001824 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001570:	2201      	movs	r2, #1
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	4013      	ands	r3, r2
 8001582:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	429a      	cmp	r2, r3
 800158a:	f040 8148 	bne.w	800181e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f003 0303 	and.w	r3, r3, #3
 8001596:	2b01      	cmp	r3, #1
 8001598:	d005      	beq.n	80015a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d130      	bne.n	8001608 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	2203      	movs	r2, #3
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4013      	ands	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	68da      	ldr	r2, [r3, #12]
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015dc:	2201      	movs	r2, #1
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	091b      	lsrs	r3, r3, #4
 80015f2:	f003 0201 	and.w	r2, r3, #1
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 0303 	and.w	r3, r3, #3
 8001610:	2b03      	cmp	r3, #3
 8001612:	d017      	beq.n	8001644 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	2203      	movs	r2, #3
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4013      	ands	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 0303 	and.w	r3, r3, #3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d123      	bne.n	8001698 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	08da      	lsrs	r2, r3, #3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3208      	adds	r2, #8
 8001658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800165c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	f003 0307 	and.w	r3, r3, #7
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	220f      	movs	r2, #15
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	691a      	ldr	r2, [r3, #16]
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4313      	orrs	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	08da      	lsrs	r2, r3, #3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	3208      	adds	r2, #8
 8001692:	69b9      	ldr	r1, [r7, #24]
 8001694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	2203      	movs	r2, #3
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 0203 	and.w	r2, r3, #3
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 80a2 	beq.w	800181e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	4b57      	ldr	r3, [pc, #348]	@ (800183c <HAL_GPIO_Init+0x2e8>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e2:	4a56      	ldr	r2, [pc, #344]	@ (800183c <HAL_GPIO_Init+0x2e8>)
 80016e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ea:	4b54      	ldr	r3, [pc, #336]	@ (800183c <HAL_GPIO_Init+0x2e8>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016f6:	4a52      	ldr	r2, [pc, #328]	@ (8001840 <HAL_GPIO_Init+0x2ec>)
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	089b      	lsrs	r3, r3, #2
 80016fc:	3302      	adds	r3, #2
 80016fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001702:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	220f      	movs	r2, #15
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4013      	ands	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a49      	ldr	r2, [pc, #292]	@ (8001844 <HAL_GPIO_Init+0x2f0>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d019      	beq.n	8001756 <HAL_GPIO_Init+0x202>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a48      	ldr	r2, [pc, #288]	@ (8001848 <HAL_GPIO_Init+0x2f4>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d013      	beq.n	8001752 <HAL_GPIO_Init+0x1fe>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a47      	ldr	r2, [pc, #284]	@ (800184c <HAL_GPIO_Init+0x2f8>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d00d      	beq.n	800174e <HAL_GPIO_Init+0x1fa>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a46      	ldr	r2, [pc, #280]	@ (8001850 <HAL_GPIO_Init+0x2fc>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d007      	beq.n	800174a <HAL_GPIO_Init+0x1f6>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a45      	ldr	r2, [pc, #276]	@ (8001854 <HAL_GPIO_Init+0x300>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d101      	bne.n	8001746 <HAL_GPIO_Init+0x1f2>
 8001742:	2304      	movs	r3, #4
 8001744:	e008      	b.n	8001758 <HAL_GPIO_Init+0x204>
 8001746:	2307      	movs	r3, #7
 8001748:	e006      	b.n	8001758 <HAL_GPIO_Init+0x204>
 800174a:	2303      	movs	r3, #3
 800174c:	e004      	b.n	8001758 <HAL_GPIO_Init+0x204>
 800174e:	2302      	movs	r3, #2
 8001750:	e002      	b.n	8001758 <HAL_GPIO_Init+0x204>
 8001752:	2301      	movs	r3, #1
 8001754:	e000      	b.n	8001758 <HAL_GPIO_Init+0x204>
 8001756:	2300      	movs	r3, #0
 8001758:	69fa      	ldr	r2, [r7, #28]
 800175a:	f002 0203 	and.w	r2, r2, #3
 800175e:	0092      	lsls	r2, r2, #2
 8001760:	4093      	lsls	r3, r2
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001768:	4935      	ldr	r1, [pc, #212]	@ (8001840 <HAL_GPIO_Init+0x2ec>)
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	089b      	lsrs	r3, r3, #2
 800176e:	3302      	adds	r3, #2
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001776:	4b38      	ldr	r3, [pc, #224]	@ (8001858 <HAL_GPIO_Init+0x304>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	43db      	mvns	r3, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4013      	ands	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d003      	beq.n	800179a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	4313      	orrs	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800179a:	4a2f      	ldr	r2, [pc, #188]	@ (8001858 <HAL_GPIO_Init+0x304>)
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001858 <HAL_GPIO_Init+0x304>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017c4:	4a24      	ldr	r2, [pc, #144]	@ (8001858 <HAL_GPIO_Init+0x304>)
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017ca:	4b23      	ldr	r3, [pc, #140]	@ (8001858 <HAL_GPIO_Init+0x304>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	43db      	mvns	r3, r3
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	4013      	ands	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d003      	beq.n	80017ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017ee:	4a1a      	ldr	r2, [pc, #104]	@ (8001858 <HAL_GPIO_Init+0x304>)
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017f4:	4b18      	ldr	r3, [pc, #96]	@ (8001858 <HAL_GPIO_Init+0x304>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	43db      	mvns	r3, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d003      	beq.n	8001818 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	4313      	orrs	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001818:	4a0f      	ldr	r2, [pc, #60]	@ (8001858 <HAL_GPIO_Init+0x304>)
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3301      	adds	r3, #1
 8001822:	61fb      	str	r3, [r7, #28]
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	2b0f      	cmp	r3, #15
 8001828:	f67f aea2 	bls.w	8001570 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800182c:	bf00      	nop
 800182e:	bf00      	nop
 8001830:	3724      	adds	r7, #36	@ 0x24
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800
 8001840:	40013800 	.word	0x40013800
 8001844:	40020000 	.word	0x40020000
 8001848:	40020400 	.word	0x40020400
 800184c:	40020800 	.word	0x40020800
 8001850:	40020c00 	.word	0x40020c00
 8001854:	40021000 	.word	0x40021000
 8001858:	40013c00 	.word	0x40013c00

0800185c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	807b      	strh	r3, [r7, #2]
 8001868:	4613      	mov	r3, r2
 800186a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800186c:	787b      	ldrb	r3, [r7, #1]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001872:	887a      	ldrh	r2, [r7, #2]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001878:	e003      	b.n	8001882 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800187a:	887b      	ldrh	r3, [r7, #2]
 800187c:	041a      	lsls	r2, r3, #16
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	619a      	str	r2, [r3, #24]
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e128      	b.n	8001af4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d109      	bne.n	80018c2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a90      	ldr	r2, [pc, #576]	@ (8001afc <HAL_I2S_Init+0x26c>)
 80018ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7fe ffe9 	bl	8000894 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2202      	movs	r2, #2
 80018c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	69db      	ldr	r3, [r3, #28]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6812      	ldr	r2, [r2, #0]
 80018d4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80018d8:	f023 030f 	bic.w	r3, r3, #15
 80018dc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2202      	movs	r2, #2
 80018e4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d060      	beq.n	80019b0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d102      	bne.n	80018fc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80018f6:	2310      	movs	r3, #16
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	e001      	b.n	8001900 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80018fc:	2320      	movs	r3, #32
 80018fe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	2b20      	cmp	r3, #32
 8001906:	d802      	bhi.n	800190e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800190e:	2001      	movs	r0, #1
 8001910:	f001 fb16 	bl	8002f40 <HAL_RCCEx_GetPeriphCLKFreq>
 8001914:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800191e:	d125      	bne.n	800196c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d010      	beq.n	800194a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001932:	4613      	mov	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4413      	add	r3, r2
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	461a      	mov	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	fbb2 f3f3 	udiv	r3, r2, r3
 8001944:	3305      	adds	r3, #5
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	e01f      	b.n	800198a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	fbb2 f2f3 	udiv	r2, r2, r3
 8001954:	4613      	mov	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	461a      	mov	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	fbb2 f3f3 	udiv	r3, r2, r3
 8001966:	3305      	adds	r3, #5
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	e00e      	b.n	800198a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	fbb2 f2f3 	udiv	r2, r2, r3
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	461a      	mov	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	fbb2 f3f3 	udiv	r3, r2, r3
 8001986:	3305      	adds	r3, #5
 8001988:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	4a5c      	ldr	r2, [pc, #368]	@ (8001b00 <HAL_I2S_Init+0x270>)
 800198e:	fba2 2303 	umull	r2, r3, r2, r3
 8001992:	08db      	lsrs	r3, r3, #3
 8001994:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	085b      	lsrs	r3, r3, #1
 80019a6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	021b      	lsls	r3, r3, #8
 80019ac:	61bb      	str	r3, [r7, #24]
 80019ae:	e003      	b.n	80019b8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80019b0:	2302      	movs	r3, #2
 80019b2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d902      	bls.n	80019c4 <HAL_I2S_Init+0x134>
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	2bff      	cmp	r3, #255	@ 0xff
 80019c2:	d907      	bls.n	80019d4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c8:	f043 0210 	orr.w	r2, r3, #16
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e08f      	b.n	8001af4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691a      	ldr	r2, [r3, #16]
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	ea42 0103 	orr.w	r1, r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	69fa      	ldr	r2, [r7, #28]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80019f2:	f023 030f 	bic.w	r3, r3, #15
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	6851      	ldr	r1, [r2, #4]
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6892      	ldr	r2, [r2, #8]
 80019fe:	4311      	orrs	r1, r2
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	68d2      	ldr	r2, [r2, #12]
 8001a04:	4311      	orrs	r1, r2
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	6992      	ldr	r2, [r2, #24]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a16:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d161      	bne.n	8001ae4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a38      	ldr	r2, [pc, #224]	@ (8001b04 <HAL_I2S_Init+0x274>)
 8001a24:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a37      	ldr	r2, [pc, #220]	@ (8001b08 <HAL_I2S_Init+0x278>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d101      	bne.n	8001a34 <HAL_I2S_Init+0x1a4>
 8001a30:	4b36      	ldr	r3, [pc, #216]	@ (8001b0c <HAL_I2S_Init+0x27c>)
 8001a32:	e001      	b.n	8001a38 <HAL_I2S_Init+0x1a8>
 8001a34:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6812      	ldr	r2, [r2, #0]
 8001a3e:	4932      	ldr	r1, [pc, #200]	@ (8001b08 <HAL_I2S_Init+0x278>)
 8001a40:	428a      	cmp	r2, r1
 8001a42:	d101      	bne.n	8001a48 <HAL_I2S_Init+0x1b8>
 8001a44:	4a31      	ldr	r2, [pc, #196]	@ (8001b0c <HAL_I2S_Init+0x27c>)
 8001a46:	e001      	b.n	8001a4c <HAL_I2S_Init+0x1bc>
 8001a48:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001a4c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001a50:	f023 030f 	bic.w	r3, r3, #15
 8001a54:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a2b      	ldr	r2, [pc, #172]	@ (8001b08 <HAL_I2S_Init+0x278>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d101      	bne.n	8001a64 <HAL_I2S_Init+0x1d4>
 8001a60:	4b2a      	ldr	r3, [pc, #168]	@ (8001b0c <HAL_I2S_Init+0x27c>)
 8001a62:	e001      	b.n	8001a68 <HAL_I2S_Init+0x1d8>
 8001a64:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001a68:	2202      	movs	r2, #2
 8001a6a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a25      	ldr	r2, [pc, #148]	@ (8001b08 <HAL_I2S_Init+0x278>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d101      	bne.n	8001a7a <HAL_I2S_Init+0x1ea>
 8001a76:	4b25      	ldr	r3, [pc, #148]	@ (8001b0c <HAL_I2S_Init+0x27c>)
 8001a78:	e001      	b.n	8001a7e <HAL_I2S_Init+0x1ee>
 8001a7a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001a7e:	69db      	ldr	r3, [r3, #28]
 8001a80:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a8a:	d003      	beq.n	8001a94 <HAL_I2S_Init+0x204>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d103      	bne.n	8001a9c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001a94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	e001      	b.n	8001aa0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	897b      	ldrh	r3, [r7, #10]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001acc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a0d      	ldr	r2, [pc, #52]	@ (8001b08 <HAL_I2S_Init+0x278>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d101      	bne.n	8001adc <HAL_I2S_Init+0x24c>
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b0c <HAL_I2S_Init+0x27c>)
 8001ada:	e001      	b.n	8001ae0 <HAL_I2S_Init+0x250>
 8001adc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001ae0:	897a      	ldrh	r2, [r7, #10]
 8001ae2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3720      	adds	r7, #32
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	08001df9 	.word	0x08001df9
 8001b00:	cccccccd 	.word	0xcccccccd
 8001b04:	08001f81 	.word	0x08001f81
 8001b08:	40003800 	.word	0x40003800
 8001b0c:	40003400 	.word	0x40003400

08001b10 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	603b      	str	r3, [r7, #0]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d002      	beq.n	8001b2c <HAL_I2S_Transmit+0x1c>
 8001b26:	88fb      	ldrh	r3, [r7, #6]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <HAL_I2S_Transmit+0x20>
  {
    return  HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e0d8      	b.n	8001ce2 <HAL_I2S_Transmit+0x1d2>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d001      	beq.n	8001b40 <HAL_I2S_Transmit+0x30>
  {
    return HAL_BUSY;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	e0d0      	b.n	8001ce2 <HAL_I2S_Transmit+0x1d2>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <HAL_I2S_Transmit+0x40>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	e0c8      	b.n	8001ce2 <HAL_I2S_Transmit+0x1d2>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pTxBuffPtr = pData;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	2b03      	cmp	r3, #3
 8001b7c:	d002      	beq.n	8001b84 <HAL_I2S_Transmit+0x74>
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	2b05      	cmp	r3, #5
 8001b82:	d10a      	bne.n	8001b9a <HAL_I2S_Transmit+0x8a>
  {
    hi2s->TxXferSize = (Size << 1U);
 8001b84:	88fb      	ldrh	r3, [r7, #6]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = (Size << 1U);
 8001b8e:	88fb      	ldrh	r3, [r7, #6]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001b98:	e005      	b.n	8001ba6 <HAL_I2S_Transmit+0x96>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	88fa      	ldrh	r2, [r7, #6]
 8001b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->TxXferCount = Size;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	88fa      	ldrh	r2, [r7, #6]
 8001ba4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	69db      	ldr	r3, [r3, #28]
 8001bac:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bbc:	d007      	beq.n	8001bce <HAL_I2S_Transmit+0xbe>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	69da      	ldr	r2, [r3, #28]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001bcc:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	2102      	movs	r1, #2
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f000 f999 	bl	8001f0c <I2S_WaitFlagStateUntilTimeout>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d04e      	beq.n	8001c7e <HAL_I2S_Transmit+0x16e>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be4:	f043 0201 	orr.w	r2, r3, #1
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2s);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e070      	b.n	8001ce2 <HAL_I2S_Transmit+0x1d2>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c04:	881a      	ldrh	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c10:	1c9a      	adds	r2, r3, #2
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2s->TxXferCount--;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	2201      	movs	r2, #1
 8001c28:	2102      	movs	r1, #2
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f000 f96e 	bl	8001f0c <I2S_WaitFlagStateUntilTimeout>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00f      	beq.n	8001c56 <HAL_I2S_Transmit+0x146>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3a:	f043 0201 	orr.w	r2, r3, #1
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      __HAL_UNLOCK(hi2s);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e045      	b.n	8001ce2 <HAL_I2S_Transmit+0x1d2>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 0308 	and.w	r3, r3, #8
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d10c      	bne.n	8001c7e <HAL_I2S_Transmit+0x16e>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001c64:	2300      	movs	r3, #0
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c76:	f043 0204 	orr.w	r2, r3, #4
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	645a      	str	r2, [r3, #68]	@ 0x44
  while (hi2s->TxXferCount > 0U)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1bb      	bne.n	8001c00 <HAL_I2S_Transmit+0xf0>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d005      	beq.n	8001c9e <HAL_I2S_Transmit+0x18e>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c9c:	d118      	bne.n	8001cd0 <HAL_I2S_Transmit+0x1c0>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2180      	movs	r1, #128	@ 0x80
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f000 f931 	bl	8001f0c <I2S_WaitFlagStateUntilTimeout>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00f      	beq.n	8001cd0 <HAL_I2S_Transmit+0x1c0>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb4:	f043 0201 	orr.w	r2, r3, #1
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      __HAL_UNLOCK(hi2s);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e008      	b.n	8001ce2 <HAL_I2S_Transmit+0x1d2>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  __HAL_UNLOCK(hi2s);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	4798      	blx	r3
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d4a:	881a      	ldrh	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d56:	1c9a      	adds	r2, r3, #2
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	3b01      	subs	r3, #1
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d10e      	bne.n	8001d92 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001d82:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff ffb8 	bl	8001d02 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dac:	b292      	uxth	r2, r2
 8001dae:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db4:	1c9a      	adds	r2, r3, #2
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10e      	bne.n	8001df0 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001de0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff ff93 	bl	8001d16 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001df0:	bf00      	nop
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d13a      	bne.n	8001e8a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d109      	bne.n	8001e32 <I2S_IRQHandler+0x3a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e28:	2b40      	cmp	r3, #64	@ 0x40
 8001e2a:	d102      	bne.n	8001e32 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff ffb4 	bl	8001d9a <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e38:	2b40      	cmp	r3, #64	@ 0x40
 8001e3a:	d126      	bne.n	8001e8a <I2S_IRQHandler+0x92>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 0320 	and.w	r3, r3, #32
 8001e46:	2b20      	cmp	r3, #32
 8001e48:	d11f      	bne.n	8001e8a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001e58:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7c:	f043 0202 	orr.w	r2, r3, #2
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff ff50 	bl	8001d2a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b03      	cmp	r3, #3
 8001e94:	d136      	bne.n	8001f04 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d109      	bne.n	8001eb4 <I2S_IRQHandler+0xbc>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eaa:	2b80      	cmp	r3, #128	@ 0x80
 8001eac:	d102      	bne.n	8001eb4 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff ff45 	bl	8001d3e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	2b08      	cmp	r3, #8
 8001ebc:	d122      	bne.n	8001f04 <I2S_IRQHandler+0x10c>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 0320 	and.w	r3, r3, #32
 8001ec8:	2b20      	cmp	r3, #32
 8001eca:	d11b      	bne.n	8001f04 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001eda:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef6:	f043 0204 	orr.w	r2, r3, #4
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff ff13 	bl	8001d2a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f04:	bf00      	nop
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	603b      	str	r3, [r7, #0]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f1c:	f7fe ff12 	bl	8000d44 <HAL_GetTick>
 8001f20:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8001f22:	e018      	b.n	8001f56 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f2a:	d014      	beq.n	8001f56 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8001f2c:	f7fe ff0a 	bl	8000d44 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d902      	bls.n	8001f42 <I2S_WaitFlagStateUntilTimeout+0x36>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d109      	bne.n	8001f56 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e00f      	b.n	8001f76 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	68ba      	ldr	r2, [r7, #8]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	bf0c      	ite	eq
 8001f66:	2301      	moveq	r3, #1
 8001f68:	2300      	movne	r3, #0
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d1d7      	bne.n	8001f24 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b088      	sub	sp, #32
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a92      	ldr	r2, [pc, #584]	@ (80021e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d101      	bne.n	8001f9e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001f9a:	4b92      	ldr	r3, [pc, #584]	@ (80021e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f9c:	e001      	b.n	8001fa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001f9e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a8b      	ldr	r2, [pc, #556]	@ (80021e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d101      	bne.n	8001fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001fb8:	4b8a      	ldr	r3, [pc, #552]	@ (80021e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001fba:	e001      	b.n	8001fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001fbc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fcc:	d004      	beq.n	8001fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f040 8099 	bne.w	800210a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d107      	bne.n	8001ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f925 	bl	800223c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d107      	bne.n	800200c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002002:	2b00      	cmp	r3, #0
 8002004:	d002      	beq.n	800200c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f9c8 	bl	800239c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002012:	2b40      	cmp	r3, #64	@ 0x40
 8002014:	d13a      	bne.n	800208c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	f003 0320 	and.w	r3, r3, #32
 800201c:	2b00      	cmp	r3, #0
 800201e:	d035      	beq.n	800208c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a6e      	ldr	r2, [pc, #440]	@ (80021e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d101      	bne.n	800202e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800202a:	4b6e      	ldr	r3, [pc, #440]	@ (80021e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800202c:	e001      	b.n	8002032 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800202e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4969      	ldr	r1, [pc, #420]	@ (80021e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800203a:	428b      	cmp	r3, r1
 800203c:	d101      	bne.n	8002042 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800203e:	4b69      	ldr	r3, [pc, #420]	@ (80021e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002040:	e001      	b.n	8002046 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002042:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002046:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800204a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800205a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800205c:	2300      	movs	r3, #0
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207e:	f043 0202 	orr.w	r2, r3, #2
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff fe4f 	bl	8001d2a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f003 0308 	and.w	r3, r3, #8
 8002092:	2b08      	cmp	r3, #8
 8002094:	f040 80c3 	bne.w	800221e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	f003 0320 	and.w	r3, r3, #32
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 80bd 	beq.w	800221e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80020b2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a49      	ldr	r2, [pc, #292]	@ (80021e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d101      	bne.n	80020c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80020be:	4b49      	ldr	r3, [pc, #292]	@ (80021e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020c0:	e001      	b.n	80020c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80020c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4944      	ldr	r1, [pc, #272]	@ (80021e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020ce:	428b      	cmp	r3, r1
 80020d0:	d101      	bne.n	80020d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80020d2:	4b44      	ldr	r3, [pc, #272]	@ (80021e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020d4:	e001      	b.n	80020da <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80020d6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80020da:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80020de:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80020e0:	2300      	movs	r3, #0
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	60bb      	str	r3, [r7, #8]
 80020ec:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fa:	f043 0204 	orr.w	r2, r3, #4
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff fe11 	bl	8001d2a <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002108:	e089      	b.n	800221e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b02      	cmp	r3, #2
 8002112:	d107      	bne.n	8002124 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800211a:	2b00      	cmp	r3, #0
 800211c:	d002      	beq.n	8002124 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f8be 	bl	80022a0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b01      	cmp	r3, #1
 800212c:	d107      	bne.n	800213e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002134:	2b00      	cmp	r3, #0
 8002136:	d002      	beq.n	800213e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 f8fd 	bl	8002338 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002144:	2b40      	cmp	r3, #64	@ 0x40
 8002146:	d12f      	bne.n	80021a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f003 0320 	and.w	r3, r3, #32
 800214e:	2b00      	cmp	r3, #0
 8002150:	d02a      	beq.n	80021a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002160:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a1e      	ldr	r2, [pc, #120]	@ (80021e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d101      	bne.n	8002170 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800216c:	4b1d      	ldr	r3, [pc, #116]	@ (80021e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800216e:	e001      	b.n	8002174 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002170:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4919      	ldr	r1, [pc, #100]	@ (80021e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800217c:	428b      	cmp	r3, r1
 800217e:	d101      	bne.n	8002184 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002180:	4b18      	ldr	r3, [pc, #96]	@ (80021e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002182:	e001      	b.n	8002188 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002184:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002188:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800218c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219a:	f043 0202 	orr.w	r2, r3, #2
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff fdc1 	bl	8001d2a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	f003 0308 	and.w	r3, r3, #8
 80021ae:	2b08      	cmp	r3, #8
 80021b0:	d136      	bne.n	8002220 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	f003 0320 	and.w	r3, r3, #32
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d031      	beq.n	8002220 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a07      	ldr	r2, [pc, #28]	@ (80021e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d101      	bne.n	80021ca <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80021c6:	4b07      	ldr	r3, [pc, #28]	@ (80021e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021c8:	e001      	b.n	80021ce <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80021ca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4902      	ldr	r1, [pc, #8]	@ (80021e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021d6:	428b      	cmp	r3, r1
 80021d8:	d106      	bne.n	80021e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80021da:	4b02      	ldr	r3, [pc, #8]	@ (80021e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021dc:	e006      	b.n	80021ec <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80021de:	bf00      	nop
 80021e0:	40003800 	.word	0x40003800
 80021e4:	40003400 	.word	0x40003400
 80021e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80021ec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80021f0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002200:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220e:	f043 0204 	orr.w	r2, r3, #4
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff fd87 	bl	8001d2a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800221c:	e000      	b.n	8002220 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800221e:	bf00      	nop
}
 8002220:	bf00      	nop
 8002222:	3720      	adds	r7, #32
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002248:	1c99      	adds	r1, r3, #2
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6251      	str	r1, [r2, #36]	@ 0x24
 800224e:	881a      	ldrh	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800225a:	b29b      	uxth	r3, r3
 800225c:	3b01      	subs	r3, #1
 800225e:	b29a      	uxth	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002268:	b29b      	uxth	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d113      	bne.n	8002296 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800227c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002282:	b29b      	uxth	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d106      	bne.n	8002296 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7ff ffc9 	bl	8002228 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ac:	1c99      	adds	r1, r3, #2
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6251      	str	r1, [r2, #36]	@ 0x24
 80022b2:	8819      	ldrh	r1, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002330 <I2SEx_TxISR_I2SExt+0x90>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d101      	bne.n	80022c2 <I2SEx_TxISR_I2SExt+0x22>
 80022be:	4b1d      	ldr	r3, [pc, #116]	@ (8002334 <I2SEx_TxISR_I2SExt+0x94>)
 80022c0:	e001      	b.n	80022c6 <I2SEx_TxISR_I2SExt+0x26>
 80022c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80022c6:	460a      	mov	r2, r1
 80022c8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	3b01      	subs	r3, #1
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022dc:	b29b      	uxth	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d121      	bne.n	8002326 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a12      	ldr	r2, [pc, #72]	@ (8002330 <I2SEx_TxISR_I2SExt+0x90>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d101      	bne.n	80022f0 <I2SEx_TxISR_I2SExt+0x50>
 80022ec:	4b11      	ldr	r3, [pc, #68]	@ (8002334 <I2SEx_TxISR_I2SExt+0x94>)
 80022ee:	e001      	b.n	80022f4 <I2SEx_TxISR_I2SExt+0x54>
 80022f0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	490d      	ldr	r1, [pc, #52]	@ (8002330 <I2SEx_TxISR_I2SExt+0x90>)
 80022fc:	428b      	cmp	r3, r1
 80022fe:	d101      	bne.n	8002304 <I2SEx_TxISR_I2SExt+0x64>
 8002300:	4b0c      	ldr	r3, [pc, #48]	@ (8002334 <I2SEx_TxISR_I2SExt+0x94>)
 8002302:	e001      	b.n	8002308 <I2SEx_TxISR_I2SExt+0x68>
 8002304:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002308:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800230c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002312:	b29b      	uxth	r3, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	d106      	bne.n	8002326 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7ff ff81 	bl	8002228 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40003800 	.word	0x40003800
 8002334:	40003400 	.word	0x40003400

08002338 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68d8      	ldr	r0, [r3, #12]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800234a:	1c99      	adds	r1, r3, #2
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002350:	b282      	uxth	r2, r0
 8002352:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002358:	b29b      	uxth	r3, r3
 800235a:	3b01      	subs	r3, #1
 800235c:	b29a      	uxth	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002366:	b29b      	uxth	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	d113      	bne.n	8002394 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800237a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002380:	b29b      	uxth	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d106      	bne.n	8002394 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff ff4a 	bl	8002228 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002394:	bf00      	nop
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a20      	ldr	r2, [pc, #128]	@ (800242c <I2SEx_RxISR_I2SExt+0x90>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d101      	bne.n	80023b2 <I2SEx_RxISR_I2SExt+0x16>
 80023ae:	4b20      	ldr	r3, [pc, #128]	@ (8002430 <I2SEx_RxISR_I2SExt+0x94>)
 80023b0:	e001      	b.n	80023b6 <I2SEx_RxISR_I2SExt+0x1a>
 80023b2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80023b6:	68d8      	ldr	r0, [r3, #12]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023bc:	1c99      	adds	r1, r3, #2
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80023c2:	b282      	uxth	r2, r0
 80023c4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	3b01      	subs	r3, #1
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80023d8:	b29b      	uxth	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d121      	bne.n	8002422 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a12      	ldr	r2, [pc, #72]	@ (800242c <I2SEx_RxISR_I2SExt+0x90>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d101      	bne.n	80023ec <I2SEx_RxISR_I2SExt+0x50>
 80023e8:	4b11      	ldr	r3, [pc, #68]	@ (8002430 <I2SEx_RxISR_I2SExt+0x94>)
 80023ea:	e001      	b.n	80023f0 <I2SEx_RxISR_I2SExt+0x54>
 80023ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	490d      	ldr	r1, [pc, #52]	@ (800242c <I2SEx_RxISR_I2SExt+0x90>)
 80023f8:	428b      	cmp	r3, r1
 80023fa:	d101      	bne.n	8002400 <I2SEx_RxISR_I2SExt+0x64>
 80023fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002430 <I2SEx_RxISR_I2SExt+0x94>)
 80023fe:	e001      	b.n	8002404 <I2SEx_RxISR_I2SExt+0x68>
 8002400:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002404:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002408:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800240e:	b29b      	uxth	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d106      	bne.n	8002422 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff ff03 	bl	8002228 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40003800 	.word	0x40003800
 8002430:	40003400 	.word	0x40003400

08002434 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e267      	b.n	8002916 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d075      	beq.n	800253e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002452:	4b88      	ldr	r3, [pc, #544]	@ (8002674 <HAL_RCC_OscConfig+0x240>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 030c 	and.w	r3, r3, #12
 800245a:	2b04      	cmp	r3, #4
 800245c:	d00c      	beq.n	8002478 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800245e:	4b85      	ldr	r3, [pc, #532]	@ (8002674 <HAL_RCC_OscConfig+0x240>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002466:	2b08      	cmp	r3, #8
 8002468:	d112      	bne.n	8002490 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800246a:	4b82      	ldr	r3, [pc, #520]	@ (8002674 <HAL_RCC_OscConfig+0x240>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002472:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002476:	d10b      	bne.n	8002490 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002478:	4b7e      	ldr	r3, [pc, #504]	@ (8002674 <HAL_RCC_OscConfig+0x240>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d05b      	beq.n	800253c <HAL_RCC_OscConfig+0x108>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d157      	bne.n	800253c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e242      	b.n	8002916 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002498:	d106      	bne.n	80024a8 <HAL_RCC_OscConfig+0x74>
 800249a:	4b76      	ldr	r3, [pc, #472]	@ (8002674 <HAL_RCC_OscConfig+0x240>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a75      	ldr	r2, [pc, #468]	@ (8002674 <HAL_RCC_OscConfig+0x240>)
 80024a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e01d      	b.n	80024e4 <HAL_RCC_OscConfig+0xb0>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024b0:	d10c      	bne.n	80024cc <HAL_RCC_OscConfig+0x98>
 80024b2:	4b70      	ldr	r3, [pc, #448]	@ (8002674 <HAL_RCC_OscConfig+0x240>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a6f      	ldr	r2, [pc, #444]	@ (8002674 <HAL_RCC_OscConfig+0x240>)
 80024b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	4b6d      	ldr	r3, [pc, #436]	@ (8002674 <HAL_RCC_OscConfig+0x240>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a6c      	ldr	r2, [pc, #432]	@ (8002674 <HAL_RCC_OscConfig+0x240>)
 80024c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	e00b      	b.n	80024e4 <HAL_RCC_OscConfig+0xb0>
 80024cc:	4b69      	ldr	r3, [pc, #420]	@ (8002674 <HAL_RCC_OscConfig+0x240>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a68      	ldr	r2, [pc, #416]	@ (8002674 <HAL_RCC_OscConfig+0x240>)
 80024d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	4b66      	ldr	r3, [pc, #408]	@ (8002674 <HAL_RCC_OscConfig+0x240>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a65      	ldr	r2, [pc, #404]	@ (8002674 <HAL_RCC_OscConfig+0x240>)
 80024de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d013      	beq.n	8002514 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7fe fc2a 	bl	8000d44 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f4:	f7fe fc26 	bl	8000d44 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b64      	cmp	r3, #100	@ 0x64
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e207      	b.n	8002916 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002506:	4b5b      	ldr	r3, [pc, #364]	@ (8002674 <HAL_RCC_OscConfig+0x240>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCC_OscConfig+0xc0>
 8002512:	e014      	b.n	800253e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002514:	f7fe fc16 	bl	8000d44 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800251c:	f7fe fc12 	bl	8000d44 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b64      	cmp	r3, #100	@ 0x64
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e1f3      	b.n	8002916 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252e:	4b51      	ldr	r3, [pc, #324]	@ (8002674 <HAL_RCC_OscConfig+0x240>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f0      	bne.n	800251c <HAL_RCC_OscConfig+0xe8>
 800253a:	e000      	b.n	800253e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d063      	beq.n	8002612 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800254a:	4b4a      	ldr	r3, [pc, #296]	@ (8002674 <HAL_RCC_OscConfig+0x240>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00b      	beq.n	800256e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002556:	4b47      	ldr	r3, [pc, #284]	@ (8002674 <HAL_RCC_OscConfig+0x240>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800255e:	2b08      	cmp	r3, #8
 8002560:	d11c      	bne.n	800259c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002562:	4b44      	ldr	r3, [pc, #272]	@ (8002674 <HAL_RCC_OscConfig+0x240>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d116      	bne.n	800259c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256e:	4b41      	ldr	r3, [pc, #260]	@ (8002674 <HAL_RCC_OscConfig+0x240>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d005      	beq.n	8002586 <HAL_RCC_OscConfig+0x152>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d001      	beq.n	8002586 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e1c7      	b.n	8002916 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002586:	4b3b      	ldr	r3, [pc, #236]	@ (8002674 <HAL_RCC_OscConfig+0x240>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4937      	ldr	r1, [pc, #220]	@ (8002674 <HAL_RCC_OscConfig+0x240>)
 8002596:	4313      	orrs	r3, r2
 8002598:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259a:	e03a      	b.n	8002612 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d020      	beq.n	80025e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a4:	4b34      	ldr	r3, [pc, #208]	@ (8002678 <HAL_RCC_OscConfig+0x244>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025aa:	f7fe fbcb 	bl	8000d44 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b2:	f7fe fbc7 	bl	8000d44 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e1a8      	b.n	8002916 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002674 <HAL_RCC_OscConfig+0x240>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d0:	4b28      	ldr	r3, [pc, #160]	@ (8002674 <HAL_RCC_OscConfig+0x240>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4925      	ldr	r1, [pc, #148]	@ (8002674 <HAL_RCC_OscConfig+0x240>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	600b      	str	r3, [r1, #0]
 80025e4:	e015      	b.n	8002612 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e6:	4b24      	ldr	r3, [pc, #144]	@ (8002678 <HAL_RCC_OscConfig+0x244>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7fe fbaa 	bl	8000d44 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f4:	f7fe fba6 	bl	8000d44 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e187      	b.n	8002916 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002606:	4b1b      	ldr	r3, [pc, #108]	@ (8002674 <HAL_RCC_OscConfig+0x240>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d036      	beq.n	800268c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d016      	beq.n	8002654 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002626:	4b15      	ldr	r3, [pc, #84]	@ (800267c <HAL_RCC_OscConfig+0x248>)
 8002628:	2201      	movs	r2, #1
 800262a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262c:	f7fe fb8a 	bl	8000d44 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002634:	f7fe fb86 	bl	8000d44 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e167      	b.n	8002916 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002646:	4b0b      	ldr	r3, [pc, #44]	@ (8002674 <HAL_RCC_OscConfig+0x240>)
 8002648:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f0      	beq.n	8002634 <HAL_RCC_OscConfig+0x200>
 8002652:	e01b      	b.n	800268c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002654:	4b09      	ldr	r3, [pc, #36]	@ (800267c <HAL_RCC_OscConfig+0x248>)
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800265a:	f7fe fb73 	bl	8000d44 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002660:	e00e      	b.n	8002680 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002662:	f7fe fb6f 	bl	8000d44 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d907      	bls.n	8002680 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e150      	b.n	8002916 <HAL_RCC_OscConfig+0x4e2>
 8002674:	40023800 	.word	0x40023800
 8002678:	42470000 	.word	0x42470000
 800267c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002680:	4b88      	ldr	r3, [pc, #544]	@ (80028a4 <HAL_RCC_OscConfig+0x470>)
 8002682:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1ea      	bne.n	8002662 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 8097 	beq.w	80027c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800269a:	2300      	movs	r3, #0
 800269c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800269e:	4b81      	ldr	r3, [pc, #516]	@ (80028a4 <HAL_RCC_OscConfig+0x470>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10f      	bne.n	80026ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	60bb      	str	r3, [r7, #8]
 80026ae:	4b7d      	ldr	r3, [pc, #500]	@ (80028a4 <HAL_RCC_OscConfig+0x470>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b2:	4a7c      	ldr	r2, [pc, #496]	@ (80028a4 <HAL_RCC_OscConfig+0x470>)
 80026b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ba:	4b7a      	ldr	r3, [pc, #488]	@ (80028a4 <HAL_RCC_OscConfig+0x470>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026c2:	60bb      	str	r3, [r7, #8]
 80026c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026c6:	2301      	movs	r3, #1
 80026c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ca:	4b77      	ldr	r3, [pc, #476]	@ (80028a8 <HAL_RCC_OscConfig+0x474>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d118      	bne.n	8002708 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026d6:	4b74      	ldr	r3, [pc, #464]	@ (80028a8 <HAL_RCC_OscConfig+0x474>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a73      	ldr	r2, [pc, #460]	@ (80028a8 <HAL_RCC_OscConfig+0x474>)
 80026dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026e2:	f7fe fb2f 	bl	8000d44 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ea:	f7fe fb2b 	bl	8000d44 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e10c      	b.n	8002916 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fc:	4b6a      	ldr	r3, [pc, #424]	@ (80028a8 <HAL_RCC_OscConfig+0x474>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0f0      	beq.n	80026ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d106      	bne.n	800271e <HAL_RCC_OscConfig+0x2ea>
 8002710:	4b64      	ldr	r3, [pc, #400]	@ (80028a4 <HAL_RCC_OscConfig+0x470>)
 8002712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002714:	4a63      	ldr	r2, [pc, #396]	@ (80028a4 <HAL_RCC_OscConfig+0x470>)
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	6713      	str	r3, [r2, #112]	@ 0x70
 800271c:	e01c      	b.n	8002758 <HAL_RCC_OscConfig+0x324>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	2b05      	cmp	r3, #5
 8002724:	d10c      	bne.n	8002740 <HAL_RCC_OscConfig+0x30c>
 8002726:	4b5f      	ldr	r3, [pc, #380]	@ (80028a4 <HAL_RCC_OscConfig+0x470>)
 8002728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800272a:	4a5e      	ldr	r2, [pc, #376]	@ (80028a4 <HAL_RCC_OscConfig+0x470>)
 800272c:	f043 0304 	orr.w	r3, r3, #4
 8002730:	6713      	str	r3, [r2, #112]	@ 0x70
 8002732:	4b5c      	ldr	r3, [pc, #368]	@ (80028a4 <HAL_RCC_OscConfig+0x470>)
 8002734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002736:	4a5b      	ldr	r2, [pc, #364]	@ (80028a4 <HAL_RCC_OscConfig+0x470>)
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	6713      	str	r3, [r2, #112]	@ 0x70
 800273e:	e00b      	b.n	8002758 <HAL_RCC_OscConfig+0x324>
 8002740:	4b58      	ldr	r3, [pc, #352]	@ (80028a4 <HAL_RCC_OscConfig+0x470>)
 8002742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002744:	4a57      	ldr	r2, [pc, #348]	@ (80028a4 <HAL_RCC_OscConfig+0x470>)
 8002746:	f023 0301 	bic.w	r3, r3, #1
 800274a:	6713      	str	r3, [r2, #112]	@ 0x70
 800274c:	4b55      	ldr	r3, [pc, #340]	@ (80028a4 <HAL_RCC_OscConfig+0x470>)
 800274e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002750:	4a54      	ldr	r2, [pc, #336]	@ (80028a4 <HAL_RCC_OscConfig+0x470>)
 8002752:	f023 0304 	bic.w	r3, r3, #4
 8002756:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d015      	beq.n	800278c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002760:	f7fe faf0 	bl	8000d44 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002766:	e00a      	b.n	800277e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002768:	f7fe faec 	bl	8000d44 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002776:	4293      	cmp	r3, r2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e0cb      	b.n	8002916 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800277e:	4b49      	ldr	r3, [pc, #292]	@ (80028a4 <HAL_RCC_OscConfig+0x470>)
 8002780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0ee      	beq.n	8002768 <HAL_RCC_OscConfig+0x334>
 800278a:	e014      	b.n	80027b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800278c:	f7fe fada 	bl	8000d44 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002792:	e00a      	b.n	80027aa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002794:	f7fe fad6 	bl	8000d44 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e0b5      	b.n	8002916 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027aa:	4b3e      	ldr	r3, [pc, #248]	@ (80028a4 <HAL_RCC_OscConfig+0x470>)
 80027ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1ee      	bne.n	8002794 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027b6:	7dfb      	ldrb	r3, [r7, #23]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d105      	bne.n	80027c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027bc:	4b39      	ldr	r3, [pc, #228]	@ (80028a4 <HAL_RCC_OscConfig+0x470>)
 80027be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c0:	4a38      	ldr	r2, [pc, #224]	@ (80028a4 <HAL_RCC_OscConfig+0x470>)
 80027c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 80a1 	beq.w	8002914 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027d2:	4b34      	ldr	r3, [pc, #208]	@ (80028a4 <HAL_RCC_OscConfig+0x470>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 030c 	and.w	r3, r3, #12
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d05c      	beq.n	8002898 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d141      	bne.n	800286a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e6:	4b31      	ldr	r3, [pc, #196]	@ (80028ac <HAL_RCC_OscConfig+0x478>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ec:	f7fe faaa 	bl	8000d44 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f4:	f7fe faa6 	bl	8000d44 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e087      	b.n	8002916 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002806:	4b27      	ldr	r3, [pc, #156]	@ (80028a4 <HAL_RCC_OscConfig+0x470>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f0      	bne.n	80027f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69da      	ldr	r2, [r3, #28]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002820:	019b      	lsls	r3, r3, #6
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002828:	085b      	lsrs	r3, r3, #1
 800282a:	3b01      	subs	r3, #1
 800282c:	041b      	lsls	r3, r3, #16
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002834:	061b      	lsls	r3, r3, #24
 8002836:	491b      	ldr	r1, [pc, #108]	@ (80028a4 <HAL_RCC_OscConfig+0x470>)
 8002838:	4313      	orrs	r3, r2
 800283a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800283c:	4b1b      	ldr	r3, [pc, #108]	@ (80028ac <HAL_RCC_OscConfig+0x478>)
 800283e:	2201      	movs	r2, #1
 8002840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002842:	f7fe fa7f 	bl	8000d44 <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800284a:	f7fe fa7b 	bl	8000d44 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e05c      	b.n	8002916 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800285c:	4b11      	ldr	r3, [pc, #68]	@ (80028a4 <HAL_RCC_OscConfig+0x470>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0f0      	beq.n	800284a <HAL_RCC_OscConfig+0x416>
 8002868:	e054      	b.n	8002914 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800286a:	4b10      	ldr	r3, [pc, #64]	@ (80028ac <HAL_RCC_OscConfig+0x478>)
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002870:	f7fe fa68 	bl	8000d44 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002878:	f7fe fa64 	bl	8000d44 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e045      	b.n	8002916 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800288a:	4b06      	ldr	r3, [pc, #24]	@ (80028a4 <HAL_RCC_OscConfig+0x470>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f0      	bne.n	8002878 <HAL_RCC_OscConfig+0x444>
 8002896:	e03d      	b.n	8002914 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d107      	bne.n	80028b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e038      	b.n	8002916 <HAL_RCC_OscConfig+0x4e2>
 80028a4:	40023800 	.word	0x40023800
 80028a8:	40007000 	.word	0x40007000
 80028ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002920 <HAL_RCC_OscConfig+0x4ec>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d028      	beq.n	8002910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d121      	bne.n	8002910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d11a      	bne.n	8002910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028e0:	4013      	ands	r3, r2
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d111      	bne.n	8002910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f6:	085b      	lsrs	r3, r3, #1
 80028f8:	3b01      	subs	r3, #1
 80028fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d107      	bne.n	8002910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800290a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800290c:	429a      	cmp	r2, r3
 800290e:	d001      	beq.n	8002914 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e000      	b.n	8002916 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3718      	adds	r7, #24
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40023800 	.word	0x40023800

08002924 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e0cc      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002938:	4b68      	ldr	r3, [pc, #416]	@ (8002adc <HAL_RCC_ClockConfig+0x1b8>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d90c      	bls.n	8002960 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002946:	4b65      	ldr	r3, [pc, #404]	@ (8002adc <HAL_RCC_ClockConfig+0x1b8>)
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800294e:	4b63      	ldr	r3, [pc, #396]	@ (8002adc <HAL_RCC_ClockConfig+0x1b8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d001      	beq.n	8002960 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e0b8      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d020      	beq.n	80029ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002978:	4b59      	ldr	r3, [pc, #356]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	4a58      	ldr	r2, [pc, #352]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002982:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0308 	and.w	r3, r3, #8
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002990:	4b53      	ldr	r3, [pc, #332]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	4a52      	ldr	r2, [pc, #328]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002996:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800299a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800299c:	4b50      	ldr	r3, [pc, #320]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	494d      	ldr	r1, [pc, #308]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d044      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d107      	bne.n	80029d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c2:	4b47      	ldr	r3, [pc, #284]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d119      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e07f      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d003      	beq.n	80029e2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d107      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e2:	4b3f      	ldr	r3, [pc, #252]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d109      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e06f      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e067      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a02:	4b37      	ldr	r3, [pc, #220]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f023 0203 	bic.w	r2, r3, #3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	4934      	ldr	r1, [pc, #208]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a14:	f7fe f996 	bl	8000d44 <HAL_GetTick>
 8002a18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1a:	e00a      	b.n	8002a32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a1c:	f7fe f992 	bl	8000d44 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e04f      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a32:	4b2b      	ldr	r3, [pc, #172]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 020c 	and.w	r2, r3, #12
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d1eb      	bne.n	8002a1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a44:	4b25      	ldr	r3, [pc, #148]	@ (8002adc <HAL_RCC_ClockConfig+0x1b8>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d20c      	bcs.n	8002a6c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a52:	4b22      	ldr	r3, [pc, #136]	@ (8002adc <HAL_RCC_ClockConfig+0x1b8>)
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5a:	4b20      	ldr	r3, [pc, #128]	@ (8002adc <HAL_RCC_ClockConfig+0x1b8>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d001      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e032      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a78:	4b19      	ldr	r3, [pc, #100]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	4916      	ldr	r1, [pc, #88]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d009      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a96:	4b12      	ldr	r3, [pc, #72]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	490e      	ldr	r1, [pc, #56]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002aaa:	f000 f821 	bl	8002af0 <HAL_RCC_GetSysClockFreq>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	091b      	lsrs	r3, r3, #4
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	490a      	ldr	r1, [pc, #40]	@ (8002ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8002abc:	5ccb      	ldrb	r3, [r1, r3]
 8002abe:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac2:	4a09      	ldr	r2, [pc, #36]	@ (8002ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002ac6:	4b09      	ldr	r3, [pc, #36]	@ (8002aec <HAL_RCC_ClockConfig+0x1c8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fe f8f6 	bl	8000cbc <HAL_InitTick>

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40023c00 	.word	0x40023c00
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	08003e80 	.word	0x08003e80
 8002ae8:	2000e278 	.word	0x2000e278
 8002aec:	2000e27c 	.word	0x2000e27c

08002af0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002af4:	b094      	sub	sp, #80	@ 0x50
 8002af6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b08:	4b79      	ldr	r3, [pc, #484]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 030c 	and.w	r3, r3, #12
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	d00d      	beq.n	8002b30 <HAL_RCC_GetSysClockFreq+0x40>
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	f200 80e1 	bhi.w	8002cdc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d002      	beq.n	8002b24 <HAL_RCC_GetSysClockFreq+0x34>
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d003      	beq.n	8002b2a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b22:	e0db      	b.n	8002cdc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b24:	4b73      	ldr	r3, [pc, #460]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b26:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b28:	e0db      	b.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b2a:	4b73      	ldr	r3, [pc, #460]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b2e:	e0d8      	b.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b30:	4b6f      	ldr	r3, [pc, #444]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b38:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b3a:	4b6d      	ldr	r3, [pc, #436]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d063      	beq.n	8002c0e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b46:	4b6a      	ldr	r3, [pc, #424]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	099b      	lsrs	r3, r3, #6
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b50:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b58:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b5e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b62:	4622      	mov	r2, r4
 8002b64:	462b      	mov	r3, r5
 8002b66:	f04f 0000 	mov.w	r0, #0
 8002b6a:	f04f 0100 	mov.w	r1, #0
 8002b6e:	0159      	lsls	r1, r3, #5
 8002b70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b74:	0150      	lsls	r0, r2, #5
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4621      	mov	r1, r4
 8002b7c:	1a51      	subs	r1, r2, r1
 8002b7e:	6139      	str	r1, [r7, #16]
 8002b80:	4629      	mov	r1, r5
 8002b82:	eb63 0301 	sbc.w	r3, r3, r1
 8002b86:	617b      	str	r3, [r7, #20]
 8002b88:	f04f 0200 	mov.w	r2, #0
 8002b8c:	f04f 0300 	mov.w	r3, #0
 8002b90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b94:	4659      	mov	r1, fp
 8002b96:	018b      	lsls	r3, r1, #6
 8002b98:	4651      	mov	r1, sl
 8002b9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b9e:	4651      	mov	r1, sl
 8002ba0:	018a      	lsls	r2, r1, #6
 8002ba2:	4651      	mov	r1, sl
 8002ba4:	ebb2 0801 	subs.w	r8, r2, r1
 8002ba8:	4659      	mov	r1, fp
 8002baa:	eb63 0901 	sbc.w	r9, r3, r1
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bc2:	4690      	mov	r8, r2
 8002bc4:	4699      	mov	r9, r3
 8002bc6:	4623      	mov	r3, r4
 8002bc8:	eb18 0303 	adds.w	r3, r8, r3
 8002bcc:	60bb      	str	r3, [r7, #8]
 8002bce:	462b      	mov	r3, r5
 8002bd0:	eb49 0303 	adc.w	r3, r9, r3
 8002bd4:	60fb      	str	r3, [r7, #12]
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002be2:	4629      	mov	r1, r5
 8002be4:	024b      	lsls	r3, r1, #9
 8002be6:	4621      	mov	r1, r4
 8002be8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bec:	4621      	mov	r1, r4
 8002bee:	024a      	lsls	r2, r1, #9
 8002bf0:	4610      	mov	r0, r2
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002bfc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c00:	f7fd fae8 	bl	80001d4 <__aeabi_uldivmod>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4613      	mov	r3, r2
 8002c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c0c:	e058      	b.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c0e:	4b38      	ldr	r3, [pc, #224]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	099b      	lsrs	r3, r3, #6
 8002c14:	2200      	movs	r2, #0
 8002c16:	4618      	mov	r0, r3
 8002c18:	4611      	mov	r1, r2
 8002c1a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c1e:	623b      	str	r3, [r7, #32]
 8002c20:	2300      	movs	r3, #0
 8002c22:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c28:	4642      	mov	r2, r8
 8002c2a:	464b      	mov	r3, r9
 8002c2c:	f04f 0000 	mov.w	r0, #0
 8002c30:	f04f 0100 	mov.w	r1, #0
 8002c34:	0159      	lsls	r1, r3, #5
 8002c36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c3a:	0150      	lsls	r0, r2, #5
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4641      	mov	r1, r8
 8002c42:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c46:	4649      	mov	r1, r9
 8002c48:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c4c:	f04f 0200 	mov.w	r2, #0
 8002c50:	f04f 0300 	mov.w	r3, #0
 8002c54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c60:	ebb2 040a 	subs.w	r4, r2, sl
 8002c64:	eb63 050b 	sbc.w	r5, r3, fp
 8002c68:	f04f 0200 	mov.w	r2, #0
 8002c6c:	f04f 0300 	mov.w	r3, #0
 8002c70:	00eb      	lsls	r3, r5, #3
 8002c72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c76:	00e2      	lsls	r2, r4, #3
 8002c78:	4614      	mov	r4, r2
 8002c7a:	461d      	mov	r5, r3
 8002c7c:	4643      	mov	r3, r8
 8002c7e:	18e3      	adds	r3, r4, r3
 8002c80:	603b      	str	r3, [r7, #0]
 8002c82:	464b      	mov	r3, r9
 8002c84:	eb45 0303 	adc.w	r3, r5, r3
 8002c88:	607b      	str	r3, [r7, #4]
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	f04f 0300 	mov.w	r3, #0
 8002c92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c96:	4629      	mov	r1, r5
 8002c98:	028b      	lsls	r3, r1, #10
 8002c9a:	4621      	mov	r1, r4
 8002c9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ca0:	4621      	mov	r1, r4
 8002ca2:	028a      	lsls	r2, r1, #10
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002caa:	2200      	movs	r2, #0
 8002cac:	61bb      	str	r3, [r7, #24]
 8002cae:	61fa      	str	r2, [r7, #28]
 8002cb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cb4:	f7fd fa8e 	bl	80001d4 <__aeabi_uldivmod>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	0c1b      	lsrs	r3, r3, #16
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	3301      	adds	r3, #1
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002cd0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cda:	e002      	b.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cdc:	4b05      	ldr	r3, [pc, #20]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cde:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ce0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ce2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3750      	adds	r7, #80	@ 0x50
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cee:	bf00      	nop
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	00f42400 	.word	0x00f42400
 8002cf8:	007a1200 	.word	0x007a1200

08002cfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d00:	4b03      	ldr	r3, [pc, #12]	@ (8002d10 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d02:	681b      	ldr	r3, [r3, #0]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	2000e278 	.word	0x2000e278

08002d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d18:	f7ff fff0 	bl	8002cfc <HAL_RCC_GetHCLKFreq>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	4b05      	ldr	r3, [pc, #20]	@ (8002d34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	0a9b      	lsrs	r3, r3, #10
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	4903      	ldr	r1, [pc, #12]	@ (8002d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d2a:	5ccb      	ldrb	r3, [r1, r3]
 8002d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40023800 	.word	0x40023800
 8002d38:	08003e90 	.word	0x08003e90

08002d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d40:	f7ff ffdc 	bl	8002cfc <HAL_RCC_GetHCLKFreq>
 8002d44:	4602      	mov	r2, r0
 8002d46:	4b05      	ldr	r3, [pc, #20]	@ (8002d5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	0b5b      	lsrs	r3, r3, #13
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	4903      	ldr	r1, [pc, #12]	@ (8002d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d52:	5ccb      	ldrb	r3, [r1, r3]
 8002d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	08003e90 	.word	0x08003e90

08002d64 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d105      	bne.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d035      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d8c:	4b67      	ldr	r3, [pc, #412]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d92:	f7fd ffd7 	bl	8000d44 <HAL_GetTick>
 8002d96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d98:	e008      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d9a:	f7fd ffd3 	bl	8000d44 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e0ba      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dac:	4b60      	ldr	r3, [pc, #384]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1f0      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	019a      	lsls	r2, r3, #6
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	071b      	lsls	r3, r3, #28
 8002dc4:	495a      	ldr	r1, [pc, #360]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002dcc:	4b57      	ldr	r3, [pc, #348]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002dce:	2201      	movs	r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002dd2:	f7fd ffb7 	bl	8000d44 <HAL_GetTick>
 8002dd6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002dd8:	e008      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002dda:	f7fd ffb3 	bl	8000d44 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d901      	bls.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e09a      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002dec:	4b50      	ldr	r3, [pc, #320]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0f0      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 8083 	beq.w	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e06:	2300      	movs	r3, #0
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	4b49      	ldr	r3, [pc, #292]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0e:	4a48      	ldr	r2, [pc, #288]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e14:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e16:	4b46      	ldr	r3, [pc, #280]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002e22:	4b44      	ldr	r3, [pc, #272]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a43      	ldr	r2, [pc, #268]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e2c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e2e:	f7fd ff89 	bl	8000d44 <HAL_GetTick>
 8002e32:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002e34:	e008      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e36:	f7fd ff85 	bl	8000d44 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e06c      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002e48:	4b3a      	ldr	r3, [pc, #232]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0f0      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e54:	4b36      	ldr	r3, [pc, #216]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e5c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d02f      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d028      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e72:	4b2f      	ldr	r3, [pc, #188]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e7a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e7c:	4b2e      	ldr	r3, [pc, #184]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e7e:	2201      	movs	r2, #1
 8002e80:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e82:	4b2d      	ldr	r3, [pc, #180]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002e88:	4a29      	ldr	r2, [pc, #164]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e8e:	4b28      	ldr	r3, [pc, #160]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d114      	bne.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002e9a:	f7fd ff53 	bl	8000d44 <HAL_GetTick>
 8002e9e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea0:	e00a      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea2:	f7fd ff4f 	bl	8000d44 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e034      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0ee      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ecc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ed0:	d10d      	bne.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002ed2:	4b17      	ldr	r3, [pc, #92]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002ee2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ee6:	4912      	ldr	r1, [pc, #72]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	608b      	str	r3, [r1, #8]
 8002eec:	e005      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002eee:	4b10      	ldr	r3, [pc, #64]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	4a0f      	ldr	r2, [pc, #60]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ef4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002ef8:	6093      	str	r3, [r2, #8]
 8002efa:	4b0d      	ldr	r3, [pc, #52]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002efc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f06:	490a      	ldr	r1, [pc, #40]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0308 	and.w	r3, r3, #8
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	7c1a      	ldrb	r2, [r3, #16]
 8002f1c:	4b07      	ldr	r3, [pc, #28]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f1e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3718      	adds	r7, #24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	42470068 	.word	0x42470068
 8002f30:	40023800 	.word	0x40023800
 8002f34:	40007000 	.word	0x40007000
 8002f38:	42470e40 	.word	0x42470e40
 8002f3c:	424711e0 	.word	0x424711e0

08002f40 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b087      	sub	sp, #28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8002f54:	2300      	movs	r3, #0
 8002f56:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d13f      	bne.n	8002fde <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002f5e:	4b24      	ldr	r3, [pc, #144]	@ (8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d006      	beq.n	8002f7c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f74:	d12f      	bne.n	8002fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002f76:	4b1f      	ldr	r3, [pc, #124]	@ (8002ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002f78:	617b      	str	r3, [r7, #20]
          break;
 8002f7a:	e02f      	b.n	8002fdc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f88:	d108      	bne.n	8002f9c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002f8a:	4b19      	ldr	r3, [pc, #100]	@ (8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f92:	4a19      	ldr	r2, [pc, #100]	@ (8002ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8002f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	e007      	b.n	8002fac <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002f9c:	4b14      	ldr	r3, [pc, #80]	@ (8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fa4:	4a15      	ldr	r2, [pc, #84]	@ (8002ffc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8002fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002faa:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002fac:	4b10      	ldr	r3, [pc, #64]	@ (8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002fae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fb2:	099b      	lsrs	r3, r3, #6
 8002fb4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	fb02 f303 	mul.w	r3, r2, r3
 8002fbe:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fc6:	0f1b      	lsrs	r3, r3, #28
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd2:	617b      	str	r3, [r7, #20]
          break;
 8002fd4:	e002      	b.n	8002fdc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	617b      	str	r3, [r7, #20]
          break;
 8002fda:	bf00      	nop
        }
      }
      break;
 8002fdc:	e000      	b.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8002fde:	bf00      	nop
    }
  }
  return frequency;
 8002fe0:	697b      	ldr	r3, [r7, #20]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	371c      	adds	r7, #28
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	00bb8000 	.word	0x00bb8000
 8002ff8:	007a1200 	.word	0x007a1200
 8002ffc:	00f42400 	.word	0x00f42400

08003000 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e041      	b.n	8003096 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d106      	bne.n	800302c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7fd fcf0 	bl	8000a0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3304      	adds	r3, #4
 800303c:	4619      	mov	r1, r3
 800303e:	4610      	mov	r0, r2
 8003040:	f000 fa7a 	bl	8003538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d001      	beq.n	80030b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e044      	b.n	8003142 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2202      	movs	r2, #2
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68da      	ldr	r2, [r3, #12]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a1e      	ldr	r2, [pc, #120]	@ (8003150 <HAL_TIM_Base_Start_IT+0xb0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d018      	beq.n	800310c <HAL_TIM_Base_Start_IT+0x6c>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030e2:	d013      	beq.n	800310c <HAL_TIM_Base_Start_IT+0x6c>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a1a      	ldr	r2, [pc, #104]	@ (8003154 <HAL_TIM_Base_Start_IT+0xb4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d00e      	beq.n	800310c <HAL_TIM_Base_Start_IT+0x6c>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a19      	ldr	r2, [pc, #100]	@ (8003158 <HAL_TIM_Base_Start_IT+0xb8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d009      	beq.n	800310c <HAL_TIM_Base_Start_IT+0x6c>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a17      	ldr	r2, [pc, #92]	@ (800315c <HAL_TIM_Base_Start_IT+0xbc>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d004      	beq.n	800310c <HAL_TIM_Base_Start_IT+0x6c>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a16      	ldr	r2, [pc, #88]	@ (8003160 <HAL_TIM_Base_Start_IT+0xc0>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d111      	bne.n	8003130 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2b06      	cmp	r3, #6
 800311c:	d010      	beq.n	8003140 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f042 0201 	orr.w	r2, r2, #1
 800312c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800312e:	e007      	b.n	8003140 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	40010000 	.word	0x40010000
 8003154:	40000400 	.word	0x40000400
 8003158:	40000800 	.word	0x40000800
 800315c:	40000c00 	.word	0x40000c00
 8003160:	40014000 	.word	0x40014000

08003164 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d020      	beq.n	80031c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d01b      	beq.n	80031c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f06f 0202 	mvn.w	r2, #2
 8003198:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f9a3 	bl	80034fa <HAL_TIM_IC_CaptureCallback>
 80031b4:	e005      	b.n	80031c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f995 	bl	80034e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f9a6 	bl	800350e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d020      	beq.n	8003214 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d01b      	beq.n	8003214 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f06f 0204 	mvn.w	r2, #4
 80031e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2202      	movs	r2, #2
 80031ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f97d 	bl	80034fa <HAL_TIM_IC_CaptureCallback>
 8003200:	e005      	b.n	800320e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f96f 	bl	80034e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 f980 	bl	800350e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b00      	cmp	r3, #0
 800321c:	d020      	beq.n	8003260 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f003 0308 	and.w	r3, r3, #8
 8003224:	2b00      	cmp	r3, #0
 8003226:	d01b      	beq.n	8003260 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f06f 0208 	mvn.w	r2, #8
 8003230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2204      	movs	r2, #4
 8003236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f957 	bl	80034fa <HAL_TIM_IC_CaptureCallback>
 800324c:	e005      	b.n	800325a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f949 	bl	80034e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f95a 	bl	800350e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	f003 0310 	and.w	r3, r3, #16
 8003266:	2b00      	cmp	r3, #0
 8003268:	d020      	beq.n	80032ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f003 0310 	and.w	r3, r3, #16
 8003270:	2b00      	cmp	r3, #0
 8003272:	d01b      	beq.n	80032ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f06f 0210 	mvn.w	r2, #16
 800327c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2208      	movs	r2, #8
 8003282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f931 	bl	80034fa <HAL_TIM_IC_CaptureCallback>
 8003298:	e005      	b.n	80032a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f923 	bl	80034e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 f934 	bl	800350e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00c      	beq.n	80032d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d007      	beq.n	80032d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f06f 0201 	mvn.w	r2, #1
 80032c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f901 	bl	80034d2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00c      	beq.n	80032f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d007      	beq.n	80032f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80032ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 fac0 	bl	8003874 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00c      	beq.n	8003318 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003304:	2b00      	cmp	r3, #0
 8003306:	d007      	beq.n	8003318 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f905 	bl	8003522 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	f003 0320 	and.w	r3, r3, #32
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00c      	beq.n	800333c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f003 0320 	and.w	r3, r3, #32
 8003328:	2b00      	cmp	r3, #0
 800332a:	d007      	beq.n	800333c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f06f 0220 	mvn.w	r2, #32
 8003334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fa92 	bl	8003860 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800333c:	bf00      	nop
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800334e:	2300      	movs	r3, #0
 8003350:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003358:	2b01      	cmp	r3, #1
 800335a:	d101      	bne.n	8003360 <HAL_TIM_ConfigClockSource+0x1c>
 800335c:	2302      	movs	r3, #2
 800335e:	e0b4      	b.n	80034ca <HAL_TIM_ConfigClockSource+0x186>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800337e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003386:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003398:	d03e      	beq.n	8003418 <HAL_TIM_ConfigClockSource+0xd4>
 800339a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800339e:	f200 8087 	bhi.w	80034b0 <HAL_TIM_ConfigClockSource+0x16c>
 80033a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033a6:	f000 8086 	beq.w	80034b6 <HAL_TIM_ConfigClockSource+0x172>
 80033aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033ae:	d87f      	bhi.n	80034b0 <HAL_TIM_ConfigClockSource+0x16c>
 80033b0:	2b70      	cmp	r3, #112	@ 0x70
 80033b2:	d01a      	beq.n	80033ea <HAL_TIM_ConfigClockSource+0xa6>
 80033b4:	2b70      	cmp	r3, #112	@ 0x70
 80033b6:	d87b      	bhi.n	80034b0 <HAL_TIM_ConfigClockSource+0x16c>
 80033b8:	2b60      	cmp	r3, #96	@ 0x60
 80033ba:	d050      	beq.n	800345e <HAL_TIM_ConfigClockSource+0x11a>
 80033bc:	2b60      	cmp	r3, #96	@ 0x60
 80033be:	d877      	bhi.n	80034b0 <HAL_TIM_ConfigClockSource+0x16c>
 80033c0:	2b50      	cmp	r3, #80	@ 0x50
 80033c2:	d03c      	beq.n	800343e <HAL_TIM_ConfigClockSource+0xfa>
 80033c4:	2b50      	cmp	r3, #80	@ 0x50
 80033c6:	d873      	bhi.n	80034b0 <HAL_TIM_ConfigClockSource+0x16c>
 80033c8:	2b40      	cmp	r3, #64	@ 0x40
 80033ca:	d058      	beq.n	800347e <HAL_TIM_ConfigClockSource+0x13a>
 80033cc:	2b40      	cmp	r3, #64	@ 0x40
 80033ce:	d86f      	bhi.n	80034b0 <HAL_TIM_ConfigClockSource+0x16c>
 80033d0:	2b30      	cmp	r3, #48	@ 0x30
 80033d2:	d064      	beq.n	800349e <HAL_TIM_ConfigClockSource+0x15a>
 80033d4:	2b30      	cmp	r3, #48	@ 0x30
 80033d6:	d86b      	bhi.n	80034b0 <HAL_TIM_ConfigClockSource+0x16c>
 80033d8:	2b20      	cmp	r3, #32
 80033da:	d060      	beq.n	800349e <HAL_TIM_ConfigClockSource+0x15a>
 80033dc:	2b20      	cmp	r3, #32
 80033de:	d867      	bhi.n	80034b0 <HAL_TIM_ConfigClockSource+0x16c>
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d05c      	beq.n	800349e <HAL_TIM_ConfigClockSource+0x15a>
 80033e4:	2b10      	cmp	r3, #16
 80033e6:	d05a      	beq.n	800349e <HAL_TIM_ConfigClockSource+0x15a>
 80033e8:	e062      	b.n	80034b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033fa:	f000 f9a3 	bl	8003744 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800340c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	609a      	str	r2, [r3, #8]
      break;
 8003416:	e04f      	b.n	80034b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003428:	f000 f98c 	bl	8003744 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800343a:	609a      	str	r2, [r3, #8]
      break;
 800343c:	e03c      	b.n	80034b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800344a:	461a      	mov	r2, r3
 800344c:	f000 f900 	bl	8003650 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2150      	movs	r1, #80	@ 0x50
 8003456:	4618      	mov	r0, r3
 8003458:	f000 f959 	bl	800370e <TIM_ITRx_SetConfig>
      break;
 800345c:	e02c      	b.n	80034b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800346a:	461a      	mov	r2, r3
 800346c:	f000 f91f 	bl	80036ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2160      	movs	r1, #96	@ 0x60
 8003476:	4618      	mov	r0, r3
 8003478:	f000 f949 	bl	800370e <TIM_ITRx_SetConfig>
      break;
 800347c:	e01c      	b.n	80034b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800348a:	461a      	mov	r2, r3
 800348c:	f000 f8e0 	bl	8003650 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2140      	movs	r1, #64	@ 0x40
 8003496:	4618      	mov	r0, r3
 8003498:	f000 f939 	bl	800370e <TIM_ITRx_SetConfig>
      break;
 800349c:	e00c      	b.n	80034b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4619      	mov	r1, r3
 80034a8:	4610      	mov	r0, r2
 80034aa:	f000 f930 	bl	800370e <TIM_ITRx_SetConfig>
      break;
 80034ae:	e003      	b.n	80034b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	73fb      	strb	r3, [r7, #15]
      break;
 80034b4:	e000      	b.n	80034b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80034b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
	...

08003538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a3a      	ldr	r2, [pc, #232]	@ (8003634 <TIM_Base_SetConfig+0xfc>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d00f      	beq.n	8003570 <TIM_Base_SetConfig+0x38>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003556:	d00b      	beq.n	8003570 <TIM_Base_SetConfig+0x38>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a37      	ldr	r2, [pc, #220]	@ (8003638 <TIM_Base_SetConfig+0x100>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d007      	beq.n	8003570 <TIM_Base_SetConfig+0x38>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a36      	ldr	r2, [pc, #216]	@ (800363c <TIM_Base_SetConfig+0x104>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d003      	beq.n	8003570 <TIM_Base_SetConfig+0x38>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a35      	ldr	r2, [pc, #212]	@ (8003640 <TIM_Base_SetConfig+0x108>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d108      	bne.n	8003582 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003576:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	4313      	orrs	r3, r2
 8003580:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a2b      	ldr	r2, [pc, #172]	@ (8003634 <TIM_Base_SetConfig+0xfc>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d01b      	beq.n	80035c2 <TIM_Base_SetConfig+0x8a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003590:	d017      	beq.n	80035c2 <TIM_Base_SetConfig+0x8a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a28      	ldr	r2, [pc, #160]	@ (8003638 <TIM_Base_SetConfig+0x100>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d013      	beq.n	80035c2 <TIM_Base_SetConfig+0x8a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a27      	ldr	r2, [pc, #156]	@ (800363c <TIM_Base_SetConfig+0x104>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d00f      	beq.n	80035c2 <TIM_Base_SetConfig+0x8a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a26      	ldr	r2, [pc, #152]	@ (8003640 <TIM_Base_SetConfig+0x108>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d00b      	beq.n	80035c2 <TIM_Base_SetConfig+0x8a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a25      	ldr	r2, [pc, #148]	@ (8003644 <TIM_Base_SetConfig+0x10c>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d007      	beq.n	80035c2 <TIM_Base_SetConfig+0x8a>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a24      	ldr	r2, [pc, #144]	@ (8003648 <TIM_Base_SetConfig+0x110>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d003      	beq.n	80035c2 <TIM_Base_SetConfig+0x8a>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a23      	ldr	r2, [pc, #140]	@ (800364c <TIM_Base_SetConfig+0x114>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d108      	bne.n	80035d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	4313      	orrs	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a0e      	ldr	r2, [pc, #56]	@ (8003634 <TIM_Base_SetConfig+0xfc>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d103      	bne.n	8003608 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b01      	cmp	r3, #1
 8003618:	d105      	bne.n	8003626 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	f023 0201 	bic.w	r2, r3, #1
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	611a      	str	r2, [r3, #16]
  }
}
 8003626:	bf00      	nop
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	40010000 	.word	0x40010000
 8003638:	40000400 	.word	0x40000400
 800363c:	40000800 	.word	0x40000800
 8003640:	40000c00 	.word	0x40000c00
 8003644:	40014000 	.word	0x40014000
 8003648:	40014400 	.word	0x40014400
 800364c:	40014800 	.word	0x40014800

08003650 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003650:	b480      	push	{r7}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	f023 0201 	bic.w	r2, r3, #1
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800367a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	011b      	lsls	r3, r3, #4
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	4313      	orrs	r3, r2
 8003684:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f023 030a 	bic.w	r3, r3, #10
 800368c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	4313      	orrs	r3, r2
 8003694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	621a      	str	r2, [r3, #32]
}
 80036a2:	bf00      	nop
 80036a4:	371c      	adds	r7, #28
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b087      	sub	sp, #28
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	60f8      	str	r0, [r7, #12]
 80036b6:	60b9      	str	r1, [r7, #8]
 80036b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	f023 0210 	bic.w	r2, r3, #16
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80036d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	031b      	lsls	r3, r3, #12
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80036ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	621a      	str	r2, [r3, #32]
}
 8003702:	bf00      	nop
 8003704:	371c      	adds	r7, #28
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800370e:	b480      	push	{r7}
 8003710:	b085      	sub	sp, #20
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
 8003716:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003724:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4313      	orrs	r3, r2
 800372c:	f043 0307 	orr.w	r3, r3, #7
 8003730:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	609a      	str	r2, [r3, #8]
}
 8003738:	bf00      	nop
 800373a:	3714      	adds	r7, #20
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003744:	b480      	push	{r7}
 8003746:	b087      	sub	sp, #28
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
 8003750:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800375e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	021a      	lsls	r2, r3, #8
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	431a      	orrs	r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4313      	orrs	r3, r2
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	4313      	orrs	r3, r2
 8003770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	609a      	str	r2, [r3, #8]
}
 8003778:	bf00      	nop
 800377a:	371c      	adds	r7, #28
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003794:	2b01      	cmp	r3, #1
 8003796:	d101      	bne.n	800379c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003798:	2302      	movs	r3, #2
 800379a:	e050      	b.n	800383e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2202      	movs	r2, #2
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a1c      	ldr	r2, [pc, #112]	@ (800384c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d018      	beq.n	8003812 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037e8:	d013      	beq.n	8003812 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a18      	ldr	r2, [pc, #96]	@ (8003850 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d00e      	beq.n	8003812 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a16      	ldr	r2, [pc, #88]	@ (8003854 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d009      	beq.n	8003812 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a15      	ldr	r2, [pc, #84]	@ (8003858 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d004      	beq.n	8003812 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a13      	ldr	r2, [pc, #76]	@ (800385c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d10c      	bne.n	800382c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003818:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	4313      	orrs	r3, r2
 8003822:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	40010000 	.word	0x40010000
 8003850:	40000400 	.word	0x40000400
 8003854:	40000800 	.word	0x40000800
 8003858:	40000c00 	.word	0x40000c00
 800385c:	40014000 	.word	0x40014000

08003860 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e042      	b.n	8003920 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d106      	bne.n	80038b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7fd f8d4 	bl	8000a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2224      	movs	r2, #36	@ 0x24
 80038b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68da      	ldr	r2, [r3, #12]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f82b 	bl	8003928 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	691a      	ldr	r2, [r3, #16]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	695a      	ldr	r2, [r3, #20]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68da      	ldr	r2, [r3, #12]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003900:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2220      	movs	r2, #32
 800390c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2220      	movs	r2, #32
 8003914:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800392c:	b0c0      	sub	sp, #256	@ 0x100
 800392e:	af00      	add	r7, sp, #0
 8003930:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003944:	68d9      	ldr	r1, [r3, #12]
 8003946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	ea40 0301 	orr.w	r3, r0, r1
 8003950:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	431a      	orrs	r2, r3
 8003960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	431a      	orrs	r2, r3
 8003968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	4313      	orrs	r3, r2
 8003970:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003980:	f021 010c 	bic.w	r1, r1, #12
 8003984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800398e:	430b      	orrs	r3, r1
 8003990:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800399e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a2:	6999      	ldr	r1, [r3, #24]
 80039a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	ea40 0301 	orr.w	r3, r0, r1
 80039ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	4b8f      	ldr	r3, [pc, #572]	@ (8003bf4 <UART_SetConfig+0x2cc>)
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d005      	beq.n	80039c8 <UART_SetConfig+0xa0>
 80039bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	4b8d      	ldr	r3, [pc, #564]	@ (8003bf8 <UART_SetConfig+0x2d0>)
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d104      	bne.n	80039d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039c8:	f7ff f9b8 	bl	8002d3c <HAL_RCC_GetPCLK2Freq>
 80039cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80039d0:	e003      	b.n	80039da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039d2:	f7ff f99f 	bl	8002d14 <HAL_RCC_GetPCLK1Freq>
 80039d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039de:	69db      	ldr	r3, [r3, #28]
 80039e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039e4:	f040 810c 	bne.w	8003c00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039ec:	2200      	movs	r2, #0
 80039ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80039f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80039f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80039fa:	4622      	mov	r2, r4
 80039fc:	462b      	mov	r3, r5
 80039fe:	1891      	adds	r1, r2, r2
 8003a00:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003a02:	415b      	adcs	r3, r3
 8003a04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a0a:	4621      	mov	r1, r4
 8003a0c:	eb12 0801 	adds.w	r8, r2, r1
 8003a10:	4629      	mov	r1, r5
 8003a12:	eb43 0901 	adc.w	r9, r3, r1
 8003a16:	f04f 0200 	mov.w	r2, #0
 8003a1a:	f04f 0300 	mov.w	r3, #0
 8003a1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a2a:	4690      	mov	r8, r2
 8003a2c:	4699      	mov	r9, r3
 8003a2e:	4623      	mov	r3, r4
 8003a30:	eb18 0303 	adds.w	r3, r8, r3
 8003a34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a38:	462b      	mov	r3, r5
 8003a3a:	eb49 0303 	adc.w	r3, r9, r3
 8003a3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a4e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003a52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a56:	460b      	mov	r3, r1
 8003a58:	18db      	adds	r3, r3, r3
 8003a5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	eb42 0303 	adc.w	r3, r2, r3
 8003a62:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003a68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003a6c:	f7fc fbb2 	bl	80001d4 <__aeabi_uldivmod>
 8003a70:	4602      	mov	r2, r0
 8003a72:	460b      	mov	r3, r1
 8003a74:	4b61      	ldr	r3, [pc, #388]	@ (8003bfc <UART_SetConfig+0x2d4>)
 8003a76:	fba3 2302 	umull	r2, r3, r3, r2
 8003a7a:	095b      	lsrs	r3, r3, #5
 8003a7c:	011c      	lsls	r4, r3, #4
 8003a7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a82:	2200      	movs	r2, #0
 8003a84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a88:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003a8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003a90:	4642      	mov	r2, r8
 8003a92:	464b      	mov	r3, r9
 8003a94:	1891      	adds	r1, r2, r2
 8003a96:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003a98:	415b      	adcs	r3, r3
 8003a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003aa0:	4641      	mov	r1, r8
 8003aa2:	eb12 0a01 	adds.w	sl, r2, r1
 8003aa6:	4649      	mov	r1, r9
 8003aa8:	eb43 0b01 	adc.w	fp, r3, r1
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	f04f 0300 	mov.w	r3, #0
 8003ab4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ab8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003abc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ac0:	4692      	mov	sl, r2
 8003ac2:	469b      	mov	fp, r3
 8003ac4:	4643      	mov	r3, r8
 8003ac6:	eb1a 0303 	adds.w	r3, sl, r3
 8003aca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ace:	464b      	mov	r3, r9
 8003ad0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ad4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ae4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ae8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003aec:	460b      	mov	r3, r1
 8003aee:	18db      	adds	r3, r3, r3
 8003af0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003af2:	4613      	mov	r3, r2
 8003af4:	eb42 0303 	adc.w	r3, r2, r3
 8003af8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003afa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003afe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003b02:	f7fc fb67 	bl	80001d4 <__aeabi_uldivmod>
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4611      	mov	r1, r2
 8003b0c:	4b3b      	ldr	r3, [pc, #236]	@ (8003bfc <UART_SetConfig+0x2d4>)
 8003b0e:	fba3 2301 	umull	r2, r3, r3, r1
 8003b12:	095b      	lsrs	r3, r3, #5
 8003b14:	2264      	movs	r2, #100	@ 0x64
 8003b16:	fb02 f303 	mul.w	r3, r2, r3
 8003b1a:	1acb      	subs	r3, r1, r3
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003b22:	4b36      	ldr	r3, [pc, #216]	@ (8003bfc <UART_SetConfig+0x2d4>)
 8003b24:	fba3 2302 	umull	r2, r3, r3, r2
 8003b28:	095b      	lsrs	r3, r3, #5
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003b30:	441c      	add	r4, r3
 8003b32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b36:	2200      	movs	r2, #0
 8003b38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b3c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003b44:	4642      	mov	r2, r8
 8003b46:	464b      	mov	r3, r9
 8003b48:	1891      	adds	r1, r2, r2
 8003b4a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b4c:	415b      	adcs	r3, r3
 8003b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003b54:	4641      	mov	r1, r8
 8003b56:	1851      	adds	r1, r2, r1
 8003b58:	6339      	str	r1, [r7, #48]	@ 0x30
 8003b5a:	4649      	mov	r1, r9
 8003b5c:	414b      	adcs	r3, r1
 8003b5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b60:	f04f 0200 	mov.w	r2, #0
 8003b64:	f04f 0300 	mov.w	r3, #0
 8003b68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003b6c:	4659      	mov	r1, fp
 8003b6e:	00cb      	lsls	r3, r1, #3
 8003b70:	4651      	mov	r1, sl
 8003b72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b76:	4651      	mov	r1, sl
 8003b78:	00ca      	lsls	r2, r1, #3
 8003b7a:	4610      	mov	r0, r2
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	4603      	mov	r3, r0
 8003b80:	4642      	mov	r2, r8
 8003b82:	189b      	adds	r3, r3, r2
 8003b84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b88:	464b      	mov	r3, r9
 8003b8a:	460a      	mov	r2, r1
 8003b8c:	eb42 0303 	adc.w	r3, r2, r3
 8003b90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ba0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003ba4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ba8:	460b      	mov	r3, r1
 8003baa:	18db      	adds	r3, r3, r3
 8003bac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bae:	4613      	mov	r3, r2
 8003bb0:	eb42 0303 	adc.w	r3, r2, r3
 8003bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003bba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003bbe:	f7fc fb09 	bl	80001d4 <__aeabi_uldivmod>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8003bfc <UART_SetConfig+0x2d4>)
 8003bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bcc:	095b      	lsrs	r3, r3, #5
 8003bce:	2164      	movs	r1, #100	@ 0x64
 8003bd0:	fb01 f303 	mul.w	r3, r1, r3
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	3332      	adds	r3, #50	@ 0x32
 8003bda:	4a08      	ldr	r2, [pc, #32]	@ (8003bfc <UART_SetConfig+0x2d4>)
 8003bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003be0:	095b      	lsrs	r3, r3, #5
 8003be2:	f003 0207 	and.w	r2, r3, #7
 8003be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4422      	add	r2, r4
 8003bee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bf0:	e106      	b.n	8003e00 <UART_SetConfig+0x4d8>
 8003bf2:	bf00      	nop
 8003bf4:	40011000 	.word	0x40011000
 8003bf8:	40011400 	.word	0x40011400
 8003bfc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c04:	2200      	movs	r2, #0
 8003c06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c0a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003c0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003c12:	4642      	mov	r2, r8
 8003c14:	464b      	mov	r3, r9
 8003c16:	1891      	adds	r1, r2, r2
 8003c18:	6239      	str	r1, [r7, #32]
 8003c1a:	415b      	adcs	r3, r3
 8003c1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c22:	4641      	mov	r1, r8
 8003c24:	1854      	adds	r4, r2, r1
 8003c26:	4649      	mov	r1, r9
 8003c28:	eb43 0501 	adc.w	r5, r3, r1
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	00eb      	lsls	r3, r5, #3
 8003c36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c3a:	00e2      	lsls	r2, r4, #3
 8003c3c:	4614      	mov	r4, r2
 8003c3e:	461d      	mov	r5, r3
 8003c40:	4643      	mov	r3, r8
 8003c42:	18e3      	adds	r3, r4, r3
 8003c44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c48:	464b      	mov	r3, r9
 8003c4a:	eb45 0303 	adc.w	r3, r5, r3
 8003c4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c5e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c62:	f04f 0200 	mov.w	r2, #0
 8003c66:	f04f 0300 	mov.w	r3, #0
 8003c6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c6e:	4629      	mov	r1, r5
 8003c70:	008b      	lsls	r3, r1, #2
 8003c72:	4621      	mov	r1, r4
 8003c74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c78:	4621      	mov	r1, r4
 8003c7a:	008a      	lsls	r2, r1, #2
 8003c7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003c80:	f7fc faa8 	bl	80001d4 <__aeabi_uldivmod>
 8003c84:	4602      	mov	r2, r0
 8003c86:	460b      	mov	r3, r1
 8003c88:	4b60      	ldr	r3, [pc, #384]	@ (8003e0c <UART_SetConfig+0x4e4>)
 8003c8a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c8e:	095b      	lsrs	r3, r3, #5
 8003c90:	011c      	lsls	r4, r3, #4
 8003c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c96:	2200      	movs	r2, #0
 8003c98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c9c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003ca0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003ca4:	4642      	mov	r2, r8
 8003ca6:	464b      	mov	r3, r9
 8003ca8:	1891      	adds	r1, r2, r2
 8003caa:	61b9      	str	r1, [r7, #24]
 8003cac:	415b      	adcs	r3, r3
 8003cae:	61fb      	str	r3, [r7, #28]
 8003cb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cb4:	4641      	mov	r1, r8
 8003cb6:	1851      	adds	r1, r2, r1
 8003cb8:	6139      	str	r1, [r7, #16]
 8003cba:	4649      	mov	r1, r9
 8003cbc:	414b      	adcs	r3, r1
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	f04f 0200 	mov.w	r2, #0
 8003cc4:	f04f 0300 	mov.w	r3, #0
 8003cc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ccc:	4659      	mov	r1, fp
 8003cce:	00cb      	lsls	r3, r1, #3
 8003cd0:	4651      	mov	r1, sl
 8003cd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cd6:	4651      	mov	r1, sl
 8003cd8:	00ca      	lsls	r2, r1, #3
 8003cda:	4610      	mov	r0, r2
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4603      	mov	r3, r0
 8003ce0:	4642      	mov	r2, r8
 8003ce2:	189b      	adds	r3, r3, r2
 8003ce4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ce8:	464b      	mov	r3, r9
 8003cea:	460a      	mov	r2, r1
 8003cec:	eb42 0303 	adc.w	r3, r2, r3
 8003cf0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003cfe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003d00:	f04f 0200 	mov.w	r2, #0
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003d0c:	4649      	mov	r1, r9
 8003d0e:	008b      	lsls	r3, r1, #2
 8003d10:	4641      	mov	r1, r8
 8003d12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d16:	4641      	mov	r1, r8
 8003d18:	008a      	lsls	r2, r1, #2
 8003d1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003d1e:	f7fc fa59 	bl	80001d4 <__aeabi_uldivmod>
 8003d22:	4602      	mov	r2, r0
 8003d24:	460b      	mov	r3, r1
 8003d26:	4611      	mov	r1, r2
 8003d28:	4b38      	ldr	r3, [pc, #224]	@ (8003e0c <UART_SetConfig+0x4e4>)
 8003d2a:	fba3 2301 	umull	r2, r3, r3, r1
 8003d2e:	095b      	lsrs	r3, r3, #5
 8003d30:	2264      	movs	r2, #100	@ 0x64
 8003d32:	fb02 f303 	mul.w	r3, r2, r3
 8003d36:	1acb      	subs	r3, r1, r3
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	3332      	adds	r3, #50	@ 0x32
 8003d3c:	4a33      	ldr	r2, [pc, #204]	@ (8003e0c <UART_SetConfig+0x4e4>)
 8003d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d42:	095b      	lsrs	r3, r3, #5
 8003d44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d48:	441c      	add	r4, r3
 8003d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d4e:	2200      	movs	r2, #0
 8003d50:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d52:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d54:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003d58:	4642      	mov	r2, r8
 8003d5a:	464b      	mov	r3, r9
 8003d5c:	1891      	adds	r1, r2, r2
 8003d5e:	60b9      	str	r1, [r7, #8]
 8003d60:	415b      	adcs	r3, r3
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d68:	4641      	mov	r1, r8
 8003d6a:	1851      	adds	r1, r2, r1
 8003d6c:	6039      	str	r1, [r7, #0]
 8003d6e:	4649      	mov	r1, r9
 8003d70:	414b      	adcs	r3, r1
 8003d72:	607b      	str	r3, [r7, #4]
 8003d74:	f04f 0200 	mov.w	r2, #0
 8003d78:	f04f 0300 	mov.w	r3, #0
 8003d7c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d80:	4659      	mov	r1, fp
 8003d82:	00cb      	lsls	r3, r1, #3
 8003d84:	4651      	mov	r1, sl
 8003d86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d8a:	4651      	mov	r1, sl
 8003d8c:	00ca      	lsls	r2, r1, #3
 8003d8e:	4610      	mov	r0, r2
 8003d90:	4619      	mov	r1, r3
 8003d92:	4603      	mov	r3, r0
 8003d94:	4642      	mov	r2, r8
 8003d96:	189b      	adds	r3, r3, r2
 8003d98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d9a:	464b      	mov	r3, r9
 8003d9c:	460a      	mov	r2, r1
 8003d9e:	eb42 0303 	adc.w	r3, r2, r3
 8003da2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	663b      	str	r3, [r7, #96]	@ 0x60
 8003dae:	667a      	str	r2, [r7, #100]	@ 0x64
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	f04f 0300 	mov.w	r3, #0
 8003db8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003dbc:	4649      	mov	r1, r9
 8003dbe:	008b      	lsls	r3, r1, #2
 8003dc0:	4641      	mov	r1, r8
 8003dc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dc6:	4641      	mov	r1, r8
 8003dc8:	008a      	lsls	r2, r1, #2
 8003dca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003dce:	f7fc fa01 	bl	80001d4 <__aeabi_uldivmod>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8003e0c <UART_SetConfig+0x4e4>)
 8003dd8:	fba3 1302 	umull	r1, r3, r3, r2
 8003ddc:	095b      	lsrs	r3, r3, #5
 8003dde:	2164      	movs	r1, #100	@ 0x64
 8003de0:	fb01 f303 	mul.w	r3, r1, r3
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	3332      	adds	r3, #50	@ 0x32
 8003dea:	4a08      	ldr	r2, [pc, #32]	@ (8003e0c <UART_SetConfig+0x4e4>)
 8003dec:	fba2 2303 	umull	r2, r3, r2, r3
 8003df0:	095b      	lsrs	r3, r3, #5
 8003df2:	f003 020f 	and.w	r2, r3, #15
 8003df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4422      	add	r2, r4
 8003dfe:	609a      	str	r2, [r3, #8]
}
 8003e00:	bf00      	nop
 8003e02:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003e06:	46bd      	mov	sp, r7
 8003e08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e0c:	51eb851f 	.word	0x51eb851f

08003e10 <memset>:
 8003e10:	4402      	add	r2, r0
 8003e12:	4603      	mov	r3, r0
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d100      	bne.n	8003e1a <memset+0xa>
 8003e18:	4770      	bx	lr
 8003e1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e1e:	e7f9      	b.n	8003e14 <memset+0x4>

08003e20 <__libc_init_array>:
 8003e20:	b570      	push	{r4, r5, r6, lr}
 8003e22:	4d0d      	ldr	r5, [pc, #52]	@ (8003e58 <__libc_init_array+0x38>)
 8003e24:	4c0d      	ldr	r4, [pc, #52]	@ (8003e5c <__libc_init_array+0x3c>)
 8003e26:	1b64      	subs	r4, r4, r5
 8003e28:	10a4      	asrs	r4, r4, #2
 8003e2a:	2600      	movs	r6, #0
 8003e2c:	42a6      	cmp	r6, r4
 8003e2e:	d109      	bne.n	8003e44 <__libc_init_array+0x24>
 8003e30:	4d0b      	ldr	r5, [pc, #44]	@ (8003e60 <__libc_init_array+0x40>)
 8003e32:	4c0c      	ldr	r4, [pc, #48]	@ (8003e64 <__libc_init_array+0x44>)
 8003e34:	f000 f818 	bl	8003e68 <_init>
 8003e38:	1b64      	subs	r4, r4, r5
 8003e3a:	10a4      	asrs	r4, r4, #2
 8003e3c:	2600      	movs	r6, #0
 8003e3e:	42a6      	cmp	r6, r4
 8003e40:	d105      	bne.n	8003e4e <__libc_init_array+0x2e>
 8003e42:	bd70      	pop	{r4, r5, r6, pc}
 8003e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e48:	4798      	blx	r3
 8003e4a:	3601      	adds	r6, #1
 8003e4c:	e7ee      	b.n	8003e2c <__libc_init_array+0xc>
 8003e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e52:	4798      	blx	r3
 8003e54:	3601      	adds	r6, #1
 8003e56:	e7f2      	b.n	8003e3e <__libc_init_array+0x1e>
 8003e58:	08003ea8 	.word	0x08003ea8
 8003e5c:	08003ea8 	.word	0x08003ea8
 8003e60:	08003ea8 	.word	0x08003ea8
 8003e64:	08003eac 	.word	0x08003eac

08003e68 <_init>:
 8003e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e6a:	bf00      	nop
 8003e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e6e:	bc08      	pop	{r3}
 8003e70:	469e      	mov	lr, r3
 8003e72:	4770      	bx	lr

08003e74 <_fini>:
 8003e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e76:	bf00      	nop
 8003e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e7a:	bc08      	pop	{r3}
 8003e7c:	469e      	mov	lr, r3
 8003e7e:	4770      	bx	lr
